{"swagger":"2.0","info":{"version":"user-v1","title":"Meniga API User-V1","description":""},"host":"api.umw.meniga.net","basePath":"/user/v1","schemes":["http"],"paths":{"/accounts":{"get":{"tags":["Accounts"],"summary":"Get a list of accounts associated with the user","operationId":"Accounts_GetAccounts","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"skip","in":"query","description":"The number of accounts bypassed","required":false,"type":"integer","format":"int32"},{"name":"take","in":"query","description":"The maximum number of accounts returned. If null, returns all.","required":false,"type":"integer","format":"int32"},{"name":"realmIdentifier","in":"query","description":"The realm identifier","required":false,"type":"string"},{"name":"accountIdentifier","in":"query","description":"The account identifier","required":false,"type":"string"},{"name":"accountCategory","in":"query","description":"The Account Category as defined by the \"GET /user/v1/accounts/accountcategories\" endpoint.\r\nPassed values can both be the integer id or the string name of the account category.","required":false,"type":"string","enum":["Unknown","Current","Credit","Savings","Loan","Wallet","Manual","Asset"]},{"name":"includeHidden","in":"query","description":"True if hidden accounts should also be returned. False or omitted will only return accounts that are not hidden.","required":false,"type":"boolean"},{"name":"includeDisabled","in":"query","description":"True if disabled accounts should also be returned. False or omitted will only return accounts that are not disabled.","required":false,"type":"boolean"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.AccountModel[],Meniga.Runtime.WebApi.Models.Pagination.PaginationMetaModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"post":{"tags":["Accounts"],"summary":"Create a new account for the given user for a certain realm account type","operationId":"Accounts_CreateAccount","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"accountCreateRequest","in":"body","description":"The data for the new account","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.AccountCreateRequest"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.AccountModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/accounts/{id}":{"get":{"tags":["Accounts"],"summary":"Get an account associated with the user","operationId":"Accounts_GetAccount","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"the Id of the account","required":true,"type":"integer","format":"int64"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.AccountModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"put":{"tags":["Accounts"],"summary":"Update an account","operationId":"Accounts_UpdateAccount","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the account","required":true,"type":"integer","format":"int64"},{"name":"accountUpdateRequest","in":"body","description":"The account data to update","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.AccountUpdateRequest"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.AccountModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"delete":{"tags":["Accounts"],"summary":"Hard delete of an account and all connected transactions, enrichment data and user events belonging to it","operationId":"Accounts_DeleteAccount","consumes":[],"produces":[],"parameters":[{"name":"id","in":"path","description":"The Id of the account","required":true,"type":"integer","format":"int64"}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/accounts/accounttypes":{"get":{"tags":["Accounts"],"summary":"Get a list of all general account types within the system","operationId":"Accounts_GetAccountTypes","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"organizationId","in":"query","description":"The Id of an organization to get the account types for. If empty then return all account types.","required":false,"type":"integer","format":"int32"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.List[Meniga.Core.Api.Models.AccountTypeModel]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/accounts/accounttypes/{id}":{"get":{"tags":["Accounts"],"summary":"Get an account type","operationId":"Accounts_GetAccountType","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the account type","required":true,"type":"integer","format":"int32"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.AccountTypeModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/accounts/accountcategories":{"get":{"tags":["Accounts"],"summary":"Get a list of all available account type categories","operationId":"Accounts_GetAccountCategories","consumes":[],"produces":["application/json","text/json"],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.AccountTypeCategory[]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/accounts/authorizationtypes":{"get":{"tags":["Accounts"],"summary":"Get a list of all available account authorization types","operationId":"Accounts_GetAccountAuthorizationTypes","consumes":[],"produces":["application/json","text/json"],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.NameId[]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/accounts/{id}/metadata":{"get":{"tags":["Accounts"],"summary":"Get all parameters of an account","operationId":"Accounts_GetAccountMetadata","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the account","required":true,"type":"integer","format":"int64"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.AccountMetadataModel[]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"put":{"tags":["Accounts"],"summary":"Create or update account parameter","operationId":"Accounts_CreateOrUpdateAccountMetadata","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the account","required":true,"type":"integer","format":"int64"},{"name":"parameter","in":"body","description":"The account parameter update","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.AccountMetadataModel"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.AccountMetadataModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/accounts/{id}/metadata/{name}":{"get":{"tags":["Accounts"],"summary":"Get an account parameter","operationId":"Accounts_GetAccountMetadataEntry","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the account","required":true,"type":"integer","format":"int64"},{"name":"name","in":"path","description":"The name of the account parameter","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.ValueWrapperModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/accounts/{id}/history":{"get":{"tags":["Accounts"],"summary":"Get a list of account balance history entries","operationId":"Accounts_GetAccountHistory","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the account","required":true,"type":"integer","format":"int64"},{"name":"dateFrom","in":"query","description":"The inclusive start date (YYYY-MM-DD) for the entries to be fetched","required":true,"type":"string","format":"date-time"},{"name":"dateTo","in":"query","description":"The inclusive end date (YYYY-MM-DD) for the entries to be fetched","required":true,"type":"string","format":"date-time"},{"name":"sort","in":"query","description":"Allows sorting by BalanceDate and Balance. Prefixing the value of the property by \"-\" indicates ordering by DESC else ASC. The default is BalanceDate.","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.AccountBalanceHistory[]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/authentication":{"post":{"tags":["Authentication"],"summary":"Creates a token from email and password","operationId":"Authentication_Login","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"emailPass","in":"body","description":"Email and password of the user to authenticate","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Authentication.Api.Models.EmailPasswordLoginRequest"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Authentication.Api.Models.AuthenticationResponse]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/authentication/after":{"post":{"tags":["Authentication"],"summary":"Perform post authentication tasks.\r\nShould be called after a user is successfully authenticated","operationId":"Authentication_OnAfterLogon","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"patRequest","in":"body","description":"User identifier, realm identifier and parameters submitted during the authentication","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Authentication.Api.Models.PostAuthenticationTasksRequest"}}],"responses":{"200":{"description":"OK","schema":{"type":"object"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/authentication/refresh":{"post":{"tags":["Authentication"],"summary":"Refresh the access token to allow long-term access","operationId":"Authentication_RefreshToken","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"request","in":"body","description":"The refresh token for a logged in person","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Authentication.Api.Models.RefreshTokenRequest"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Authentication.Api.Models.AuthenticationResponse]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/authentication/sso/{type}":{"post":{"tags":["Authentication"],"summary":"Authenticate a user using a security token","operationId":"Authentication_SingleSignOn","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"type","in":"path","description":"The name of the AuthClaimsProvider that will create authentication claims from the security token","required":true,"type":"string"},{"name":"securityToken","in":"query","description":"The token used to authenticate. If this parameter is empty, the token is read from the post body.","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Authentication.Api.Models.AuthenticationResponse]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/budgets":{"get":{"tags":["Budgets"],"summary":"Get the list of budgets for a user","operationId":"Budgets_GetBudgets","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"ids","in":"query","description":"The ids, comma delimited, of the budgets to return","required":false,"type":"string"},{"name":"accountIds","in":"query","description":"A comma delimited list of account ids to filter budgets by. Only budgets that are associated with these\r\naccounts will be returned","required":false,"type":"string"},{"name":"type","in":"query","description":"The type of budget to return in the list, filters the list down to 1 type","required":false,"type":"string","enum":["Budget","Planning"]}],"responses":{"200":{"description":"A list of budget headers","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IEnumerable[Meniga.Component.Budgets.Api.Models.Responses.BudgetHeaderMessage]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"post":{"tags":["Budgets"],"summary":"Create a single budget","operationId":"Budgets_CreateBudget","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"body","in":"body","description":"The budget creation message","required":true,"schema":{"$ref":"#/definitions/Meniga.Component.Budgets.Api.Models.Requests.BudgetCreationMessage"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.Budgets.Api.Models.Responses.BudgetCreatedMessage]"}},"201":{"description":"A created budget","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.Budgets.Api.Models.Responses.BudgetCreatedMessage]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/budgets/{id}":{"get":{"tags":["Budgets"],"summary":"Gets a single budget for the user","operationId":"Budgets_GetBudget","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the budget to get","required":true,"type":"integer","format":"int64"},{"name":"categoryIds","in":"query","description":"A list of category id's to filter entries by. Only entries linked to these ids will be returned","required":false,"type":"string"},{"name":"startDate","in":"query","description":"The start date (inclusive) to return entries from","required":false,"type":"string","format":"date-time"},{"name":"endDate","in":"query","description":"The end date (inclusive) to return entries to","required":false,"type":"string","format":"date-time"},{"name":"allowOverlappingEntries","in":"query","description":"Defaults to false, entries must be completely bound by the date range supplied.\r\nIf true, entries that intersect the date range will be returned.","required":false,"type":"boolean"},{"name":"includeEntries","in":"query","description":"Defaults to true, return entries with the budget object.\r\nIf false, only return the budget object with no entries.","required":false,"type":"boolean"}],"responses":{"200":{"description":"A single budget with entries","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.Budgets.Api.Models.Responses.BudgetMessage]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"put":{"tags":["Budgets"],"summary":"Update a budget","operationId":"Budgets_UpdateBudget","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the budget to update","required":true,"type":"integer","format":"int64"},{"name":"body","in":"body","description":"The updated budget body","required":true,"schema":{"$ref":"#/definitions/Meniga.Component.Budgets.Api.Models.Requests.BudgetUpdateMessage"}}],"responses":{"200":{"description":"The updated budget model","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.Budgets.Api.Models.Responses.BudgetUpdatedMessage]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"delete":{"tags":["Budgets"],"summary":"Delete a single budget","operationId":"Budgets_DeleteBudget","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the budget to delete","required":true,"type":"integer","format":"int64"}],"responses":{"200":{"description":"OK","schema":{"type":"object"}},"204":{"description":"A no content result to denote successful deletion"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/budgets/{id}/reset":{"post":{"tags":["Budgets"],"summary":"Reset a budget","operationId":"Budgets_ResetBudget","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the budget to reset","required":true,"type":"integer","format":"int64"}],"responses":{"200":{"description":"OK","schema":{"type":"object"}},"204":{"description":"No content if reset was a success"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/budgets/{id}/entries":{"get":{"tags":["Budgets"],"summary":"Get budget entries for a user","operationId":"Budgets_GetBudgetEntries","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the budget to get entries from","required":true,"type":"integer","format":"int64"},{"name":"categoryIds","in":"query","description":"The category Ids to filter by, only entries associated with these categories will be returned","required":false,"type":"string"},{"name":"startDate","in":"query","description":"The start date (inclusive) from which to get entries","required":false,"type":"string","format":"date-time"},{"name":"endDate","in":"query","description":"The end date (inclusive) to which get entries","required":false,"type":"string","format":"date-time"},{"name":"allowOverlappingEntries","in":"query","description":"Defaults to false, entries must be completely bound by end and start date to be returned. \r\nIf true then entries that intersect the start and end date period are returned.","required":false,"type":"boolean"}],"responses":{"200":{"description":"The budget entries","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IEnumerable[Meniga.Component.Budgets.Api.Models.Responses.BudgetEntryMessage]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"post":{"tags":["Budgets"],"summary":"Create entries for a budget","operationId":"Budgets_CreateBudgetEntries","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the budget to create entries in","required":true,"type":"integer","format":"int64"},{"name":"body","in":"body","description":"The message with entry creation information","required":true,"schema":{"$ref":"#/definitions/Meniga.Component.Budgets.Api.Models.Requests.BudgetEntriesCreationMessage"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IEnumerable[Meniga.Component.Budgets.Api.Models.Responses.BudgetEntryCreatedMessage]]"}},"201":{"description":"Created entries","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IEnumerable[Meniga.Component.Budgets.Api.Models.Responses.BudgetEntryCreatedMessage]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/budgets/{id}/entries/{entryId}":{"get":{"tags":["Budgets"],"summary":"Get a single budget entry","operationId":"Budgets_GetBudgetEntry","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the budget","required":true,"type":"integer","format":"int64"},{"name":"entryId","in":"path","description":"The id of the entry","required":true,"type":"integer","format":"int64"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.Budgets.Api.Models.Responses.BudgetEntryMessage]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"put":{"tags":["Budgets"],"summary":"Update a single budget entry for the user","operationId":"Budgets_UpdateBudgetEntry","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"","required":true,"type":"integer","format":"int64"},{"name":"entryId","in":"path","description":"","required":true,"type":"integer","format":"int64"},{"name":"body","in":"body","description":"","required":true,"schema":{"$ref":"#/definitions/Meniga.Component.Budgets.Api.Models.Requests.BudgetEntryUpdateMessage"}}],"responses":{"200":{"description":"The updated budget entry","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.Budgets.Api.Models.Responses.BudgetEntryUpdatedMessage]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"delete":{"tags":["Budgets"],"summary":"Delete a single budget entry","operationId":"Budgets_DeleteBudgetEntry","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the budget","required":true,"type":"integer","format":"int64"},{"name":"entryId","in":"path","description":"The id of the entry to delete","required":true,"type":"integer","format":"int64"}],"responses":{"200":{"description":"OK","schema":{"type":"object"}},"204":{"description":"A no content result to denote successful deletion"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/budgets/{id}/rules":{"get":{"tags":["Budgets"],"summary":"Get rules for a planning budget","operationId":"Budgets_GetPlanningRules","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the budget","required":true,"type":"integer","format":"int64"},{"name":"categoryIds","in":"query","description":"The category ids to filter by, only rules assocated to these categories will be returned","required":false,"type":"string"},{"name":"startDate","in":"query","description":"The start date (inclusive) to return rules from","required":false,"type":"string","format":"date-time"},{"name":"endDate","in":"query","description":"The end date (inclusive) to return rules from","required":false,"type":"string","format":"date-time"},{"name":"allowOverlappingRules","in":"query","description":"Default to false, rules must be completely bound by start and end date to be included in result.\r\nIf true then rules that intersect the start and end date period are returned.","required":false,"type":"boolean"}],"responses":{"200":{"description":"A set of planning rules","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IEnumerable[Meniga.Component.Budgets.Api.Models.Responses.BudgetRuleMessage]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"post":{"tags":["Budgets"],"summary":"Create rules for a planning budget","operationId":"Budgets_CreatePlanningRules","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the planning budget","required":true,"type":"integer","format":"int64"},{"name":"body","in":"body","description":"The creation message for the rules","required":true,"schema":{"$ref":"#/definitions/Meniga.Component.Budgets.Api.Models.Requests.BudgetRulesCreationMessage"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IEnumerable[Meniga.Component.Budgets.Api.Models.Responses.BudgetRuleCreatedMessage]]"}},"201":{"description":"The created planning rules","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IEnumerable[Meniga.Component.Budgets.Api.Models.Responses.BudgetRuleCreatedMessage]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/budgets/{id}/rules/{ruleId}":{"delete":{"tags":["Budgets"],"summary":"Delete a single rule from a planning budget","operationId":"Budgets_DeletePlanningRule","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the budget","required":true,"type":"integer","format":"int64"},{"name":"ruleId","in":"path","description":"The id of the rule","required":true,"type":"integer","format":"int64"}],"responses":{"200":{"description":"OK","schema":{"type":"object"}},"204":{"description":"A no content result to denote successful deletion"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/categories":{"get":{"tags":["Categories"],"summary":"Get all categories, depending on the filter either the public ones or the both user and public categories","operationId":"Categories_GetCategories","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"isPublic","in":"query","description":"This is true if the returned categories are public. False if the returned categories are both user and public","required":false,"type":"boolean"},{"name":"culture","in":"query","description":"WARNING: This has been deprecated. Please use Accept-Language HTTP header instead.\r\nThe language the category names should be in (only relevant for public categories, user's custom categories are always in the language they are created)","required":false,"type":"string"},{"name":"skip","in":"query","description":"The number of results skipped","required":false,"type":"integer","format":"int32"},{"name":"take","in":"query","description":"The maximum number of results returned. If null, returns all.","required":false,"type":"integer","format":"int32"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.CategoryModel[],Meniga.Runtime.WebApi.Models.Pagination.PaginationMetaModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"post":{"tags":["Categories"],"summary":"Create a new category for a user","operationId":"Categories_CreateUserCategory","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"requestModel","in":"body","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.CategoryCreateRequest"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.CategoryModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/categories/{id}":{"get":{"tags":["Categories"],"summary":"Get a category","operationId":"Categories_GetById","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the category","required":true,"type":"integer","format":"int32"},{"name":"culture","in":"query","description":"The culture of the category","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.CategoryModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"put":{"tags":["Categories"],"summary":"Update a category","operationId":"Categories_UpdateUserCategory","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the category","required":true,"type":"integer","format":"int32"},{"name":"modelRequest","in":"body","description":"Information about the category to update","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.CategoryUpdateRequest"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.CategoryModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"delete":{"tags":["Categories"],"summary":"Delete a category and all its child categories","operationId":"Categories_Delete","consumes":[],"produces":[],"parameters":[{"name":"id","in":"path","description":"The Id of the category","required":true,"type":"integer","format":"int32"},{"name":"deleteConnectedRules","in":"query","description":"True if the rules that are connected to the category should be deleted, otherwise false.","required":true,"type":"boolean"},{"name":"newCategoryId","in":"query","description":"The Id of the category where transactions should be moved to. If not set, transactions will be moved to the parent category or to Uncategorized if the category that was deleted is a parent category.","required":false,"type":"integer","format":"int32"}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/categories/types":{"get":{"tags":["Categories"],"summary":"Get all available category types","operationId":"Categories_GetTypes","consumes":[],"produces":["application/json","text/json"],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.List[Meniga.Core.Api.Models.NameId]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/categories/ranks":{"get":{"tags":["Categories"],"summary":"Get all available category ranks","operationId":"Categories_GetRanks","consumes":[],"produces":["application/json","text/json"],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.List[Meniga.Core.Api.Models.NameId]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/challenges":{"get":{"tags":["Challenges"],"summary":"Gets a list of challenges for the user","description":"The typeData property returns different set of properties depending on the challenge type \r\n             * SuggestedSpending:\r\n                 \"typeData\": {\r\n                   \"targetPercentage\": 10,\r\n                   \"categoryIds\": [12, 13, 14],\r\n                   \"spentAmount\": 10000.0,\r\n                   \"targetAmount\": 9000.0,\r\n                   \"numberOfParticipants\": 0,\r\n                   \"recurringInterval\": \"Monthly\"\r\n                 }\r\n             \r\n             * CustomSpending:\r\n                 \"typeData\": {\r\n                   \"categoryIds\": [12, 13, 14],\r\n                   \"spentAmount\": 10000.0,\r\n                   \"targetAmount\": 9000.0,\r\n                   \"recurringInterval\": \"Monthly\",\r\n                   \"metaData\": \"\"\r\n                 }\r\n            \r\n            Expired challenges:\r\n            A challenge is considered expired when the challenge's end date has passed. That applies to recurring\r\n            challenges too. The expired flag does not refer to a period in a recurring challenge being completed.\r\n            The completed periods of recurring challenges are not returned by this endpoint.\r\n            \r\n            Suggested challenges:\r\n            A suggested challenge is a challenge that is not created by the user and one that the user can accept.\r\n            \r\n            Accepted challenges:\r\n            An accepted challenge is a suggested challenge that the user has accepted.\r\n            \r\n            Disabled challenges:\r\n            A disabled challenges is a challenge that the user has decided to ignore/disable.","operationId":"Challenges_GetChallenges","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"includeExpired","in":"query","description":"Include expired challenges in the response. Default: false (expired challenges are not included in the response)","required":false,"type":"boolean"},{"name":"excludeSuggested","in":"query","description":"Skip suggested/system challenges in the response. Default: false (suggested/system challenges are included in the response)","required":false,"type":"boolean"},{"name":"excludeAccepted","in":"query","description":"Skip accepted challenges in the response. Default: false (accepted challenges are included in the response)","required":false,"type":"boolean"},{"name":"includeDisabled","in":"query","description":"Include ignored/disabled challenges in the response. Default: false (ignored/disabled challenges are not included in the response)","required":false,"type":"boolean"}],"responses":{"200":{"description":"A list of challenges","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Challenges.Api.Models.UserChallengeModel]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"post":{"tags":["Challenges"],"summary":"Create a challenge for the user","description":"The typeData property takes different set of properties depending on the type that should be created\r\n             * CustomSpending:\r\n                 \"typeData\": {\r\n                   \"categoryIds\": [12, 13, 14],\r\n                   \"spentAmount\": 10000.0,\r\n                   \"targetAmount\": 9000.0,\r\n                   \"recurringInterval\": \"Monthly\",\r\n                   \"metaData\": \"\"\r\n                 }","operationId":"Challenges_CreateChallenge","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"request","in":"body","description":"request object containing all necessary parameters","required":true,"schema":{"$ref":"#/definitions/Meniga.Challenges.Api.Models.Requests.CreateUserChallengeRequest"}}],"responses":{"201":{"description":"Created challenge","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Challenges.Api.Models.UserChallengeModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/challenges/{id}":{"get":{"tags":["Challenges"],"summary":"Gets challenge by Id","description":"The typeData property returns different set of properties depending on the challenge type\r\n             * SuggestedSpending:\r\n                 \"typeData\": {\r\n                   \"targetPercentage\": 10,\r\n                   \"categoryIds\": [12, 13, 14],\r\n                   \"spentAmount\": 10000.0,\r\n                   \"targetAmount\": 9000.0,\r\n                   \"numberOfParticipants\": 0,\r\n                   \"recurringInterval\": \"Monthly\"\r\n                 }\r\n             \r\n             * CustomSpending:\r\n                 \"typeData\": {\r\n                   \"categoryIds\": [12, 13, 14],\r\n                   \"spentAmount\": 10000.0,\r\n                   \"targetAmount\": 9000.0,\r\n                   \"recurringInterval\": \"Monthly\",\r\n                   \"metaData\": \"\"\r\n                 }","operationId":"Challenges_GetChallenge","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","required":true,"type":"string","format":"uuid"}],"responses":{"200":{"description":"Challenge","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Challenges.Api.Models.UserChallengeModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"404":{"description":"Challenge not found"},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"put":{"tags":["Challenges"],"summary":"Updates a challenge for the user","description":"The typeData property takes different set of properties depending on the type that should be created\r\n             * SuggestedSpending:\r\n                 \"typeData\": {\r\n                   \"targetAmount\": 9000.0,\r\n                 }\r\n             * CustomSpending:\r\n                 \"typeData\": {\r\n                   \"categoryIds\": [12, 13, 14],\r\n                   \"targetAmount\": 9000.0,\r\n                   \"metaData\": \"\"\r\n                 }","operationId":"Challenges_UpdateChallenge","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"the id of the challenge to update","required":true,"type":"string","format":"uuid"},{"name":"request","in":"body","description":"request object containing all necessary parameters","required":true,"schema":{"$ref":"#/definitions/Meniga.Challenges.Api.Models.Requests.UpdateUserChallengeRequest"}}],"responses":{"200":{"description":"Updated challenge","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Challenges.Api.Models.UserChallengeModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"404":{"description":"Challenge not found"},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"delete":{"tags":["Challenges"],"summary":"Deletes a challenge by id. The challenge must have been accepted by the user","operationId":"Challenges_DeleteChallenge","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the challenge to delete","required":true,"type":"string","format":"uuid"}],"responses":{"204":{"description":"Challenge deleted"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"404":{"description":"Challenge not found"},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/challenges/{id}/accept":{"post":{"tags":["Challenges"],"summary":"Accepts a challenge for the user","description":"This method returns 202 Accepted when the response is returned before the spent amount has been determined.\r\nThe waiting time is determined by the request, the default is to not wait at all.","operationId":"Challenges_AcceptChallenge","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the challenge to accept","required":true,"type":"string","format":"uuid"},{"name":"request","in":"body","description":"The challenge acceptance model","required":true,"schema":{"$ref":"#/definitions/Meniga.Challenges.Api.Models.Requests.AcceptChallengeRequest"}}],"responses":{"200":{"description":"Challenge accepted","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Challenges.Api.Models.UserChallengeModel]"}},"202":{"description":"Challenge accepted without the spent amount","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Challenges.Api.Models.UserChallengeModel]"}},"400":{"description":"Validation error","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiClientError]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"404":{"description":"Challenge not found"},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/challenges/{id}/disable":{"post":{"tags":["Challenges"],"summary":"Disable a challenge for the user","description":"Pauses previously accepted challenge. \r\nFor suggested challenges not accepted yet an acceptance is made but in disabled state.\r\nDisabled challenges can be re-enabled by using the enable endpoint.","operationId":"Challenges_DisableChallenge","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the challenge to disable","required":true,"type":"string","format":"uuid"}],"responses":{"204":{"description":"Challenge disabled"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"404":{"description":"Challenge not found"},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/challenges/{id}/enable":{"post":{"tags":["Challenges"],"summary":"Enable a challenge for the user","description":"Resumes previously disabled challenge.","operationId":"Challenges_EnableChallenge","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the challenge to enable","required":true,"type":"string","format":"uuid"}],"responses":{"204":{"description":"Challenge enabled"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"404":{"description":"Challenge not found"},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/challenges/{id}/history":{"get":{"tags":["Challenges"],"summary":"Gets a list of completed periods of a recurring challenge","description":"The typeData property returns different set of properties depending on the challenge type \r\n             * SuggestedSpending:\r\n                 \"typeData\": {\r\n                   \"targetPercentage\": 10,\r\n                   \"categoryIds\": [12, 13, 14],\r\n                   \"spentAmount\": 10000.0,\r\n                   \"targetAmount\": 9000.0,\r\n                   \"numberOfParticipants\": 0,\r\n                   \"recurringInterval\": \"Monthly\"\r\n                 }\r\n             \r\n             * CustomSpending:\r\n                 \"typeData\": {\r\n                   \"categoryIds\": [12, 13, 14],\r\n                   \"spentAmount\": 10000.0,\r\n                   \"targetAmount\": 9000.0,\r\n                   \"recurringInterval\": \"Monthly\",\r\n                   \"metaData\": \"\"\r\n                 }","operationId":"Challenges_GetRecurringChallengeHistory","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The challenge identifier","required":true,"type":"string","format":"uuid"},{"name":"skip","in":"query","description":"Number of items to skip, default zero items","required":false,"type":"integer","format":"int32"},{"name":"take","in":"query","description":"Number of items to fetch, default all items","required":false,"type":"integer","format":"int32"}],"responses":{"200":{"description":"A list of completed periods of a recurring challenges","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Challenges.Api.Models.UserChallengeModel]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"404":{"description":"Challenge not found"},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/challenges/icons":{"get":{"tags":["Challenges"],"summary":"Get available challenges icon resources","operationId":"Challenges_GetIcons","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"format","in":"query","description":"Icon format to filter by","required":false,"type":"string","enum":["all","svg","png"]}],"responses":{"200":{"description":"Icon resources","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Challenges.Api.Models.IconResource]]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/challenges/icons/{id}":{"get":{"tags":["Challenges"],"summary":"Get an icon based on identifier","description":"The content type of the response is \"image/svg+xml\" for the SVG format and \"image/png\" for the PNG format.","operationId":"Challenges_GetIcon","consumes":[],"produces":["application/json","text/json","image/png","image/svg+xml"],"parameters":[{"name":"id","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"Icon","schema":{"type":"string"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/eventtracking":{"post":{"tags":["EventTracking"],"summary":"Track a custom event","operationId":"EventTracking_TrackEvent","consumes":["application/json","text/json"],"produces":[],"parameters":[{"name":"request","in":"body","description":"The metrics to be tracked","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.EventTrackingPostRequest"}}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/feed":{"get":{"tags":["Feed"],"summary":"Get user feed i.e. transactions and user events","operationId":"Feed_GetFeed","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"skip","in":"query","description":"How many pages should be skipped","required":false,"type":"integer","format":"int32"},{"name":"take","in":"query","description":"How many results should be fetched in a page. If null, returns 1000.","required":false,"type":"integer","format":"int32"},{"name":"dateFrom","in":"query","description":"The inclusive from date (YYYY-MM-DD)","required":false,"type":"string","format":"date-time"},{"name":"dateTo","in":"query","description":"The inclusive to date (YYYY-MM-DD)","required":false,"type":"string","format":"date-time"},{"name":"type","in":"query","description":"The types of feed items to supply. Either single value or comma separated list from (\"transactions\", \"userevents\", \"cashback\"). Values can be found at the /feed/types endpoint.","required":false,"type":"string"},{"name":"eventTypeIdentifiers","in":"query","description":"If getting userevents then this will filter the user events based on their eventTypeIdentifier. Either a single value or comma separarated list. Possible values can be found at the /userevents/eventtypes endpoint.","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.Feed.FeedItemModel[],Meniga.Core.Api.Models.Feed.FeedItemMetaModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/feed/{type}/{id}":{"get":{"tags":["Feed"],"summary":"Get a feed item by its Id and type","operationId":"Feed_GetFeedItem","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"type","in":"path","description":"The type of the feed item. See the /feed/types endpoint for supported types","required":true,"type":"string"},{"name":"id","in":"path","description":"The Id of the feed item","required":true,"type":"integer","format":"int64"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.Feed.FeedItemModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/feed/scheduledevents":{"get":{"tags":["Feed"],"summary":"Get scheduled events within a specified time period of a specific type","operationId":"Feed_GetScheduledEvents","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"eventType","in":"query","required":true,"type":"string","enum":["Weekly","Monthly"]},{"name":"startDate","in":"query","required":true,"type":"string","format":"date-time"},{"name":"endDate","in":"query","required":true,"type":"string","format":"date-time"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.Feed.FeedItemModel[],Meniga.Core.Api.Models.Feed.FeedItemMetaModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/feed/types":{"get":{"tags":["Feed"],"summary":"Returns all available feed types","operationId":"Feed_GetFeedTypeNames","consumes":[],"produces":["application/json","text/json"],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.String[]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/lifegoals/{id}":{"get":{"tags":["LifeGoals"],"summary":"Get a life goal","operationId":"LifeGoals_GetLifeGoal","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the life goal","required":true,"type":"integer","format":"int64"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.LifeGoals.Api.Models.LifeGoalModel]"}},"400":{"description":"Validation error","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiClientError]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"put":{"tags":["LifeGoals"],"summary":"Update a life goal","operationId":"LifeGoals_UpdateLifeGoal","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the life goal","required":true,"type":"integer","format":"int64"},{"name":"request","in":"body","description":"An object containing information about the for the updated life goal","required":true,"schema":{"$ref":"#/definitions/Meniga.Component.LifeGoals.Api.Models.UpdateLifeGoalRequestModel"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.LifeGoals.Api.Models.LifeGoalModel]"}},"400":{"description":"Validation error","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiClientError]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"delete":{"tags":["LifeGoals"],"summary":"Delete a life goal","operationId":"LifeGoals_DeleteLifeGoal","consumes":[],"produces":[],"parameters":[{"name":"id","in":"path","description":"The id of the life goal","required":true,"type":"integer","format":"int64"}],"responses":{"204":{"description":"No Content"},"400":{"description":"Validation error","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiClientError]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/lifegoals/{id}/history":{"get":{"tags":["LifeGoals"],"summary":"Get a life goal's history","operationId":"LifeGoals_GetHistory","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the life goal","required":true,"type":"integer","format":"int64"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.LifeGoals.Api.Models.LifeGoalHistoryRecordModel[]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"404":{"description":"The requested life goal doesn´t exist"},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/lifegoals":{"get":{"tags":["LifeGoals"],"summary":"Get life goals","operationId":"LifeGoals_GetLifeGoals","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"lifeGoalIds","in":"query","description":"A comma-separated string containing the ids of life goals to be included. If empty then all life goals will be included.","required":false,"type":"string"},{"name":"excludeAchievedGoals","in":"query","description":"True if achieved goals should be exluded in the response","required":false,"type":"boolean"},{"name":"accountIds","in":"query","description":"A comma-separated string containing the ids of account Ids to filter by","required":false,"type":"string"},{"name":"skip","in":"query","description":"Number of records to skip","required":false,"type":"integer","format":"int32"},{"name":"take","in":"query","description":"Number of records to return;","required":false,"type":"integer","format":"int32"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IEnumerable[Meniga.Component.LifeGoals.Api.Models.LifeGoalModel]]"}},"400":{"description":"Validation error","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiClientError]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"post":{"tags":["LifeGoals"],"summary":"Create a new life goal","operationId":"LifeGoals_CreateLifeGoal","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"request","in":"body","description":"An object containing information about the new life goal","required":true,"schema":{"$ref":"#/definitions/Meniga.Component.LifeGoals.Api.Models.CreateLifeGoalRequestModel"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.LifeGoals.Api.Models.LifeGoalModel]"}},"400":{"description":"Validation error","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiClientError]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/lifegoals/accountInfo":{"get":{"tags":["LifeGoals"],"summary":"Get account info for given account ids.","operationId":"LifeGoals_GetAccounts","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"accountIds","in":"query","description":"Comma list of account ids","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.LifeGoals.Api.Models.LifeGoalAccountModel[],Meniga.Component.LifeGoals.Core.Models.LifeGoalAccountModelMeta]"}},"400":{"description":"Validation error","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/media/{id}":{"get":{"tags":["Media"],"summary":"Get media based on identifier and file ending","operationId":"Media_GetMedia","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"Id of the media item with the requsted file ending type. \r\nIf file ending type is missing then image’s default content type is used.","required":true,"type":"string"},{"name":"width","in":"query","description":"Requested width of the image.\r\nIf not provided, then image’s default width is used","required":false,"type":"integer","format":"int32"},{"name":"height","in":"query","description":"Requested height of the image\r\nIf not provided, then image’s default height is used","required":false,"type":"integer","format":"int32"}],"responses":{"200":{"description":"Get media","schema":{"format":"byte","type":"string"}},"404":{"description":"Media file not found"},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/merchants/{id}":{"get":{"tags":["Merchants"],"summary":"Get a merchant","operationId":"Merchants_GetById","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the merchant","required":true,"type":"integer","format":"int64"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.Merchant]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/merchants":{"get":{"tags":["Merchants"],"summary":"Get a list of merchants","operationId":"Merchants_GetByIds","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"merchantIds","in":"query","description":"A comma separate string of merchant Ids","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.List[Meniga.Core.Api.Models.Merchant]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/merchants/top":{"post":{"tags":["Merchants"],"summary":"Get the top merchants for the passed in filter\r\nCurrently the only supported measurement is NettoAmount (options.measurement : 0) so\r\nthe merchant with the highest net amount will be at the top of the result.","operationId":"Merchants_GetTopMerchants","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"request","in":"body","description":"Defines the filter to use when counting top merchants and the measurement which decides the order of the returned merchants","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.TopMerchantsRequest"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.TopMerchant[]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/networth":{"get":{"tags":["NetWorth"],"summary":"Get a list of net worth accounts with their balance histories","operationId":"NetWorth_GetNetWorthAccounts","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"skip","in":"query","description":"Number of accounts to skip","required":false,"type":"integer","format":"int32"},{"name":"take","in":"query","description":"Number of accounts to fetch. If null, returns all.","required":false,"type":"integer","format":"int32"},{"name":"startDate","in":"query","description":"The inclusive start date (yyyy-MM-dd)","required":true,"type":"string","format":"date-time"},{"name":"endDate","in":"query","description":"The inclusive end date (yyyy-MM-dd)","required":true,"type":"string","format":"date-time"},{"name":"useInterpolation","in":"query","description":"A flag indicating if the result should be projected so that the history list contains only one entry per month.\r\nIf entry doesn't exist for a given month we add one with default values","required":false,"type":"boolean"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Core.DataContract.AccountBalanceHistoryWrapper],Meniga.Runtime.WebApi.Models.Pagination.PaginationMetaModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/networth/intervalgrouping":{"get":{"tags":["NetWorth"],"summary":"Get a list of net worth accounts with their balance history entries grouped by the interval grouping enum where only the last entry matching the selected enum value is returned","operationId":"NetWorth_GetNetWorthAccountsIntervalGrouping","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"skip","in":"query","description":"Number of accounts to skip","required":false,"type":"integer","format":"int32"},{"name":"take","in":"query","description":"Number of accounts to fetch. If null, returns all.","required":false,"type":"integer","format":"int32"},{"name":"startDate","in":"query","description":"The inclusive start date (yyyy-MM-dd)","required":true,"type":"string","format":"date-time"},{"name":"endDate","in":"query","description":"The inclusive end date (yyyy-MM-dd)","required":true,"type":"string","format":"date-time"},{"name":"intervalGrouping","in":"query","description":"An interval enum indicating what balance history entries should be returned. Possible values are \"Daily\", \"Monthly\" and \"Yearly\".\r\nE.g. if \"Daily\" is chosen the last entry for each day for each account will be returned.","required":true,"type":"string","enum":["Daily","Monthly","Yearly"]}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Core.DataContract.AccountBalanceHistoryWrapper],Meniga.Runtime.WebApi.Models.Pagination.PaginationMetaModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/networth/first":{"get":{"tags":["NetWorth"],"summary":"Get the first account balance history entry","operationId":"NetWorth_GetFirstAccountBalanceHistoryEntry","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"excludeAccountsExcludedFromNetWorth","in":"query","description":"Flag indicating if accounts that are excluded from net worth should be excluded or not","required":true,"type":"boolean"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.NetWorth.Models.AccountBalanceHistoryEntryModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/networth/accounts":{"post":{"tags":["NetWorth"],"summary":"Create a manual net worth account","operationId":"NetWorth_CreateManualAccount","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"request","in":"body","description":"An object encapsulating the information for manual net worth account creation","required":true,"schema":{"$ref":"#/definitions/Meniga.Component.NetWorth.Models.CreateManualAccountRequestModel"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.DataContract.AccountBalanceHistoryWrapper]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/networth/accounts/{id}":{"get":{"tags":["NetWorth"],"summary":"Get a manual net worth account","operationId":"NetWorth_GetManualAccount","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The account id of the networth account","required":true,"type":"integer","format":"int64"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.DataContract.AccountBalanceHistoryWrapper]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"put":{"tags":["NetWorth"],"summary":"Update a manual net worth account","operationId":"NetWorth_UpdateManualAccount","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the account","required":true,"type":"integer","format":"int64"},{"name":"request","in":"body","description":"Object encapsulating the boolean value toggling the exclude-from-networth flag and the account name","required":true,"schema":{"$ref":"#/definitions/Meniga.Component.NetWorth.Models.UpdateManualAccountRequestModel"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.DataContract.AccountBalanceHistoryWrapper]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"delete":{"tags":["NetWorth"],"summary":"Delete a manual net worth account","operationId":"NetWorth_DeleteManualAccount","consumes":[],"produces":[],"parameters":[{"name":"id","in":"path","description":"The id of the account","required":true,"type":"integer","format":"int64"}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/networth/accounts/{id}/balancehistory":{"post":{"tags":["NetWorth"],"summary":"Create an account balance history entry of a manual net worth account","operationId":"NetWorth_CreateAccountBalanceHistoryEntry","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the account","required":true,"type":"integer","format":"int64"},{"name":"request","in":"body","description":"An object encapsulating the account balance history entry to create","required":true,"schema":{"$ref":"#/definitions/Meniga.Component.NetWorth.Models.CreateAccountBalanceHistoryEntryRequestModel"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.NetWorth.Models.AccountBalanceHistoryEntryModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/networth/accounts/{id}/balancehistory/{historyid}":{"put":{"tags":["NetWorth"],"summary":"Update an account balance history entry of a manual net worth account","operationId":"NetWorth_UpdateManualAccountBalanceHistoryEntry","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the account containing the account balance history entry","required":true,"type":"integer","format":"int64"},{"name":"historyid","in":"path","description":"The id of the account balance history entry","required":true,"type":"integer","format":"int64"},{"name":"request","in":"body","description":"An object encapsulating the account balance history changes","required":true,"schema":{"$ref":"#/definitions/Meniga.Component.NetWorth.Models.UpdateManualAccountBalanceHistoryEntryRequestModel"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.NetWorth.Models.AccountBalanceHistoryEntryModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"delete":{"tags":["NetWorth"],"summary":"Delete an account balance history entry of a manual net worth account","operationId":"NetWorth_DeleteAccountBalanceHistoryEntry","consumes":[],"produces":[],"parameters":[{"name":"id","in":"path","description":"The id of the account containing the account balance history entry","required":true,"type":"integer","format":"int64"},{"name":"historyid","in":"path","description":"The id of the account balance history entry","required":true,"type":"integer","format":"int64"}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/networth/types":{"get":{"tags":["NetWorth"],"summary":"Get all available net worth types","operationId":"NetWorth_GetNetWorthTypes","consumes":[],"produces":["application/json","text/json"],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.NetWorth.Core.NetWorthTypeEnum]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/organizations":{"get":{"tags":["Organizations"],"summary":"Get a list of organizations and their realms","operationId":"Organizations_Get","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"nameSearch","in":"query","description":"A case-insensitive search string in organization name. If empty, returns all.","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.OrganizationModel[]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/peercomparison":{"get":{"tags":["PeerComparison"],"summary":"Get peer comparison HTTP result.","operationId":"PeerComparison_GetPeerComparison","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"excludeUser","in":"query","description":"If true then the user's statistics are omitted.\r\nDefault value is false.","required":false,"type":"boolean"},{"name":"categoryIds","in":"query","description":"A comma separated list of category IDs that should be compared.","required":false,"type":"string"},{"name":"previousMonths","in":"query","description":"Number of previous months to be compared.\r\nSupported values are 1, 3, 6, and 12.","required":false,"type":"integer","format":"int32"},{"name":"groupCategories","in":"query","description":"If true then the result is aggregated over all given category IDs.\r\nOtherwise, the result is broken down by category.\r\nDefault value is false.","required":false,"type":"boolean"},{"name":"segmentBy","in":"query","description":"A comma separated list of user properties to be used for finding similar users in community.\r\nSupported values are \"age\", \"gender\", \"income\", \"postalcode\", \"numberofkids\", \"numberofcars\", and \"livingspace\".","required":false,"type":"string"}],"responses":{"200":{"description":"Peer comparison of a series of months and categories","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.ICollection[Meniga.Core.Api.Models.PeerComparison.PeerComparison]]"}},"400":{"description":"Validation error","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiClientError]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/peercomparison/topmerchants":{"get":{"tags":["PeerComparison"],"summary":"Get comparison of top merchants","operationId":"PeerComparison_GetTopMerchants","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"limit","in":"query","description":"Number of top merchants (per category)","required":false,"type":"integer","format":"int32"},{"name":"rankBy","in":"query","description":"Rank top merchants by amount or number of visits, see {Meniga.Core.Api.Models.PeerComparison.MerchantRanking}","required":false,"type":"string","enum":["Amount","Visits"]},{"name":"excludeUser","in":"query","description":"If true then the user's top merchants are omitted.\r\nDefault value is false.","required":false,"type":"boolean"},{"name":"categoryIds","in":"query","description":"A comma separated list of category IDs that should be compared.","required":false,"type":"string"},{"name":"previousMonths","in":"query","description":"Number of previous months to be compared.\r\nSupported values are 1, 3, 6, and 12.","required":false,"type":"integer","format":"int32"},{"name":"groupCategories","in":"query","description":"If true then the result is aggregated over all given category IDs.\r\nOtherwise, the result is broken down by category.\r\nDefault value is false.","required":false,"type":"boolean"},{"name":"segmentBy","in":"query","description":"A comma separated list of user properties to be used for finding similar users in community.\r\nSupported values are \"age\", \"gender\", \"income\", \"postalcode\", \"numberofkids\", \"numberofcars\", and \"livingspace\".","required":false,"type":"string"}],"responses":{"200":{"description":"Top merchant comparison of a series of months and categories","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.ICollection[Meniga.Core.Api.Models.PeerComparison.TopMerchantComparison]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/public/settings":{"get":{"tags":["Public"],"summary":"Get all public system settings","operationId":"Public_GetSettings","consumes":[],"produces":["application/json","text/json"],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.PublicSettings]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/public/postalcodes":{"get":{"tags":["Public"],"summary":"Get a list of postal codes","operationId":"Public_GetPostalCodes","consumes":[],"produces":["application/json","text/json"],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.PostalCodesModel[]]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/public/postalcodes/{code}":{"get":{"tags":["Public"],"summary":"Get a postal code","operationId":"Public_GetPostalCode","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"code","in":"path","description":"The postal code to filter by","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.PostalCodeModel]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/sync":{"get":{"tags":["Sync"],"summary":"Get current synchronization for a user","operationId":"Sync_GetSynchronizationStatus","consumes":[],"produces":["application/json","text/json"],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.SynchronizationStatusExtended]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"post":{"tags":["Sync"],"summary":"Start synchronization of transactions for a user","operationId":"Sync_StartSynchronization","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"request","in":"body","description":"The information about the number of milliseconds to wait before completing the task in the background","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.StartSynchronizationRequest"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.SynchronizationStatus]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/sync/{id}":{"get":{"tags":["Sync"],"summary":"Get a synchronization history status","operationId":"Sync_GetSynchronizationStatusById","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the synchronization session history","required":true,"type":"integer","format":"int64"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.SynchronizationStatus]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/sync/skip":{"put":{"tags":["Sync"],"summary":"Skip synchronization for a realm user","operationId":"Sync_SkipRealmSync","consumes":["application/json","text/json"],"produces":[],"parameters":[{"name":"request","in":"body","description":"Information about the realm user and the synchronization history","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.SkipRealmSyncRequest"}}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/sync/realm/{realmUserId}":{"post":{"tags":["Sync"],"summary":"Synchronize accounts with a particular financial data realm","operationId":"Sync_SynchronizeRealmUser","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"realmUserId","in":"path","description":"The Id of the realm credentials","required":true,"type":"integer","format":"int64"},{"name":"request","in":"body","description":"Request object for synchronizing financial data realm","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.SynchronizeFinancialDataRealmRequest"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.SynchronizationStatus]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/sync/realm/{realmId}/auth":{"post":{"tags":["Sync"],"summary":"Authenticate to a realm","operationId":"Sync_AuthenticateRealm","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"realmId","in":"path","description":"The id of the realm","required":true,"type":"integer","format":"int32"},{"name":"request","in":"body","description":"Request object for authenticate the realm","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.AuthenticateRealmRequest"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.AuthenticateRealmResponse]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/sync/accounts/{realmUserId}":{"get":{"tags":["Sync"],"summary":"Get a list of available accounts that can be synched for a realm user","operationId":"Sync_ListAccountsForRealmUser","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"realmUserId","in":"path","description":"The Id of the realm user","required":true,"type":"integer","format":"int32"},{"name":"sessionToken","in":"query","description":"An optional Session token provided as response from realm/{realmId}/auth and preserved on the client side. \r\n            If empty, the sessionToken will be presisted and loaded from the database","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.AggregationAccountInfo[]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/sync/accounts/{realmUserId}/authorize":{"post":{"tags":["Sync"],"summary":"Authorizes current user access to the passed in accounts","operationId":"Sync_AuthorizeAccounts","consumes":["application/json","text/json"],"produces":[],"parameters":[{"name":"realmUserId","in":"path","description":"","required":true,"type":"integer","format":"int32"},{"name":"accountInfos","in":"body","description":"","required":true,"schema":{"type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.AggregationAccountInfo"}}},{"name":"sessionToken","in":"query","description":"An optional Session token provided as response from realm/{realmId}/auth and preserved on the client side. \r\n                If empty, the sessionToken will be presisted and loaded from the database","required":false,"type":"string"}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/tags":{"get":{"tags":["Tags"],"summary":"Get all tags for a user","operationId":"Tags_Get","consumes":[],"produces":["application/json","text/json"],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.Tag[]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/tags/popular":{"get":{"tags":["Tags"],"summary":"Get tags order by popularity","operationId":"Tags_GetByPopularity","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"count","in":"query","description":"The number of tags to return. If null, returns all.","required":false,"type":"integer","format":"int32"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.Tag[]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/tags/{id}":{"get":{"tags":["Tags"],"summary":"Get a tag","operationId":"Tags_GetById","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the tag","required":true,"type":"integer","format":"int64"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.Tag]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/terms":{"get":{"tags":["Terms"],"summary":"Get active terms and conditions in the culture of the user","operationId":"Terms_GetTermsAndConditions","consumes":[],"produces":["application/json","text/json"],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Core.Api.Models.Terms.TermsAndConditions]]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/terms/types":{"get":{"tags":["Terms"],"summary":"Get all terms and conditions types of the system","operationId":"Terms_GetTermsAndConditionsTypes","consumes":[],"produces":["application/json","text/json"],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Core.Api.Models.Terms.TermsAndConditionsType]]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/terms/{typeId}":{"get":{"tags":["Terms"],"summary":"Gets user's active terms and conditions of a specified type","operationId":"Terms_GetTermsAndConditionsByType","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"typeId","in":"path","description":"The id of the terms and conditions type","required":true,"type":"integer","format":"int32"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.Terms.TermsAndConditions]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/terms/{typeId}/accept":{"post":{"tags":["Terms"],"summary":"Accept terms and conditions of a specified type","operationId":"Terms_AcceptTermsAndConditions","consumes":[],"produces":[],"parameters":[{"name":"typeId","in":"path","description":"The type id of the terms and conditions of which to accept","required":true,"type":"integer","format":"int32"}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/terms/{typeId}/decline":{"post":{"tags":["Terms"],"summary":"Decline terms and conditions of a specified type","operationId":"Terms_DeclineTermsAndConditions","consumes":[],"produces":[],"parameters":[{"name":"typeId","in":"path","description":"The type id of the terms and conditions of which to decline","required":true,"type":"integer","format":"int32"}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/transactions":{"get":{"tags":["Transactions"],"summary":"Get a list of transactions","operationId":"Transactions_GetTransactions","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"fields","in":"query","description":"A comma separated list of what fields should be returned, if null, returns all fields.","required":false,"type":"string"},{"name":"skip","in":"query","description":"How many transactions should be skipped","required":false,"type":"integer","format":"int32"},{"name":"take","in":"query","description":"How many transactions should be fetched. If null, returns 1000.","required":false,"type":"integer","format":"int32"},{"name":"include","in":"query","description":"Tells which related resources should be included in the response as 'included' data.\r\n            Supported resources are \"Account\" and \"Merchant\", e.g. \"Account,Merchant\" to get both resources included","required":false,"type":"string"},{"name":"includeDisabledAccounts","in":"query","description":"Whether or not to include transactions from disabled accounts in the result","required":false,"type":"boolean"},{"name":"sort","in":"query","description":"Decides the order of the returned transactions, defined by a comma separated list of the properties of the Transaction object.\r\nThe sort order for each sort field is ascending unless it is prefixed with a \"-\" in which case it is descending.\r\nIf this string is null or empty then 'OrderBy' is used.\r\n<para>\r\nThe supported Transaction fields are:\r\nAccountId, Accuracy, Amount, AmountInCurrency, Balance,BankId, CategoryChangedTime, CategoryId, Date, DueDate, HasUserClearedCategoryUncertainty, Id,\r\nIsFlagged,IsMerchant, IsOwnAccountTransfer, IsRead, IsSplitChild, IsUncleared, InsertTime, Mcc, MerchantId, ParentIdentifier, Text, Timestamp, CounterpartyAccountIdentifier,\r\nCurrency, HasUncertainCategorization, OriginalAmount, OriginalDate, OriginalText\r\n</para>","required":false,"type":"string"},{"name":"accountIds","in":"query","description":"A comma separate string of account Ids to filter by","required":false,"type":"string"},{"name":"accountIdentifiers","in":"query","description":"A comma separate string of account identifiers to filter by","required":false,"type":"string"},{"name":"counterpartyAccountIdentifiers","in":"query","description":"A comma separate string of counterparty account identifiers (who person is paying) to filter by","required":false,"type":"string"},{"name":"categoryIds","in":"query","description":"A comma separate string of category Ids to filter by","required":false,"type":"string"},{"name":"categoryTypes","in":"query","description":"A comma separate string of category types to filter by. An enum of the category type are defined in the \"GET /user/v1/categories/types\" endpoint.","required":false,"type":"string"},{"name":"onlyUnread","in":"query","description":"Whether or not to only get unread transactions","required":false,"type":"boolean"},{"name":"onlyFlagged","in":"query","description":"Whether or not to only get flagged transactions","required":false,"type":"boolean"},{"name":"onlyUncertain","in":"query","description":"Whether or not to only get transactions with uncertain categorization","required":false,"type":"boolean"},{"name":"onlyUncategorized","in":"query","description":"Whether or not to only get uncategorized transactions","required":false,"type":"boolean"},{"name":"uncertainOrFlagged","in":"query","description":"Whether or not to get uncertain categorization or flagged transactions","required":false,"type":"boolean"},{"name":"hideExcluded","in":"query","description":"Whether or not to hide transactions in a excluded category","required":false,"type":"boolean"},{"name":"insertedBefore","in":"query","description":"If set, will only return transactions that have insert time before the supplied value","required":false,"type":"string","format":"date-time"},{"name":"periodFrom","in":"query","description":"The inclusive sub-date to search from (YYYY-MM-DD)","required":false,"type":"string","format":"date-time"},{"name":"periodTo","in":"query","description":"The inclusive sub-date to search to (YYYY-MM-DD)","required":false,"type":"string","format":"date-time"},{"name":"originalPeriodFrom","in":"query","description":"The inclusive date to search from (YYYY-MM-DD)","required":false,"type":"string","format":"date-time"},{"name":"originalPeriodTo","in":"query","description":"The inclusive date to search to (YYYY-MM-DD)","required":false,"type":"string","format":"date-time"},{"name":"amountFrom","in":"query","description":"The amount to search from","required":false,"type":"number","format":"double"},{"name":"amountTo","in":"query","description":"The amount to search to","required":false,"type":"number","format":"double"},{"name":"searchText","in":"query","description":"A free-form text to filter by that searches through transaction description, merchant name, category name, currency, tags comments and transaction data","required":false,"type":"string"},{"name":"description","in":"query","description":"The transaction description to filter by. If it's null, it will be ignored. But it is possible to search for empty descriptions.","required":false,"type":"string"},{"name":"currency","in":"query","description":"The transaction currency to filter by. If it's null or empty, it will be ignored.","required":false,"type":"string"},{"name":"comment","in":"query","description":"The transaction comment to filter by. If it's null, it will be ignored. But it is possible to search for empty comments.","required":false,"type":"string"},{"name":"tags","in":"query","description":"A comma separate string of tags to filter by","required":false,"type":"string"},{"name":"orderBy","in":"query","description":"The order of the returned transactions.","required":false,"type":"string","enum":["ByDate","ByText","ByAmount","ByCategory","ByParsedData","ByOriginalDate"]},{"name":"parsedDataNameToOrderBy","in":"query","description":"The parsed data parameter to order by when OrderBy == {Meniga.Core.Api.Models.TransactionFilterOrderEnum.ByParsedData}.","required":false,"type":"string"},{"name":"ascendingOrder","in":"query","description":"Whether or not to order the returned transactions in an ascending order. The order is specified by {Meniga.Core.Api.Models.TransactionFilterModel.OrderBy}\r\nIf nothing is specified, then the list will be ordered by date.","required":false,"type":"boolean"},{"name":"useAbsoluteAmountSearch","in":"query","description":"Whether or not to use absolute amount search. \r\nIf true, AmountFrom = 500 and AmountTo = 1000 searches from -1000 to -500 as well as +500 to + 1000","required":false,"type":"boolean"},{"name":"useAndSearchForTags","in":"query","description":"Whether or not tags are searched with AND or OR.\r\nIf true, tags are searched with AND so the transactions returned will have to contain all the {Meniga.Core.Api.Models.TransactionFilterModel.Tags}.","required":false,"type":"boolean"},{"name":"useEqualsSearchForBankId","in":"query","description":"Whether or not BankId is searched with EQUALS or LIKE. If true, exact matches are found, otherwise matches that contain the search string for BankId.","required":false,"type":"boolean"},{"name":"useAmountInCurrencySearch","in":"query","description":"DEPRECATED: Use {Meniga.Core.Api.Models.TransactionFilterModel.UseAmountFields} instead\r\nWhether or not to search for amount in currency instead of amount","required":false,"type":"boolean"},{"name":"useExactDescription","in":"query","description":"If true, filters by exact (equals) description as opposed to contains (which is the default)","required":false,"type":"boolean"},{"name":"useExactMerchantTexts","in":"query","description":"If true, filters by exact (equals) merchant texts as opposed to contains (which is the default)","required":false,"type":"boolean"},{"name":"useAccentInsensitiveSearch","in":"query","description":"Whether the search performed is accent insensitive or not","required":false,"type":"boolean"},{"name":"merchantIds","in":"query","description":"A comma separate string of merchant Ids to filter by","required":false,"type":"string"},{"name":"excludeMerchantIds","in":"query","description":"A comma separate string of merchant Ids to exclude","required":false,"type":"string"},{"name":"merchantTexts","in":"query","description":"A comma separate string of merchant texts to filter by","required":false,"type":"string"},{"name":"parsedData","in":"query","description":"The transaction data to filter by. The data is filtered with union semantics (OR)\r\nexample: [{\"key\":\"reference\",\"value\":\"ref123\"},{\"key\":\"reference\",\"value\":\"ref124\"}]\r\nwill find transactions with \"ref123\" OR \"ref124\" transaction data.","required":false,"type":"string"},{"name":"useAndSearchForParsedData","in":"query","description":"If true, then all the fields passed as {Meniga.Core.Api.Models.TransactionFilterModel.ParsedData} will be AND-ed\r\ntogether. If the same key appears more than once then they will be OR-ed together\r\nand AND-ed with the other keys.\r\nIf false, they will be OR-ed together.\r\nExample:\r\nGiven ParsedData: <code>(Key=X,Value=x1),(Key=X,Value=x2),(Key=Y,Value=y1)</code>\r\nWhen true: <code>(X=x1 OR X=x2) AND Y=y1</code>\r\nWhen false: <code>X=x1 OR X=x2 OR Y=y1</code>","required":false,"type":"boolean"},{"name":"parsedDataExactKeys","in":"query","description":"List of keys in parsed data that should only return a match if the value is exactly the same as supplied in ParsedData","required":false,"type":"string"},{"name":"useParentMerchantIds","in":"query","description":"If set to true, parent and the parents children will be found for each merchant id \r\nprovided in {Meniga.Core.Api.Models.TransactionFilterModel.MerchantIds} and in {Meniga.Core.Api.Models.TransactionFilterModel.ExcludeMerchantIds} and they \r\nincluded in the filter. If the merchant has no parent then its children, if any, are added","required":false,"type":"boolean"},{"name":"excludeMerchantTexts","in":"query","description":"A comma separate string of merchant texts to exclude","required":false,"type":"string"},{"name":"bankIds","in":"query","description":"A comma separate string of bank Ids to filter by","required":false,"type":"string"},{"name":"ids","in":"query","description":"A comma separate string of transaction Ids to filter by","required":false,"type":"string"},{"name":"useAmountFields","in":"query","description":"This is a comma separated string of transactionAmountField values\r\nthat specifies which amount fields to use when searching using amountFrom\r\nand amountTo. If useAmountInCurrencySearch = true then only\r\ntransactionAmountField.amountInCurrency is used. If useAmountInCurrencySearch = false\r\nthen this list is used. If the list is empty then transactionAmountField.amount is used.\r\nValid values are \"amount\" (0), \"originalAmount\" (1), \"amountInCurrency\" (2), and \"bookedAmount\" (3)","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiCompoundDocument[Meniga.Core.Api.Models.TransactionModel[],Meniga.Core.Api.Models.TransactionModelsMetadata,Meniga.Core.Api.Models.TransactionModelsIncludedResources]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"put":{"tags":["Transactions"],"summary":"Update a list of transactions","operationId":"Transactions_UpdateTransactions","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"transactionIds","in":"query","description":"A comma separate string of transaction Ids","required":true,"type":"string"},{"name":"updateRequest","in":"body","description":"A model containing transaction data to update","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionUpdateModel"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.TransactionModel[]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"post":{"tags":["Transactions"],"summary":"Create a transaction","operationId":"Transactions_Create","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"postModel","in":"body","description":"A transaction post model containing all required data","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionPostModel"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.TransactionModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"delete":{"tags":["Transactions"],"summary":"Delete a list of transactions","operationId":"Transactions_DeleteTransactions","consumes":[],"produces":[],"parameters":[{"name":"transactionIds","in":"query","description":"A list of transaction Ids","required":true,"type":"string"}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/transactions/series":{"post":{"tags":["Transactions"],"summary":"Get a series of transactions aggregated over time","operationId":"Transactions_GetTransactionSeries","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"request","in":"body","description":"A model to filter the response","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionSeriesRequest"}},{"name":"include","in":"query","description":"Tells which related resources should be included in the response as 'included' data.\r\n            Supported resources are \"Account\" and \"Merchant\", e.g. \"Account,Merchant\" to get both resources included","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiCompoundDocument[Meniga.Core.Api.Models.TransactionSeries[],Meniga.Core.Api.Models.TransactionSeriesIncludedResources]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/transactions/suggestions":{"get":{"tags":["Transactions"],"summary":"Search for categories, tags, comments, descriptions, currencies and merchants that match the search text","operationId":"Transactions_GetSuggestions","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"text","in":"query","description":"The text to search for","required":true,"type":"string"},{"name":"suggestionTypes","in":"query","description":"A comma separate string of search suggestion types (Category, Merchant, Tag, Comment, Currency, Description, ParsedDataField) that should be included in the result. If null, no filtering is done.","required":false,"type":"string"},{"name":"onlyShowResultsWithTransactions","in":"query","description":"If true, the results will only include categories, tags and merchants that have transactions. Descriptions, Currencies and comments can only be returned from existing transactions.","required":false,"type":"boolean"},{"name":"take","in":"query","description":"The max number of results per type to return. If null, all results are returned.","required":false,"type":"integer","format":"int32"},{"name":"sort","in":"query","description":"Decides the order of the returned transactions, defined by a comma separated list of the properties of the Transaction object.\r\nThe sort order for each sort field is ascending unless it is prefixed with a \"-\" in which case it is descending.\r\nIf this string is null or empty then 'OrderBy' is used.\r\n<para>\r\nThe supported Transaction fields are:\r\nAccountId, Accuracy, Amount, AmountInCurrency, Balance,BankId, CategoryChangedTime, CategoryId, Date, DueDate, HasUserClearedCategoryUncertainty, Id,\r\nIsFlagged,IsMerchant, IsOwnAccountTransfer, IsRead, IsSplitChild, IsUncleared, InsertTime, Mcc, MerchantId, ParentIdentifier, Text, Timestamp, CounterpartyAccountIdentifier,\r\nCurrency, HasUncertainCategorization, OriginalAmount, OriginalDate, OriginalText\r\n</para>","required":false,"type":"string"},{"name":"accountIds","in":"query","description":"A comma separate string of account Ids to filter by","required":false,"type":"string"},{"name":"accountIdentifiers","in":"query","description":"A comma separate string of account identifiers to filter by","required":false,"type":"string"},{"name":"counterpartyAccountIdentifiers","in":"query","description":"A comma separate string of counterparty account identifiers (who person is paying) to filter by","required":false,"type":"string"},{"name":"categoryIds","in":"query","description":"A comma separate string of category Ids to filter by","required":false,"type":"string"},{"name":"categoryTypes","in":"query","description":"A comma separate string of category types to filter by. An enum of the category type are defined in the \"GET /user/v1/categories/types\" endpoint.","required":false,"type":"string"},{"name":"onlyUnread","in":"query","description":"Whether or not to only get unread transactions","required":false,"type":"boolean"},{"name":"onlyFlagged","in":"query","description":"Whether or not to only get flagged transactions","required":false,"type":"boolean"},{"name":"onlyUncertain","in":"query","description":"Whether or not to only get transactions with uncertain categorization","required":false,"type":"boolean"},{"name":"onlyUncategorized","in":"query","description":"Whether or not to only get uncategorized transactions","required":false,"type":"boolean"},{"name":"uncertainOrFlagged","in":"query","description":"Whether or not to get uncertain categorization or flagged transactions","required":false,"type":"boolean"},{"name":"hideExcluded","in":"query","description":"Whether or not to hide transactions in a excluded category","required":false,"type":"boolean"},{"name":"insertedBefore","in":"query","description":"If set, will only return transactions that have insert time before the supplied value","required":false,"type":"string","format":"date-time"},{"name":"periodFrom","in":"query","description":"The inclusive sub-date to search from (YYYY-MM-DD)","required":false,"type":"string","format":"date-time"},{"name":"periodTo","in":"query","description":"The inclusive sub-date to search to (YYYY-MM-DD)","required":false,"type":"string","format":"date-time"},{"name":"originalPeriodFrom","in":"query","description":"The inclusive date to search from (YYYY-MM-DD)","required":false,"type":"string","format":"date-time"},{"name":"originalPeriodTo","in":"query","description":"The inclusive date to search to (YYYY-MM-DD)","required":false,"type":"string","format":"date-time"},{"name":"amountFrom","in":"query","description":"The amount to search from","required":false,"type":"number","format":"double"},{"name":"amountTo","in":"query","description":"The amount to search to","required":false,"type":"number","format":"double"},{"name":"searchText","in":"query","description":"A free-form text to filter by that searches through transaction description, merchant name, category name, currency, tags comments and transaction data","required":false,"type":"string"},{"name":"description","in":"query","description":"The transaction description to filter by. If it's null, it will be ignored. But it is possible to search for empty descriptions.","required":false,"type":"string"},{"name":"currency","in":"query","description":"The transaction currency to filter by. If it's null or empty, it will be ignored.","required":false,"type":"string"},{"name":"comment","in":"query","description":"The transaction comment to filter by. If it's null, it will be ignored. But it is possible to search for empty comments.","required":false,"type":"string"},{"name":"tags","in":"query","description":"A comma separate string of tags to filter by","required":false,"type":"string"},{"name":"orderBy","in":"query","description":"The order of the returned transactions.","required":false,"type":"string","enum":["ByDate","ByText","ByAmount","ByCategory","ByParsedData","ByOriginalDate"]},{"name":"parsedDataNameToOrderBy","in":"query","description":"The parsed data parameter to order by when OrderBy == {Meniga.Core.Api.Models.TransactionFilterOrderEnum.ByParsedData}.","required":false,"type":"string"},{"name":"ascendingOrder","in":"query","description":"Whether or not to order the returned transactions in an ascending order. The order is specified by {Meniga.Core.Api.Models.TransactionFilterModel.OrderBy}\r\nIf nothing is specified, then the list will be ordered by date.","required":false,"type":"boolean"},{"name":"useAbsoluteAmountSearch","in":"query","description":"Whether or not to use absolute amount search. \r\nIf true, AmountFrom = 500 and AmountTo = 1000 searches from -1000 to -500 as well as +500 to + 1000","required":false,"type":"boolean"},{"name":"useAndSearchForTags","in":"query","description":"Whether or not tags are searched with AND or OR.\r\nIf true, tags are searched with AND so the transactions returned will have to contain all the {Meniga.Core.Api.Models.TransactionFilterModel.Tags}.","required":false,"type":"boolean"},{"name":"useEqualsSearchForBankId","in":"query","description":"Whether or not BankId is searched with EQUALS or LIKE. If true, exact matches are found, otherwise matches that contain the search string for BankId.","required":false,"type":"boolean"},{"name":"useAmountInCurrencySearch","in":"query","description":"DEPRECATED: Use {Meniga.Core.Api.Models.TransactionFilterModel.UseAmountFields} instead\r\nWhether or not to search for amount in currency instead of amount","required":false,"type":"boolean"},{"name":"useExactDescription","in":"query","description":"If true, filters by exact (equals) description as opposed to contains (which is the default)","required":false,"type":"boolean"},{"name":"useExactMerchantTexts","in":"query","description":"If true, filters by exact (equals) merchant texts as opposed to contains (which is the default)","required":false,"type":"boolean"},{"name":"useAccentInsensitiveSearch","in":"query","description":"Whether the search performed is accent insensitive or not","required":false,"type":"boolean"},{"name":"merchantIds","in":"query","description":"A comma separate string of merchant Ids to filter by","required":false,"type":"string"},{"name":"excludeMerchantIds","in":"query","description":"A comma separate string of merchant Ids to exclude","required":false,"type":"string"},{"name":"merchantTexts","in":"query","description":"A comma separate string of merchant texts to filter by","required":false,"type":"string"},{"name":"parsedData","in":"query","description":"The transaction data to filter by. The data is filtered with union semantics (OR)\r\nexample: [{\"key\":\"reference\",\"value\":\"ref123\"},{\"key\":\"reference\",\"value\":\"ref124\"}]\r\nwill find transactions with \"ref123\" OR \"ref124\" transaction data.","required":false,"type":"string"},{"name":"useAndSearchForParsedData","in":"query","description":"If true, then all the fields passed as {Meniga.Core.Api.Models.TransactionFilterModel.ParsedData} will be AND-ed\r\ntogether. If the same key appears more than once then they will be OR-ed together\r\nand AND-ed with the other keys.\r\nIf false, they will be OR-ed together.\r\nExample:\r\nGiven ParsedData: <code>(Key=X,Value=x1),(Key=X,Value=x2),(Key=Y,Value=y1)</code>\r\nWhen true: <code>(X=x1 OR X=x2) AND Y=y1</code>\r\nWhen false: <code>X=x1 OR X=x2 OR Y=y1</code>","required":false,"type":"boolean"},{"name":"parsedDataExactKeys","in":"query","description":"List of keys in parsed data that should only return a match if the value is exactly the same as supplied in ParsedData","required":false,"type":"string"},{"name":"useParentMerchantIds","in":"query","description":"If set to true, parent and the parents children will be found for each merchant id \r\nprovided in {Meniga.Core.Api.Models.TransactionFilterModel.MerchantIds} and in {Meniga.Core.Api.Models.TransactionFilterModel.ExcludeMerchantIds} and they \r\nincluded in the filter. If the merchant has no parent then its children, if any, are added","required":false,"type":"boolean"},{"name":"excludeMerchantTexts","in":"query","description":"A comma separate string of merchant texts to exclude","required":false,"type":"string"},{"name":"bankIds","in":"query","description":"A comma separate string of bank Ids to filter by","required":false,"type":"string"},{"name":"ids","in":"query","description":"A comma separate string of transaction Ids to filter by","required":false,"type":"string"},{"name":"useAmountFields","in":"query","description":"This is a comma separated string of transactionAmountField values\r\nthat specifies which amount fields to use when searching using amountFrom\r\nand amountTo. If useAmountInCurrencySearch = true then only\r\ntransactionAmountField.amountInCurrency is used. If useAmountInCurrencySearch = false\r\nthen this list is used. If the list is empty then transactionAmountField.amount is used.\r\nValid values are \"amount\" (0), \"originalAmount\" (1), \"amountInCurrency\" (2), and \"bookedAmount\" (3)","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.SearchSuggestion[]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/transactions/{id}":{"get":{"tags":["Transactions"],"summary":"Get a transaction","operationId":"Transactions_GetTransaction","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the transaction","required":true,"type":"integer","format":"int64"},{"name":"include","in":"query","description":"Tells which related resources should be included in the response as 'included' data.\r\n            Supported resources are \"Account\" and \"Merchant\", e.g. \"Account,Merchant\" to get both resources included","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiCompoundDocument[Meniga.Core.Api.Models.TransactionModel,Meniga.Core.Api.Models.TransactionModelIncludedResources]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"put":{"tags":["Transactions"],"summary":"Update a transaction","operationId":"Transactions_UpdateTransaction","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the transaction","required":true,"type":"integer","format":"int64"},{"name":"updateRequest","in":"body","description":"A model containing transaction data to update","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionUpdateModel"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.TransactionModel,Meniga.Core.Api.Models.TransactionModel[]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"delete":{"tags":["Transactions"],"summary":"Delete a transaction","operationId":"Transactions_Delete","consumes":[],"produces":[],"parameters":[{"name":"id","in":"path","description":"The Id of the transaction","required":true,"type":"integer","format":"int64"}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/transactions/{id}/split":{"get":{"tags":["Transactions"],"summary":"Get a list of transactions that have been split from the same original transaction","operationId":"Transactions_GetSplitTransactions","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the transaction","required":true,"type":"integer","format":"int64"},{"name":"include","in":"query","description":"Tells which related resources should be included in the response as 'included' data.\r\n            Supported resources are \"Account\" and \"Merchant\", e.g. \"Account,Merchant\" to get both resources included","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiCompoundDocument[Meniga.Core.Api.Models.TransactionModel[],Meniga.Core.Api.Models.TransactionModelIncludedResources]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"put":{"tags":["Transactions"],"summary":"Update split transactions for a particular parent transaction by deleting current split child transactions and creating new splits","operationId":"Transactions_UpdateSplitTransactions","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the parent transaction","required":true,"type":"integer","format":"int64"},{"name":"splitRequests","in":"body","description":"A list of splits to create","required":true,"schema":{"type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionSplitRequestModel"}}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.TransactionModel[]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"post":{"tags":["Transactions"],"summary":"Split a transaction into two transactions","operationId":"Transactions_SplitTransaction","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the transaction","required":true,"type":"integer","format":"int64"},{"name":"requestModel","in":"body","description":"Model containing split transaction data","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionSplitRequestModel"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.TransactionModel[]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/transactions/{id}/comments":{"post":{"tags":["Transactions"],"summary":"Create a comment for a transaction. If the comment contains any tags \r\n(words starting with '#') they are automatically created and associated with this transaction if they do not already exist.","operationId":"Transactions_CreateCommentForTransaction","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the transaction","required":true,"type":"integer","format":"int64"},{"name":"comment","in":"body","description":"The comment text","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.CommentWrapperRequest"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.TransactionCommentModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/transactions/{id}/comments/{commentId}":{"put":{"tags":["Transactions"],"summary":"Update a comment for a transaction. If the comment contains any tags \r\n(words starting with '#') they are automatically created and associated with this transaction if they do not already exist.","operationId":"Transactions_UpdateTransactionComment","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the transaction","required":true,"type":"integer","format":"int64"},{"name":"commentId","in":"path","description":"The Id of the comment","required":true,"type":"integer","format":"int64"},{"name":"comment","in":"body","description":"The updated comment text","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.CommentWrapperRequest"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.TransactionCommentModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"delete":{"tags":["Transactions"],"summary":"Delete a comment for a transaction. If the comment contains any tags \r\n(words starting with '#') they are automatically disassociated with this transaction.","operationId":"Transactions_DeleteTransactionComment","consumes":[],"produces":[],"parameters":[{"name":"id","in":"path","description":"The Id of the transaction","required":true,"type":"integer","format":"int64"},{"name":"commentId","in":"path","description":"The Id of the comment","required":true,"type":"integer","format":"int64"}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/transactions/comments":{"post":{"tags":["Transactions"],"summary":"Create a comment for a list of transaction ids. If the comment contains any tags \r\n(words starting with '#') they are automatically created and associated with these transaction if they do not already exist.","operationId":"Transactions_CreateCommentForTransactions","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"comment","in":"body","description":"The comment to create and transaction ids the comment applies to","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionsCommentWrapperRequest"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.TransactionCommentModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/transactions/recategorize":{"post":{"tags":["Transactions"],"summary":"Recategorize transactions by a list of transaction texts","operationId":"Transactions_UpdateTransactionCategories","consumes":["application/json","text/json"],"produces":[],"parameters":[{"name":"request","in":"body","description":"A model containing data for recategorization","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionRecategorizeRequest"}}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/transactions/rules":{"get":{"tags":["Transactions"],"summary":"Get all transaction rules for the user","operationId":"Transactions_GetTransactionRules","consumes":[],"produces":["application/json","text/json"],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.TransactionRule[]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"post":{"tags":["Transactions"],"summary":"Create a transaction rule","operationId":"Transactions_CreateTransactionRule","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"applyOnExisting","in":"query","description":"True if the new rule should be applied to existing transactions, otherwise false","required":true,"type":"boolean"},{"name":"rule","in":"body","description":"The rule to create","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionRuleCreateUpdateModel"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.TransactionRule]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/transactions/rules/{id}":{"get":{"tags":["Transactions"],"summary":"Get a transaction rule","operationId":"Transactions_GetTransactionRuleById","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the transaction rule","required":true,"type":"integer","format":"int32"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.TransactionRule]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"put":{"tags":["Transactions"],"summary":"Update a transaction rule","operationId":"Transactions_UpdateTransactionRule","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the transaction rule","required":true,"type":"integer","format":"int32"},{"name":"applyOnExisting","in":"query","description":"True if this updated rule should be applied to existing transactions, otherwise false","required":true,"type":"boolean"},{"name":"rule","in":"body","description":"The rule to update","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionRuleCreateUpdateModel"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.TransactionRule]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"delete":{"tags":["Transactions"],"summary":"Delete a transaction rule","operationId":"Transactions_DeleteTransactionRule","consumes":[],"produces":[],"parameters":[{"name":"id","in":"path","description":"The Id of the transaction rule","required":true,"type":"integer","format":"int32"}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/translations":{"get":{"tags":["Translations"],"summary":"Gets resources by culture","operationId":"Translations_Get","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"context","in":"query","description":"The resource context","required":false,"type":"string"},{"name":"culture","in":"query","description":"WARNING: This has been deprecated. Please use Accept-Language HTTP header instead.\r\nThe resource culture","required":false,"type":"string"}],"responses":{"200":{"description":"Get resources by culture","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Runtime.Api.Models.KeyValue[]]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/translations/context":{"get":{"tags":["Translations"],"summary":"Gets a resource translation given a key, context and culture","operationId":"Translations_GetByKey","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"key","in":"query","description":"The resource key","required":false,"type":"string"},{"name":"context","in":"query","description":"The resource context","required":false,"type":"string"},{"name":"culture","in":"query","description":"WARNING: This has been deprecated. Please use Accept-Language HTTP header instead.\r\nThe resource culture","required":false,"type":"string"}],"responses":{"200":{"description":"Resource translation","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Runtime.Api.Models.KeyValue[]]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/translations/languages":{"get":{"tags":["Translations"],"summary":"Gets a list languages that are available in the system","operationId":"Translations_GetLanguages","consumes":[],"produces":["application/json","text/json"],"responses":{"200":{"description":"Available languages","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Runtime.Api.Models.CultureLanguage[]]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/upcoming":{"get":{"tags":["Upcoming"],"summary":"Get a list of upcoming transactions","operationId":"Upcoming_GetUpcomings","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"skip","in":"query","description":"The number of upcomings bypassed","required":false,"type":"integer","format":"int32"},{"name":"take","in":"query","description":"The maximum number of upcomings returned. Null returns 1000 by default.","required":false,"type":"integer","format":"int32"},{"name":"dateFrom","in":"query","description":"The inclusive start date of the entries to be fetched","required":true,"type":"string","format":"date-time"},{"name":"dateTo","in":"query","description":"The inclusive end date of the entries to be fetched","required":true,"type":"string","format":"date-time"},{"name":"accountIds","in":"query","description":"A comma separate string of account Ids to filter by. If empty, includes all accounts.","required":false,"type":"string"},{"name":"includeDetails","in":"query","description":"A flag indicating if details should be fetched and assigned to the Details property in the response or not","required":false,"type":"boolean"},{"name":"watchedOnly","in":"query","description":"A flag indicating if only watched upcoming transactions should be fetched or not","required":false,"type":"boolean"},{"name":"recurringPatternId","in":"query","description":"Include only the upcoming transactions with this recurring pattern Id","required":false,"type":"integer","format":"int64"},{"name":"paymentStatus","in":"query","description":"Optional filter for PaymentStatus, can be one, or a combination of the following values: \"Open\", \"Paid\" or \"OnHold\" separated by a comma.","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Upcoming.Api.Models.UpcomingModel[],Meniga.Runtime.WebApi.Models.Pagination.PaginationMetaModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"post":{"tags":["Upcoming"],"summary":"Create an upcoming transaction","operationId":"Upcoming_CreateUpcoming","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"request","in":"body","description":"The upcoming transaction data","required":true,"schema":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.CreateUpcomingRequestModel"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Upcoming.Api.Models.UpcomingModel]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/upcoming/{id}":{"get":{"tags":["Upcoming"],"summary":"Get an upcoming transaction","operationId":"Upcoming_GetUpcoming","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the upcoming transaction","required":true,"type":"integer","format":"int64"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Upcoming.Api.Models.UpcomingModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"put":{"tags":["Upcoming"],"summary":"Update an upcoming transaction","operationId":"Upcoming_UpdateUpcoming","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the upcoming transaction","required":true,"type":"integer","format":"int64"},{"name":"request","in":"body","description":"The data for the updated upcoming transaction","required":true,"schema":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.UpdateUpcomingRequestModel"}},{"name":"recurringPatternId","in":"query","description":"The Id of the recurring pattern","required":false,"type":"integer","format":"int64"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Upcoming.Api.Models.UpcomingModel]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"delete":{"tags":["Upcoming"],"summary":"Delete an upcoming transaction","operationId":"Upcoming_DeleteUpcoming","consumes":[],"produces":[],"parameters":[{"name":"id","in":"path","description":"The Id of the upcoming transaction","required":true,"type":"integer","format":"int64"}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/upcoming/recurring/{id}":{"get":{"tags":["Upcoming"],"summary":"Get a recurring pattern","operationId":"Upcoming_GetRecurringById","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the recurring pattern","required":true,"type":"integer","format":"int64"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Upcoming.Api.Models.RecurringPatternModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"delete":{"tags":["Upcoming"],"summary":"Delete a recurring pattern","operationId":"Upcoming_DeleteRecurring","consumes":[],"produces":[],"parameters":[{"name":"id","in":"path","description":"The Id of the recurring pattern","required":true,"type":"integer","format":"int64"}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/upcoming/recurring":{"get":{"tags":["Upcoming"],"summary":"Get a list of recurring patterns","operationId":"Upcoming_GetRecurrings","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"skip","in":"query","description":"The number of recurrings bypassed","required":false,"type":"integer","format":"int32"},{"name":"take","in":"query","description":"The maximum number of recurring patterns returned. Null returns 1000 by default.","required":false,"type":"integer","format":"int32"},{"name":"statuses","in":"query","description":"A comma separate string of recurring statuses (Unknown, Suggested, Accepted, Rejected). If empty, includes all.","required":false,"type":"string"},{"name":"types","in":"query","description":"A comma separate string of recurring types (Unknown, Detected, Manual). If empty, includes all.","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Upcoming.Api.Models.RecurringPatternModel],Meniga.Runtime.WebApi.Models.Pagination.PaginationMetaModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/upcoming/{id}/comments":{"post":{"tags":["Upcoming"],"summary":"Create a comment for a given upcoming transaction","operationId":"Upcoming_CreateComment","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The Id of the upcoming transaction","required":true,"type":"integer","format":"int64"},{"name":"comment","in":"query","description":"The comment to be added to the upcoming transaction","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Upcoming.Api.Models.CommentModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/upcoming/balances":{"get":{"tags":["Upcoming"],"summary":"Get predicted upcomings from today in a list of dates with balance","operationId":"Upcoming_GetBalances","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"dateTo","in":"query","description":"The inclusive end date of the entries to be fetched","required":true,"type":"string","format":"date-time"},{"name":"includeOverdueFromDate","in":"query","description":"When set the open upcoming transactions from this date (inclusive) are projected to today's balance","required":false,"type":"string","format":"date-time"},{"name":"accountIds","in":"query","description":"A comma separate string of account Ids to filter by. If empty, the included accounts listed in the \"GET /user/v1/upcoming/accounts/included\" endpoint will be used.","required":false,"type":"string"},{"name":"includeUnlinked","in":"query","description":"Indicate if upcomings that are not linked to any account should be included","required":false,"type":"boolean"},{"name":"useAvailableAmount","in":"query","description":"Indicate if the amount of accounts should be the available amount or the real amount (not taking the limit into consideration)","required":false,"type":"boolean"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Upcoming.Api.Models.BalanceModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/upcoming/thresholdsets":{"get":{"tags":["Upcoming"],"summary":"Get threshold sets","operationId":"Upcoming_GetThresholdSets","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"accountIds","in":"query","description":"A comma separate string of account ids to filter by. If empty, returns all.","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Upcoming.Api.Models.ThresholdSetModel]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"post":{"tags":["Upcoming"],"summary":"Create a threshold set","operationId":"Upcoming_CreateThresholdSet","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"request","in":"body","description":"The threshold set data to store","required":true,"schema":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.ThresholdSetRequestModel"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Upcoming.Api.Models.ThresholdSetModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/upcoming/thresholdsets/{id}":{"put":{"tags":["Upcoming"],"summary":"Update a threshold set","operationId":"Upcoming_UpdateThresholdSet","consumes":["application/json","text/json"],"produces":[],"parameters":[{"name":"id","in":"path","description":"The id of the threshold set","required":true,"type":"integer","format":"int64"},{"name":"request","in":"body","description":"The threshold set data to store","required":true,"schema":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.ThresholdSetRequestModel"}}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"delete":{"tags":["Upcoming"],"summary":"Delete a threshold set","operationId":"Upcoming_DeleteThresholdSet","consumes":[],"produces":[],"parameters":[{"name":"id","in":"path","description":"The id of the threshold set","required":true,"type":"integer","format":"int64"}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/upcoming/accounts/default":{"get":{"tags":["Upcoming"],"summary":"Get the default upcoming account id that will be associated with upcomings that do not have account information suggestion","operationId":"Upcoming_GetDefaultAccount","consumes":[],"produces":["application/json","text/json"],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Upcoming.Api.Models.AccountIdWrapperModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"delete":{"tags":["Upcoming"],"summary":"Delete the default upcoming account connection so upcomings without account information suggestion will not be associated with any account","operationId":"Upcoming_DeleteDefaultAccount","consumes":[],"produces":[],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/upcoming/accounts/default/{id}":{"post":{"tags":["Upcoming"],"summary":"Create or update the default upcoming account that will be associated with upcomings that do not have account information suggestion","operationId":"Upcoming_CreateOrUpdateDefaultAccount","consumes":[],"produces":[],"parameters":[{"name":"id","in":"path","description":"The Id of the account to set as default upcoming account","required":true,"type":"integer","format":"int64"}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/upcoming/accounts/included":{"get":{"tags":["Upcoming"],"summary":"Get accounts that are included in the cash flow predicted accounts' balances used when calling the \"GET /user/v1/upcoming/balances\"","operationId":"Upcoming_GetIncludedAccounts","consumes":[],"produces":["application/json","text/json"],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.List[Meniga.Upcoming.Api.Models.AccountIdsWrapperModel]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"put":{"tags":["Upcoming"],"summary":"Create (or overwrite) the accounts to be included in the predicted accounts' balances used when calling the \"GET /user/v1/upcoming/balances\"","operationId":"Upcoming_CreateCashFlowPredictionAccounts","consumes":[],"produces":[],"parameters":[{"name":"accountids","in":"query","description":"A comma separate string of account Ids to be used in the prediction of accounts' balances","required":true,"type":"string"}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/userevents":{"get":{"tags":["UserEvents"],"summary":"Gets a list of user events based on the filter","operationId":"UserEvents_GetUserEvents","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"dateFrom","in":"query","description":"The inclusive from date (YYYY-MM-DD)","required":false,"type":"string","format":"date-time"},{"name":"dateTo","in":"query","description":"The inclusive to date (YYYY-MM-DD)","required":false,"type":"string","format":"date-time"},{"name":"topicName","in":"query","description":"Filter user events by topic name","required":false,"type":"string"},{"name":"typeIdentifiers","in":"query","description":"Filter user events by type identifiers. Either a single value or a comma separated list.","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Core.Api.Models.UserEvents.UserEventsModel]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/userevents/{id}":{"get":{"tags":["UserEvents"],"summary":"Get a user event by id.","operationId":"UserEvents_GetUserEvent","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"id","in":"path","description":"The id of the user event to fetch","required":true,"type":"integer","format":"int64"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.UserEvents.Core.Models.UserEventModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/userevents/subscription":{"put":{"tags":["UserEvents"],"summary":"Update user event type subscriptions","operationId":"UserEvents_Subscribe","consumes":["application/json","text/json"],"produces":[],"parameters":[{"name":"request","in":"body","description":"Object encapsulating the subscription details","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.UserEvents.SubscriptionRequest"}}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/userevents/subscription/details":{"get":{"tags":["UserEvents"],"summary":"Get user event subscription settings","operationId":"UserEvents_GetUserEventSubscriptionDetails","consumes":[],"produces":["application/json","text/json"],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Core.Api.Models.UserEvents.UserEventTypeSubscriptionModel]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"put":{"tags":["UserEvents"],"summary":"Update subscription settings","operationId":"UserEvents_UpdateSubscriptionSettings","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"request","in":"body","description":"The object encapsulating the subscription settings","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.UserEvents.UpdateSubscriptionSettingsRequest"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Core.Api.Models.UserEvents.UserEventTypeSubscriptionModel]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/userevents/eventtypes":{"get":{"tags":["UserEvents"],"summary":"Returns all available user event type identifiers","operationId":"UserEvents_GetEventTypeNames","consumes":[],"produces":["application/json","text/json"],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.String[]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/me":{"get":{"tags":["Users"],"summary":"Get properties of persons that are connected to the given person","operationId":"Users_GetConnectedPersons","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"includeAll","in":"query","description":"True if the current person that is logged in should be included, otherwise false","required":true,"type":"boolean"},{"name":"skip","in":"query","description":"The number of entries bypassed","required":false,"type":"integer","format":"int32"},{"name":"take","in":"query","description":"The maximum number of entries to return. If null, returns all.","required":false,"type":"integer","format":"int32"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.PersonInfo[],Meniga.Runtime.WebApi.Models.Pagination.PaginationMetaModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"put":{"tags":["Users"],"summary":"Update the given person","operationId":"Users_UpdatePerson","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"updatePersonRequest","in":"body","description":"The first name and last name to update","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.UpdatePersonRequest"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.PersonInfo]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"delete":{"tags":["Users"],"summary":"Delete the given person and remove transactions and accounts (belonging to the person, not the household), realm user information, alerts etc.","operationId":"Users_DeletePerson","consumes":[],"produces":[],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/me/register":{"post":{"tags":["Users"],"summary":"Registers a new user if allowed. After registering a user, auth endpoint should be called using the same email/password in order to get an authentication token.\r\nAfter first authentication, the logical next step is to accept terms and conditions with the terms endpoint.","operationId":"Users_Register","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"registerUserRequest","in":"body","description":"Email, password and culture of the user","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.User.RegisterUserRequest"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.PersonInfo]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/me/email":{"put":{"tags":["Users"],"summary":"Updates the email adress of the user","operationId":"Users_UpdateEmail","consumes":["application/json","text/json"],"produces":[],"parameters":[{"name":"request","in":"body","description":"An object encapsulating information to change an email","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.User.ChangeEmailRequest"}}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/me/password":{"put":{"tags":["Users"],"summary":"Change the password of the user","operationId":"Users_ChangePassword","consumes":["application/json","text/json"],"produces":[],"parameters":[{"name":"request","in":"body","description":"An object encapsulating information to change a password","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.User.ChangePasswordRequest"}}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/me/password/reset":{"post":{"tags":["Users"],"summary":"Reset the password for a user with a given token","operationId":"Users_ResetPassword","consumes":["application/json","text/json"],"produces":[],"parameters":[{"name":"request","in":"body","description":"An object containing request data","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.User.ResetPasswordRequest"}}],"responses":{"204":{"description":"No Content"},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/me/password/forgot":{"post":{"tags":["Users"],"summary":"Generates a reset-password token that is emailed to the person","operationId":"Users_ForgotPassword","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"request","in":"body","description":"The email of the person","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.User.ForgotPasswordRequest"}}],"responses":{"200":{"description":"OK","schema":{"type":"object"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/me/culture":{"put":{"tags":["Users"],"summary":"Update the culture of the given person","operationId":"Users_SetCulture","consumes":[],"produces":[],"parameters":[{"name":"culture","in":"query","description":"The culture info code as a combination of ISO-639 and ISO-3166 e.g. 'en-US', 'de-DE'","required":true,"type":"string"}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/me/optin":{"put":{"tags":["Users"],"summary":"Opts in to certain services for the given person","operationId":"Users_OptIn","consumes":[],"produces":[],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/me/optout":{"put":{"tags":["Users"],"summary":"Opts out of certain services for the given person","operationId":"Users_OptOut","consumes":[],"produces":[],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/me/metadata":{"get":{"tags":["Users"],"summary":"Get list of metadata based on the names provided as parameters for the given person","operationId":"Users_GetUserMetadata","consumes":[],"produces":["application/json","text/json"],"parameters":[{"name":"names","in":"query","description":"A comma separated string of names of user metadata. If empty, return all.","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.KeyValueModel[]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"put":{"tags":["Users"],"summary":"Create or update metadata for a given person","operationId":"Users_CreateOrUpdateUserMetadata","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"metadata","in":"body","description":"A model containing name and value for the metadata","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.UserMetadataUpdateRequest"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.KeyValueModel]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/me/profile":{"get":{"tags":["Users"],"summary":"Get the user profile for the given person","operationId":"Users_GetUserProfile","consumes":[],"produces":["application/json","text/json"],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.UserProfile]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}},"put":{"tags":["Users"],"summary":"Updates the user profile information","operationId":"Users_UpdateUserProfile","consumes":["application/json","text/json"],"produces":["application/json","text/json"],"parameters":[{"name":"userProfile","in":"body","description":"A model with user profile information to update","required":true,"schema":{"$ref":"#/definitions/Meniga.Core.Api.Models.UserProfileUpdateRequest"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.UserProfile]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/me/realmusers/{id}":{"delete":{"tags":["Users"],"summary":"Delete the realm user and the connected accounts","operationId":"Users_DeleteCredentials","consumes":[],"produces":[],"parameters":[{"name":"id","in":"path","description":"The Id of the realm user","required":true,"type":"integer","format":"int64"}],"responses":{"204":{"description":"No Content"},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}},"/me/realmusers":{"get":{"tags":["Users"],"summary":"Get all different Ids for the user (personId, userId, realmUserId, userIdentifier and realmId)","operationId":"Users_GetRealmUsers","consumes":[],"produces":["application/json","text/json"],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.RealmUser[]]"}},"401":{"description":"The request requires user authentication. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]"}},"500":{"description":"The server encountered an unexpected condition which prevented it from fulfilling the request.","schema":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]"}}}}}},"definitions":{"Meniga.Core.Api.Models.AccountsFilter":{"description":"The accounts filter object to filter accounts by.","type":"object","properties":{"realmIdentifier":{"description":"The realm identifier","type":"string"},"accountIdentifier":{"description":"The account identifier","type":"string"},"accountCategory":{"description":"The Account Category as defined by the \"GET /user/v1/accounts/accountcategories\" endpoint.\r\nPassed values can both be the integer id or the string name of the account category.","enum":["Unknown","Current","Credit","Savings","Loan","Wallet","Manual","Asset"],"type":"string"},"includeHidden":{"description":"True if hidden accounts should also be returned. False or omitted will only return accounts that are not hidden.","type":"boolean"},"includeDisabled":{"description":"True if disabled accounts should also be returned. False or omitted will only return accounts that are not disabled.","type":"boolean"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.AccountModel[],Meniga.Runtime.WebApi.Models.Pagination.PaginationMetaModel]":{"description":"A document wrapper for API responses","required":["data","meta"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.AccountModel"}},"meta":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Pagination.PaginationMetaModel","description":"Meta object"}}},"Meniga.Core.Api.Models.AccountModel":{"description":"Account model","type":"object","properties":{"id":{"format":"int64","description":"Unique Id and primary key for the Account in the database","type":"integer"},"accountIdentifier":{"description":"Identifier for the account set by the originating bank \r\nThis identifier is used when getting Account statements","type":"string"},"realmIdentifier":{"description":"The realm identifier","type":"string"},"accountTypeId":{"format":"int32","description":"The id of the account type","type":"integer"},"name":{"description":"The Name of the account set by the user or the originating bank","type":"string"},"balance":{"format":"double","description":"The current balance of the account","type":"number"},"limit":{"format":"double","description":"The limit or overdraft","type":"number"},"accountClass":{"description":"The account class that is for example used for displaying an image for this account in CSS","type":"string"},"organizationName":{"description":"The name of the organization associated with this account","type":"string"},"organizationIdentifier":{"description":"A code that identifies the organization associated with this account gloabally, such as Swift code","type":"string"},"realmCredentialsId":{"format":"int64","description":"Identifier for an online bank user that owns this account","type":"integer"},"accountAuthorizationType":{"description":"Indicates the type of account authorization during account aggregation","enum":["None","External","Internal","ExternalMultifactor"],"type":"string"},"orderId":{"format":"int32","description":"Accounts are ordered in ascending order by this order key","type":"integer"},"isImportAccount":{"description":"Indicates if this account assues transactions to be imported manually or not","type":"boolean"},"lastUpdate":{"format":"date-time","description":"The last update time of this account","type":"string"},"personId":{"format":"int64","description":"Identifer for the person owning this account","type":"integer"},"userEmail":{"description":"The email of the person owning this account","type":"string"},"createDate":{"format":"date-time","description":"The creation date for this account","type":"string"},"accountCategory":{"description":"Indicates if this is a Current account, Credit account or Saving account","enum":["Unknown","Current","Credit","Savings","Loan","Wallet","Manual","Asset"],"type":"string"},"emergencyFundBalanceLimit":{"format":"double","description":"If this account is used to track Life goals, this amount indicates the amount \r\nthat is not used for goal allocation","type":"number"},"inactive":{"description":"True if the account is inactive","type":"boolean"},"attachedToUserDate":{"format":"date-time","description":"DateTime when the user added this account","type":"string"},"isHidden":{"description":"True if the account should be hidden from widgets on the overview page","type":"boolean"},"isDisabled":{"description":"True if the this account should be exluded from all calculations","type":"boolean"},"metadata":{"description":"The account metadata","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.AccountMetadataModel"}},"currencyCode":{"description":"The currency code of the account","type":"string"},"accountRoleExternal":{"description":"The account role external.","type":"string"},"accountStatusExternal":{"description":"The account status external","type":"string"},"balanceInUserCurrency":{"format":"double","description":"Current balance of the account in the currency of the user","type":"number"},"limitInUserCurrency":{"format":"double","description":"The limit or overdraft in the currency of the user","type":"number"}}},"Meniga.Runtime.WebApi.Models.Pagination.PaginationMetaModel":{"description":"Provides meta information for paginated endpoints","required":["totalCount"],"type":"object","properties":{"totalCount":{"format":"int32","description":"The total count of objects available from the endpoint based on the passed in filter","type":"integer"}}},"Meniga.Core.Api.Models.AccountMetadataModel":{"description":"Account metadata model","type":"object","properties":{"name":{"description":"Metadata name","type":"string"},"value":{"description":"Metadata value","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiError]":{"description":"A document wrapper for API error responses","required":["errors"],"type":"object","properties":{"errors":{"description":"Errors","type":"array","items":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiError"}}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiError":{"description":"The base error response message class.\r\n\r\nIt formats the {System.Net.HttpStatusCode} passed in the  to a high level error {Meniga.Runtime.WebApi.Models.Common.JsonApiError.Message}\r\nas defined by the HTTP spec: https://tools.ietf.org/html/rfc2616#section-10\r\nE.g. for HTTP status code \"400\" the {Meniga.Runtime.WebApi.Models.Common.JsonApiError.Message} will be \"Bad Request\"\r\nand for status code \"500\" {Meniga.Runtime.WebApi.Models.Common.JsonApiError.Message} will be \"Internal Server Error\"","required":["message"],"type":"object","properties":{"message":{"description":"The title of the returned HTTP status code according the the HTTP spec,\r\ne.g. for HTTP status code \"400\" the message will be \"Bad Request\"","type":"string"},"messageDetails":{"description":"A detailed description of the error intended for the developer to understand exactly what failed.\r\nThis info is stripped from the response if error details are not configured to be emitted from the api.","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiServerError]":{"description":"A document wrapper for API error responses","required":["errors"],"type":"object","properties":{"errors":{"description":"Errors","type":"array","items":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiServerError"}}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiServerError":{"description":"A server error object","required":["message"],"type":"object","properties":{"message":{"description":"The title of the returned HTTP status code according the the HTTP spec,\r\ne.g. for HTTP status code \"400\" the message will be \"Bad Request\"","type":"string"},"messageDetails":{"description":"A detailed description of the error intended for the developer to understand exactly what failed.\r\nThis info is stripped from the response if error details are not configured to be emitted from the api.","type":"string"},"exceptionType":{"description":"The stack trace information","type":"string"},"exceptionMessage":{"description":"The stack trace information","type":"string"},"stackTrace":{"description":"The stack trace information","type":"string"}}},"Meniga.Core.Api.Models.AccountCreateRequest":{"description":"The create account request object.","required":["accountIdentifier","accountTypeId","name"],"type":"object","properties":{"accountIdentifier":{"description":"Identifier for the account set by the originating bank.\r\nThis identifier is used when getting Account statements.","type":"string"},"accountTypeId":{"format":"int32","description":"The Id of the account type as defined by the \"GET /user/v1/accounts/accounttypes\" endpoint","type":"integer"},"name":{"description":"The name of the account set by the user or the originating bank","type":"string"},"balance":{"format":"double","description":"The current balance of the account","type":"number"},"limit":{"format":"double","description":"The limit or overdraft","type":"number"},"realmUserId":{"format":"int64","description":"The Id of a realm user that owns this account","type":"integer"},"orderId":{"format":"int32","description":"Accounts are ordered in ascending order by this order key","type":"integer"},"emergencyFundBalanceLimit":{"format":"double","description":"If this account is used to track Life goals, this amount indicates the amount \r\nthat is not used for goal allocation","type":"number"},"isHidden":{"description":"True if the account should be hidden from widgets on the overview page","type":"boolean"},"currencyCode":{"description":"The currency code of the account","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.AccountModel]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.AccountModel","description":"Primary data"}}},"Meniga.Core.Api.Models.AccountUpdateRequest":{"description":"The account update request object.","required":["name","orderId","isHidden"],"type":"object","properties":{"name":{"description":"Name of the account set by the user or the originating bank","type":"string"},"orderId":{"format":"int32","description":"Accounts are ordered in ascending order by this order key","type":"integer"},"emergencyFundBalanceLimit":{"format":"double","description":"If this account is used to track Life goals, this amount indicates the amount \r\nthat is not used for goal allocation","type":"number"},"isHidden":{"description":"True if the account should be hidden from widgets on the overview page","type":"boolean"},"isDisabled":{"description":"True if the this account should be exluded from all calculations","type":"boolean"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.List[Meniga.Core.Api.Models.AccountTypeModel]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.AccountTypeModel"}}}},"Meniga.Core.Api.Models.AccountTypeModel":{"description":"Account type model","type":"object","properties":{"id":{"format":"int32","description":"The unique Id for the account type","type":"integer"},"name":{"description":"The name of the account type","type":"string"},"description":{"description":"The description of the account type","type":"string"},"accountCategory":{"description":"The account category for this account type","enum":["Unknown","Current","Credit","Savings","Loan","Wallet","Manual","Asset"],"type":"string"},"accountClass":{"description":"The account class that is for example used for displaying an image for this account in CSS","type":"string"},"organizationId":{"format":"int32","description":"The Id of the organization associated with this account type","type":"integer"},"importAccountConfiguration":{"$ref":"#/definitions/Meniga.Core.Api.Models.ImportAccountConfigurationModel","description":"This will include information about supported file type extensions and parser class for import account types"},"realmId":{"format":"int32","description":"The Id of the realm used to synchronize transactions","type":"integer"},"accountCategoryDetails":{"description":"Extra information about the account category, for example \"visa\" or \"amex\" for the \"Credit\" account category","type":"string"},"enableCashback":{"description":"True if cashback can be calculated for the account","type":"boolean"}}},"Meniga.Core.Api.Models.ImportAccountConfigurationModel":{"description":"An import configuration","type":"object","properties":{"id":{"format":"int32","description":"The unique ID of this Import Account Configuration.","type":"integer"},"description":{"description":"The description for the Import Account Configuration.","type":"string"},"supportedFileTypeExtensions":{"description":"The supported file type exensions where key is the file type extension (i.e. .xls) and value is the file type extension description (i.e. Excel Workbook)","type":"array","items":{"$ref":"#/definitions/System.Collections.Generic.KeyValuePair[System.String,System.String]"}},"isCopyPaste":{"description":"Says whether or not this import configuration supports copy/paste import","type":"boolean"}}},"System.Collections.Generic.KeyValuePair[System.String,System.String]":{"type":"object","properties":{"key":{"type":"string","readOnly":true},"value":{"type":"string","readOnly":true}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.AccountTypeModel]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.AccountTypeModel","description":"Primary data"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.AccountTypeCategory[]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.AccountTypeCategory"}}}},"Meniga.Core.Api.Models.AccountTypeCategory":{"description":"The account type category model","type":"object","properties":{"id":{"format":"int32","description":"The Id of the account type category","type":"integer"},"name":{"description":"The name of the account type category","type":"string"},"parentId":{"format":"int32","description":"The Id of the parent of the account type category","type":"integer"},"parentName":{"description":"The name of the parent type category","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.NameId[]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.NameId"}}}},"Meniga.Core.Api.Models.NameId":{"description":"A data object for a \"name/Id\" pair","type":"object","properties":{"id":{"format":"int64","description":"The id of the pair","type":"integer"},"name":{"description":"The name of the pair","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.AccountMetadataModel[]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.AccountMetadataModel"}}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.AccountMetadataModel]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.AccountMetadataModel","description":"Primary data"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.ValueWrapperModel]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.ValueWrapperModel","description":"Primary data"}}},"Meniga.Core.Api.Models.ValueWrapperModel":{"description":"Model for a single string value","type":"object","properties":{"value":{"description":"The value for the entry","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.AccountBalanceHistory[]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.AccountBalanceHistory"}}}},"Meniga.Core.Api.Models.AccountBalanceHistory":{"description":"Balance history for a given account","type":"object","properties":{"id":{"format":"int64","description":"The Id of the account balance history entry","type":"integer"},"accountId":{"format":"int64","description":"The Id of the account from which this balance belongs to","type":"integer"},"balance":{"format":"double","description":"Balance at the time when it was updated in the currency of the account","type":"number"},"balanceInUserCurrency":{"format":"double","description":"Balance at the time when it was updated in the currency of the user","type":"number"},"balanceDate":{"format":"date-time","description":"The time at which the balance was recorded","type":"string"},"isDefault":{"description":"Indicates if the entry has been generated with default values. This happens when there is missing months (in the database) \r\nbetween the start and end date ranges sent in by the client.","type":"boolean"}}},"Meniga.Core.Authentication.Api.Models.EmailPasswordLoginRequest":{"description":"Email and password of a user to authenticate","required":["email","password"],"type":"object","properties":{"email":{"description":"The email to validate","type":"string"},"password":{"description":"The password to validate","type":"string"},"clientId":{"description":"The client ID of the client if engaging in the refresh token flow","type":"string"},"clientSecret":{"description":"The client secret of the client if engaging in the refresh token flow","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Authentication.Api.Models.AuthenticationResponse]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Authentication.Api.Models.AuthenticationResponse","description":"Primary data"}}},"Meniga.Core.Authentication.Api.Models.AuthenticationResponse":{"description":"Authentication information","type":"object","properties":{"accessToken":{"description":"The access token","type":"string"},"refreshToken":{"description":"The refresh token","type":"string"}}},"Meniga.Core.Authentication.Api.Models.PostAuthenticationTasksRequest":{"description":"Request object with information about the Post Authentication Task.","type":"object","properties":{"userIdentifier":{"type":"string"},"realmIdentifier":{"type":"string"},"parameters":{"type":"object","additionalProperties":{"type":"string"}}}},"Meniga.Core.Authentication.Api.Models.RefreshTokenRequest":{"description":"Request object with information about the refresh token","required":["refreshToken"],"type":"object","properties":{"refreshToken":{"description":"The refresh token of the person","type":"string"},"clientId":{"description":"The Id of the client that the refresh token was issued for","type":"string"},"clientSecret":{"description":"The client secret of the client the refresh token was issued for","type":"string"},"subject":{"description":"The subject the refresh token was issued for","type":"string"}}},"Meniga.Component.Budgets.Api.Models.Requests.GetBudgetsMessage":{"description":"A filter for getting lists of budgets","type":"object","properties":{"ids":{"description":"The ids, comma delimited, of the budgets to return","type":"string"},"accountIds":{"description":"A comma delimited list of account ids to filter budgets by. Only budgets that are associated with these\r\naccounts will be returned","type":"string"},"type":{"description":"The type of budget to return in the list, filters the list down to 1 type","enum":["Budget","Planning"],"type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IEnumerable[Meniga.Component.Budgets.Api.Models.Responses.BudgetHeaderMessage]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Component.Budgets.Api.Models.Responses.BudgetHeaderMessage"}}}},"Meniga.Component.Budgets.Api.Models.Responses.BudgetHeaderMessage":{"description":"A header for a budget","type":"object","properties":{"id":{"format":"int64","description":"The id of the budget","type":"integer"},"type":{"description":"The type of the budget","enum":["Budget","Planning"],"type":"string"},"name":{"description":"The user defined name for the budget","type":"string"},"description":{"description":"The user defined description of the budget","type":"string"},"accountIds":{"description":"The account Ids associated with the budget","type":"array","items":{"format":"int64","type":"integer"}},"period":{"description":"If the budget is a planning budget, the period of the budget","enum":["Month"],"type":"string"},"offset":{"format":"int32","description":"If the budget is a planning budget, the offset of the budget","type":"integer"},"created":{"format":"date-time","description":"The creation date and time for the budget","type":"string"}}},"Meniga.Component.Budgets.Api.Models.Requests.BudgetCreationMessage":{"description":"Message for creating a new budget","type":"object","properties":{"type":{"description":"The type of the budget to create","enum":["Budget","Planning"],"type":"string"},"name":{"description":"The user assigned name for the budget","type":"string"},"description":{"description":"The user assigned description for the budget","type":"string"},"accountIds":{"description":"The list of account ids to use with this budget","type":"array","items":{"format":"int64","type":"integer"}},"period":{"description":"If creating a planning budget the period delimiting the entries","enum":["Month"],"type":"string"},"offset":{"format":"int32","description":"If a planning budget, the offset into the period","type":"integer"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.Budgets.Api.Models.Responses.BudgetCreatedMessage]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Component.Budgets.Api.Models.Responses.BudgetCreatedMessage","description":"Primary data"}}},"Meniga.Component.Budgets.Api.Models.Responses.BudgetCreatedMessage":{"description":"Response message for budget creation","type":"object","properties":{"id":{"format":"int64","description":"The Id of the created budget","type":"integer"},"type":{"description":"The type of the created budget","enum":["Budget","Planning"],"type":"string"},"name":{"description":"The user defined name of the created budget","type":"string"},"description":{"description":"The user defined description text for the created budget","type":"string"},"accountIds":{"description":"The accounts associated with the created budget","type":"array","items":{"format":"int64","type":"integer"}},"period":{"description":"The period of the created budget if it is a planning budget","enum":["Month"],"type":"string"},"offset":{"format":"int32","description":"The offset of the created budget if it is a planning budget","type":"integer"},"created":{"format":"date-time","description":"The creation date and time for the budget","type":"string"}}},"Meniga.Component.Budgets.Api.Models.Requests.GetBudgetMessage":{"description":"A filter object allowing filtering of entries on a returned budget request","type":"object","properties":{"categoryIds":{"description":"A list of category id's to filter entries by. Only entries linked to these ids will be returned","type":"string"},"startDate":{"format":"date-time","description":"The start date (inclusive) to return entries from","type":"string"},"endDate":{"format":"date-time","description":"The end date (inclusive) to return entries to","type":"string"},"allowOverlappingEntries":{"description":"Defaults to false, entries must be completely bound by the date range supplied.\r\nIf true, entries that intersect the date range will be returned.","type":"boolean"},"includeEntries":{"description":"Defaults to true, return entries with the budget object.\r\nIf false, only return the budget object with no entries.","type":"boolean"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.Budgets.Api.Models.Responses.BudgetMessage]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Component.Budgets.Api.Models.Responses.BudgetMessage","description":"Primary data"}}},"Meniga.Component.Budgets.Api.Models.Responses.BudgetMessage":{"description":"A budget get response containing a header and entries","type":"object","properties":{"entries":{"description":"A list of entries for the budget","type":"array","items":{"$ref":"#/definitions/Meniga.Component.Budgets.Api.Models.Responses.BudgetEntryMessage"}},"id":{"format":"int64","description":"The id of the budget","type":"integer"},"type":{"description":"The type of the budget","enum":["Budget","Planning"],"type":"string"},"name":{"description":"The user defined name for the budget","type":"string"},"description":{"description":"The user defined description of the budget","type":"string"},"accountIds":{"description":"The account Ids associated with the budget","type":"array","items":{"format":"int64","type":"integer"}},"period":{"description":"If the budget is a planning budget, the period of the budget","enum":["Month"],"type":"string"},"offset":{"format":"int32","description":"If the budget is a planning budget, the offset of the budget","type":"integer"},"created":{"format":"date-time","description":"The creation date and time for the budget","type":"string"}}},"Meniga.Component.Budgets.Api.Models.Responses.BudgetEntryMessage":{"description":"Model for a budget entry","type":"object","properties":{"id":{"format":"int64","description":"The id of the budget entry","type":"integer"},"ruleId":{"format":"int64","description":"The id of the associated rule","type":"integer"},"targetAmount":{"format":"double","description":"The target amount for the budget entry","type":"number"},"startDate":{"format":"date-time","description":"The start date for the budget entry","type":"string"},"endDate":{"format":"date-time","description":"The end date for the budget entry","type":"string"},"updatedAt":{"format":"date-time","description":"The date and time the entry was last edited","type":"string"},"budgetId":{"format":"int64","description":"The id of the budget the entry is in","type":"integer"},"generationType":{"format":"int32","description":"The generation type for the entry if it is in a planning budget","type":"integer"},"spentAmount":{"format":"double","description":"The spend amount in the associated categories if the entry is current","type":"number"},"categoryIds":{"description":"The category ids associated with the budget entry","type":"array","items":{"format":"int64","type":"integer"}}}},"Meniga.Component.Budgets.Api.Models.Requests.BudgetUpdateMessage":{"description":"Model for updating budgets","required":["name"],"type":"object","properties":{"name":{"description":"The name of the budget","type":"string"},"description":{"description":"The description of the budget","type":"string"},"accountIds":{"description":"The account ids assicated with the budget","type":"array","items":{"format":"int64","type":"integer"}}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.Budgets.Api.Models.Responses.BudgetUpdatedMessage]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Component.Budgets.Api.Models.Responses.BudgetUpdatedMessage","description":"Primary data"}}},"Meniga.Component.Budgets.Api.Models.Responses.BudgetUpdatedMessage":{"description":"An updated budget model","type":"object","properties":{"id":{"format":"int64","description":"The id of the budget","type":"integer"},"type":{"description":"The type of the budget","enum":["Budget","Planning"],"type":"string"},"name":{"description":"The name of the budget","type":"string"},"description":{"description":"The description of the budget","type":"string"},"accountIds":{"description":"The account ids associated with the budget","type":"array","items":{"format":"int64","type":"integer"}},"period":{"description":"The period of the budget (if it is a planning budget)","enum":["Month"],"type":"string"},"offset":{"format":"int32","description":"The offset into the period (if it is a planning budget)","type":"integer"},"created":{"format":"date-time","description":"The date and time of the creation of the budget","type":"string"}}},"Meniga.Component.Budgets.Api.Models.Requests.BudgetEntriesCreationMessage":{"description":"Model for creating entries for a budget","type":"object","properties":{"entries":{"description":"The entries to create","type":"array","items":{"$ref":"#/definitions/Meniga.Component.Budgets.Api.Models.Requests.BudgetEntryCreationMessage"}}}},"Meniga.Component.Budgets.Api.Models.Requests.BudgetEntryCreationMessage":{"description":"Model for creation of a single entry","type":"object","properties":{"targetAmount":{"format":"double","description":"The target amount of the entry","type":"number"},"startDate":{"format":"date-time","description":"The start date for the entry","type":"string"},"endDate":{"format":"date-time","description":"The end date for the entry","type":"string"},"categoryIds":{"description":"The category ids associated with the entry","type":"array","items":{"format":"int64","type":"integer"}}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IEnumerable[Meniga.Component.Budgets.Api.Models.Responses.BudgetEntryCreatedMessage]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Component.Budgets.Api.Models.Responses.BudgetEntryCreatedMessage"}}}},"Meniga.Component.Budgets.Api.Models.Responses.BudgetEntryCreatedMessage":{"description":"Model for a created entry in a budget","type":"object","properties":{"id":{"format":"int64","description":"The id of the entry","type":"integer"},"budgetId":{"format":"int64","description":"The id of the budget","type":"integer"},"targetAmount":{"format":"double","description":"The target amount in the entry","type":"number"},"spentAmount":{"format":"double","description":"The spent amount that was calculated for the entry","type":"number"},"startDate":{"format":"date-time","description":"The start date of the entry","type":"string"},"endDate":{"format":"date-time","description":"The end date of the entry","type":"string"},"updatedAt":{"format":"date-time","description":"The date and time the entry was last edited","type":"string"},"categoryIds":{"description":"The list of assocated categories for the entry","type":"array","items":{"format":"int64","type":"integer"}}}},"Meniga.Component.Budgets.Api.Models.Requests.GetEntriesMessage":{"description":"Model for filtering reqests to get budget entries","type":"object","properties":{"categoryIds":{"description":"The category Ids to filter by, only entries associated with these categories will be returned","type":"string"},"startDate":{"format":"date-time","description":"The start date (inclusive) from which to get entries","type":"string"},"endDate":{"format":"date-time","description":"The end date (inclusive) to which get entries","type":"string"},"allowOverlappingEntries":{"description":"Defaults to false, entries must be completely bound by end and start date to be returned. \r\nIf true then entries that intersect the start and end date period are returned.","type":"boolean"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IEnumerable[Meniga.Component.Budgets.Api.Models.Responses.BudgetEntryMessage]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Component.Budgets.Api.Models.Responses.BudgetEntryMessage"}}}},"Meniga.Component.Budgets.Api.Models.Requests.BudgetEntryUpdateMessage":{"description":"Budget entry update message","required":["targetAmount","startDate","endDate","categoryIds"],"type":"object","properties":{"targetAmount":{"format":"double","description":"The target amount for the entry","type":"number"},"startDate":{"format":"date-time","description":"The start date for the entry","type":"string"},"endDate":{"format":"date-time","description":"The end date for the entry","type":"string"},"categoryIds":{"description":"The associated category ids for the entry","type":"array","items":{"format":"int64","type":"integer"}}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.Budgets.Api.Models.Responses.BudgetEntryUpdatedMessage]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Component.Budgets.Api.Models.Responses.BudgetEntryUpdatedMessage","description":"Primary data"}}},"Meniga.Component.Budgets.Api.Models.Responses.BudgetEntryUpdatedMessage":{"description":"Model for updated budget entry","type":"object","properties":{"id":{"format":"int64","description":"The id of the budget entry","type":"integer"},"budgetId":{"format":"int64","description":"The id of the budget the entry is in","type":"integer"},"targetAmount":{"format":"double","description":"The target amount for the entry","type":"number"},"startDate":{"format":"date-time","description":"The start date for the entry","type":"string"},"endDate":{"format":"date-time","description":"The end date for the entry","type":"string"},"updatedAt":{"format":"date-time","description":"The date and time the entry was updated","type":"string"},"generationType":{"format":"int32","description":"The generation type if the entry is in a planning budget","type":"integer"},"categoryIds":{"description":"The category ids associated with the entry","type":"array","items":{"format":"int64","type":"integer"}}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.Budgets.Api.Models.Responses.BudgetEntryMessage]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Component.Budgets.Api.Models.Responses.BudgetEntryMessage","description":"Primary data"}}},"Meniga.Component.Budgets.Api.Models.Requests.GetRulesMessage":{"description":"A filter object allowing filtering on returned planning rules","type":"object","properties":{"categoryIds":{"description":"The category ids to filter by, only rules assocated to these categories will be returned","type":"string"},"startDate":{"format":"date-time","description":"The start date (inclusive) to return rules from","type":"string"},"endDate":{"format":"date-time","description":"The end date (inclusive) to return rules from","type":"string"},"allowOverlappingRules":{"description":"Default to false, rules must be completely bound by start and end date to be included in result.\r\nIf true then rules that intersect the start and end date period are returned.","type":"boolean"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IEnumerable[Meniga.Component.Budgets.Api.Models.Responses.BudgetRuleMessage]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Component.Budgets.Api.Models.Responses.BudgetRuleMessage"}}}},"Meniga.Component.Budgets.Api.Models.Responses.BudgetRuleMessage":{"description":"Model for a planning budget rule","type":"object","properties":{"id":{"format":"int64","description":"The id of the planning rule","type":"integer"},"targetAmount":{"format":"double","description":"The target amount in the planning rule","type":"number"},"startDate":{"format":"date-time","description":"The start date for the rule","type":"string"},"endDate":{"format":"date-time","description":"The end date for the rule","type":"string"},"updatedAt":{"format":"date-time","description":"The date and time the rule was last edited","type":"string"},"budgetId":{"format":"int64","description":"The id of the budget the rule is in","type":"integer"},"generationType":{"format":"int32","description":"The generation type for the rule","type":"integer"},"categoryIds":{"description":"The list of category ids the rule is associated with","type":"array","items":{"format":"int64","type":"integer"}}}},"Meniga.Component.Budgets.Api.Models.Requests.BudgetRulesCreationMessage":{"description":"Model for creating rules in a planning budget","type":"object","properties":{"rules":{"description":"The set of rule creation messages to process","type":"array","items":{"$ref":"#/definitions/Meniga.Component.Budgets.Api.Models.Requests.BudgetRuleCreationMessage"}}}},"Meniga.Component.Budgets.Api.Models.Requests.BudgetRuleCreationMessage":{"description":"Model for creating budget rules","type":"object","properties":{"targetAmount":{"format":"double","description":"The target amount for the budget rule","type":"number"},"startDate":{"format":"date-time","description":"The start date for the budget rule","type":"string"},"endDate":{"format":"date-time","description":"The end date for the budget rule","type":"string"},"categoryIds":{"description":"The associated category ids for the budget rule","type":"array","items":{"format":"int64","type":"integer"}},"generationType":{"format":"int64","description":"The generation type for the budget rule","type":"integer"},"recurringPattern":{"$ref":"#/definitions/Meniga.Component.Budgets.Api.Models.Requests.BudgetEntryRepeatCreationMessage","description":"The recurring pattern for the rule"},"repeatUntil":{"format":"date-time","description":"The time based delimiter for the rule recurrence","type":"string"}}},"Meniga.Component.Budgets.Api.Models.Requests.BudgetEntryRepeatCreationMessage":{"description":"The model for creating recurring entries","type":"object","properties":{"monthInterval":{"format":"int32","description":"The monthly interval of the recurrence","type":"integer"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IEnumerable[Meniga.Component.Budgets.Api.Models.Responses.BudgetRuleCreatedMessage]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Component.Budgets.Api.Models.Responses.BudgetRuleCreatedMessage"}}}},"Meniga.Component.Budgets.Api.Models.Responses.BudgetRuleCreatedMessage":{"description":"Response message for budget rule creation","type":"object","properties":{"id":{"format":"int64","description":"The Id of the created rule","type":"integer"},"budgetId":{"format":"int64","description":"The Iid of the budget associated with the rule","type":"integer"},"targetAmount":{"format":"double","description":"The target amount for the rule if generation 0","type":"number"},"startDate":{"format":"date-time","description":"The start date of the rule","type":"string"},"endDate":{"format":"date-time","description":"The end date of the rule","type":"string"},"updatedAt":{"format":"date-time","description":"The date and time the rule was last modified","type":"string"},"categoryIds":{"description":"The categories associated with the rule","type":"array","items":{"format":"int64","type":"integer"}},"generationType":{"format":"int64","description":"The generation type of the rule","type":"integer"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.CategoryModel[],Meniga.Runtime.WebApi.Models.Pagination.PaginationMetaModel]":{"description":"A document wrapper for API responses","required":["data","meta"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.CategoryModel"}},"meta":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Pagination.PaginationMetaModel","description":"Meta object"}}},"Meniga.Core.Api.Models.CategoryModel":{"description":"A model for category information","type":"object","properties":{"id":{"format":"int32","description":"The Id of the category","type":"integer"},"name":{"description":"The name of the category","type":"string"},"otherCategoryName":{"description":"Default name of parent category when presented as \"other\" category","type":"string"},"parentCategoryId":{"format":"int32","description":"The Id of the parent category if this category is a child category, otherwise null.","type":"integer"},"isPublic":{"description":"True if the category is a public category. If it's a user category, it will be false.","type":"boolean"},"isFixedExpenses":{"description":"True if the category is a fixed expenses category, otherwise false.","type":"boolean"},"categoryType":{"description":"The type of the category","enum":["Expenses","Income","Savings","Excluded"],"type":"string"},"categoryRank":{"description":"The rank of the category","enum":["NotUseful","SomewhatUseful","PrettyUseful","VeryUseful"],"type":"string"},"budgetGenerationType":{"format":"int32","description":"The budget generation type for the category","type":"integer"},"children":{"description":"A list of child categories","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.CategoryModel"}},"categoryContextId":{"format":"int32","description":"Indicates what context the category belongs to; normal or small business user.","type":"integer"},"orderId":{"format":"int32","description":"The ascending order of the category","type":"integer"},"displayData":{"description":"Additional data for displaying the category","type":"string"}}},"Meniga.Core.Api.Models.CategoryCreateRequest":{"description":"Create category request model","required":["name"],"type":"object","properties":{"name":{"description":"The name of the new category","type":"string"},"isFixedExpenses":{"description":"True if the category is a fixed expenses category, otherwise false","type":"boolean"},"categoryType":{"description":"An enum of the category type as defined in the \"GET /user/v1/categories/types\" endpoint. If the ParentId property is set then leave this property empty since the category type of the parent will be used.","enum":["Expenses","Income","Savings","Excluded"],"type":"string"},"parentId":{"format":"int32","description":"The Id of the parent category. Mandatory if CategoryType is not provided.","type":"integer"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.CategoryModel]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.CategoryModel","description":"Primary data"}}},"Meniga.Core.Api.Models.CategoryUpdateRequest":{"description":"Update category request model","required":["name"],"type":"object","properties":{"name":{"description":"The name of the new category","type":"string"},"isFixedExpenses":{"description":"True if the category is a fixed expenses category, otherwise false.","type":"boolean"},"categoryType":{"description":"An enum of the category type as defined in the \"GET /user/v1/categories/types\" endpoint. If the ParentId property is set then leave this property empty since the category type of the parent will be used.","enum":["Expenses","Income","Savings","Excluded"],"type":"string"},"parentId":{"format":"int32","description":"The Id of the parent category. Mandatory if CategoryType is not provided.","type":"integer"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.List[Meniga.Core.Api.Models.NameId]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.NameId"}}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Challenges.Api.Models.UserChallengeModel]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Challenges.Api.Models.UserChallengeModel"}}}},"Meniga.Challenges.Api.Models.UserChallengeModel":{"description":"User challenge model","type":"object","properties":{"id":{"format":"uuid","description":"The id of the challenge.","type":"string"},"title":{"description":"The title of the challenge","type":"string"},"description":{"description":"The description of the challenge","type":"string"},"type":{"description":"The type of this challenge","enum":["SuggestedSpending","CustomSpending"],"type":"string"},"startDate":{"format":"date-time","description":"The date when this challenge starts","type":"string"},"endDate":{"format":"date-time","description":"The date when this challenge ends","type":"string"},"accepted":{"description":"whether the user has accepted the challenge or not","type":"boolean"},"acceptedDate":{"format":"date-time","description":"the date of acceptance","type":"string"},"typeData":{"$ref":"#/definitions/Meniga.Challenges.Api.Models.ChallengeMetadataModel","description":"An object containing data specific to the type of the challenge"},"iconUrl":{"description":"Url to the icon associated with the challenge","type":"string"},"topicId":{"format":"int64","description":"An id referring to another resource which tracks the process of this challenge.\r\nUsed in conjunction with challengeType","type":"integer"},"parentTopicId":{"format":"int64","description":"An id referring to another resource's parent","type":"integer"},"parentStartDate":{"format":"date-time","description":"The start date of this challenge's parent. \r\nSet when the parent contains multiple challenge instances within it's period, such as recurring spending challenges.","type":"string"},"parentEndDate":{"format":"date-time","description":"The end date of this challenge's parent.\r\nSet when the parent contains multiple challenge instances within it's period, such as recurring spending challenges.","type":"string"},"enabled":{"description":"Indicates whether the challenge is enabled or not","type":"boolean"}}},"Meniga.Challenges.Api.Models.ChallengeMetadataModel":{"description":"Model for challenge metadata","type":"object","properties":{}},"Meniga.Challenges.Api.Models.Requests.CreateUserChallengeRequest":{"description":"Request for creating user challenge","required":["title","description","startDate","typeData"],"type":"object","properties":{"title":{"description":"The title of the challenge","type":"string"},"description":{"description":"The description of the challenge","type":"string"},"startDate":{"format":"date-time","description":"The date when this challenge starts","type":"string"},"endDate":{"format":"date-time","description":"The date when this challenge ends","type":"string"},"iconUrl":{"description":"An optional url referring to an icon","type":"string"},"typeData":{"$ref":"#/definitions/Meniga.Challenges.Api.Models.Requests.CustomSpendingChallengeMetadataRequest","description":"An object containing data specific to the type of the challenge"}}},"Meniga.Challenges.Api.Models.Requests.CustomSpendingChallengeMetadataRequest":{"description":"Request for metadata of custom spending challenge","required":["categoryIds","targetAmount"],"type":"object","properties":{"categoryIds":{"description":"The ids of the categories which this challenge tracks","type":"array","items":{"format":"int32","type":"integer"}},"categoryType":{"description":"The type of categories this challenge tracks","enum":["Expenses","Income","Savings","Excluded"],"type":"string"},"targetAmount":{"format":"double","description":"The target amount for the challenge","type":"number"},"metaData":{"description":"Additional metadata for the challenge","type":"string"},"recurringInterval":{"enum":["Monthly"],"type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Challenges.Api.Models.UserChallengeModel]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Challenges.Api.Models.UserChallengeModel","description":"Primary data"}}},"Meniga.Challenges.Api.Models.Requests.UpdateUserChallengeRequest":{"description":"Update request for custom challenge","required":["title","description","startDate","typeData"],"type":"object","properties":{"title":{"description":"The title of the challenge","type":"string"},"description":{"description":"The description of the challenge","type":"string"},"startDate":{"format":"date-time","description":"The date when this challenge starts","type":"string"},"endDate":{"format":"date-time","description":"The date when this challenge ends","type":"string"},"iconUrl":{"description":"An optional url referring to an icon","type":"string"},"typeData":{"$ref":"#/definitions/Meniga.Challenges.Api.Models.Requests.UserChallengeMetadataRequest","description":"An object containing data specific to the type of the challenge"}}},"Meniga.Challenges.Api.Models.Requests.UserChallengeMetadataRequest":{"description":"Metadata request for user challenges","type":"object","properties":{}},"Meniga.Challenges.Api.Models.Requests.AcceptChallengeRequest":{"description":"Request object for accepting a challenge","type":"object","properties":{"targetAmount":{"format":"double","description":"The target amount for the challenge. If not specified, the target amount will be\r\ncalculated according to the target percentage of the challenge.","type":"number"},"waitForCompleteMilliseconds":{"format":"int32","description":"Accepting a challenge will trigger a job that determines the user specific parameters\r\nfor that challenge. This property determines how long the consumer of the API is willing\r\nto wait until the parameters have been determined. Note that the wait time only applies to\r\nthe job itself, not the whole process of accepting a challenge.","type":"integer"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiErrorDocument[Meniga.Runtime.WebApi.Models.Common.JsonApiClientError]":{"description":"A document wrapper for API error responses","required":["errors"],"type":"object","properties":{"errors":{"description":"Errors","type":"array","items":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Common.JsonApiClientError"}}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiClientError":{"description":"A bad request error object to be used with any 4xx HTTP error status code","required":["message"],"type":"object","properties":{"message":{"description":"The title of the returned HTTP status code according the the HTTP spec,\r\ne.g. for HTTP status code \"400\" the message will be \"Bad Request\"","type":"string"},"messageDetails":{"description":"A detailed description of the error intended for the developer to understand exactly what failed.\r\nThis info is stripped from the response if error details are not configured to be emitted from the api.","type":"string"},"modelState":{"description":"A dictionary of property names (keys) and error messages (values) when creating or updating a resource.","type":"object"}}},"Meniga.Challenges.Api.Models.IconFilter":{"description":"Filter object for challenges icons","type":"object","properties":{"format":{"description":"Icon format to filter by","enum":["all","svg","png"],"type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Challenges.Api.Models.IconResource]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Challenges.Api.Models.IconResource"}}}},"Meniga.Challenges.Api.Models.IconResource":{"description":"Model for available icon resources","type":"object","properties":{"id":{"description":"Icon's id","type":"string"}}},"Meniga.Core.Api.Models.EventTrackingPostRequest":{"description":"Event tracking request model","required":["trackingType","trackingState"],"type":"object","properties":{"trackingType":{"description":"The type is broken down based on component","type":"string"},"trackingState":{"description":"The event to be tracked. This is some kind of event that happened in the system such as transaction tagged or offer seen","type":"string"},"trackerId":{"format":"int64","description":"This is an optional Id to be associated with the event such as transaction id or offer id","type":"integer"},"media":{"description":"Optional name of the media type that the event originated from","type":"string"}}},"Meniga.Core.Api.Models.Feed.FeedQueryRequest":{"description":"Get feed query request model","type":"object","properties":{"dateFrom":{"format":"date-time","description":"The inclusive from date (YYYY-MM-DD)","type":"string"},"dateTo":{"format":"date-time","description":"The inclusive to date (YYYY-MM-DD)","type":"string"},"type":{"description":"The types of feed items to supply. Either single value or comma separated list from (\"transactions\", \"userevents\", \"cashback\"). Values can be found at the /feed/types endpoint.","type":"string"},"eventTypeIdentifiers":{"description":"If getting userevents then this will filter the user events based on their eventTypeIdentifier. Either a single value or comma separarated list. Possible values can be found at the /userevents/eventtypes endpoint.","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.Feed.FeedItemModel[],Meniga.Core.Api.Models.Feed.FeedItemMetaModel]":{"description":"A document wrapper for API responses","required":["data","meta"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.Feed.FeedItemModel"}},"meta":{"$ref":"#/definitions/Meniga.Core.Api.Models.Feed.FeedItemMetaModel","description":"Meta object"}}},"Meniga.Core.Api.Models.Feed.FeedItemModel":{"description":"Base class for feed items","type":"object","properties":{"date":{"format":"date-time","description":"The date for the feed item","type":"string"},"topicId":{"format":"int64","description":"The id of the topic","type":"integer"},"topicName":{"description":"The name of the topic (Account, Category, Info, Offer, Transaction)","type":"string"},"title":{"description":"The title of the feed item","type":"string"},"body":{"description":"The body text of the feed item","type":"string"},"typeName":{"description":"The type name of the feed item","type":"string"},"type":{"description":"The type of the feed item. A value from /feed/types","enum":["Transactions","UserEvents","Cashback"],"type":"string"}}},"Meniga.Core.Api.Models.Feed.FeedItemMetaModel":{"description":"Meta data for getting feed","type":"object","properties":{"actualEndDate":{"format":"date-time","description":"The last date in the result if 'take' was applied to the result set, otherwise null","type":"string"},"hasMoreData":{"description":"DEPRECATED: Clients can calculate this from the \"skip\", \"take\" and \"totalCount\" values","type":"boolean"},"totalCount":{"format":"int32","description":"The total count of items available","type":"integer"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.Feed.FeedItemModel]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.Feed.FeedItemModel","description":"Primary data"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.String[]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"type":"string"}}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.LifeGoals.Api.Models.LifeGoalModel]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Component.LifeGoals.Api.Models.LifeGoalModel","description":"Primary data"}}},"Meniga.Component.LifeGoals.Api.Models.LifeGoalModel":{"description":"A model containing information about the life goal","type":"object","properties":{"id":{"format":"int64","description":"The id of the life goal","type":"integer"},"accountId":{"format":"int64","description":"The id of the account","type":"integer"},"name":{"description":"The name of the life goal","type":"string"},"startDate":{"format":"date-time","description":"The start date for the life goal","type":"string"},"targetDate":{"format":"date-time","description":"The date for the life goal to be reached by","type":"string"},"targetAmount":{"format":"double","description":"The amount to save","type":"number"},"currentAmount":{"format":"double","description":"The current amount saved","type":"number"},"recurringAmount":{"format":"double","description":"The recurring amount (monthly payment)","type":"number"},"expectedTargetDate":{"format":"date-time","description":"The calculated expected day of completion, based on currentAmount, recurringAmount and targetAmount","type":"string"},"categoryId":{"format":"int32","description":"The id of the category","type":"integer"},"lifeGoalStatus":{"description":"A status enumeration of the LifeGoal","enum":["OnSchedule","Behind","Ahead","Achieved"],"type":"string"},"achievedDate":{"format":"date-time","description":"The date time when this goal was marked as achieved by the user","type":"string"},"metadata":{"description":"Additional information","type":"string"},"recurrenceIntervalType":{"description":"The recurrence interval type of the life goal","enum":["Monthly","Weekly","Daily","Yearly","Biweekly"],"type":"string"}}},"Meniga.Component.LifeGoals.Api.Models.UpdateLifeGoalRequestModel":{"description":"A model to update a life goal","type":"object","properties":{"name":{"description":"The new name of the life goal","type":"string"},"targetAmount":{"format":"double","description":"The new target amount of the life goal. If null, the system assumes the user wants to save as much as he can","type":"number"},"currentAmount":{"format":"double","description":"The new current amount of the life goal. If null, no changes will be made.","type":"number"},"recurringAmount":{"format":"double","description":"The new recurring amount of the life goal (monthly payment). If null, no automatic feeding of the goal will take place","type":"number"},"targetDate":{"format":"date-time","description":"The new target date of the life goal","type":"string"},"categoryId":{"format":"int32","description":"The id of the category","type":"integer"},"metadata":{"description":"Additional information","type":"string"},"markAsReached":{"description":"True if the life goal should be marked as reached","type":"boolean"},"recurrenceIntervalType":{"description":"The recurrence interval type of the life goal","enum":["Monthly","Weekly","Daily","Yearly","Biweekly"],"type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.LifeGoals.Api.Models.LifeGoalHistoryRecordModel[]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Component.LifeGoals.Api.Models.LifeGoalHistoryRecordModel"}}}},"Meniga.Component.LifeGoals.Api.Models.LifeGoalHistoryRecordModel":{"description":"A model for a history record of a life goal. The record is generated as a result of a change to the life goal.","type":"object","properties":{"lifeGoalId":{"format":"int64","description":"The id of the life goal","type":"integer"},"processingDate":{"format":"date-time","description":"The time stamp of the change that generated this record","type":"string"},"name":{"description":"The name of the life goal at the time of the change.","type":"string"},"priority":{"format":"int32","description":"The priority of the life goal at the time of the change.","type":"integer"},"targetDate":{"format":"date-time","description":"The target date of the life goal at the time of the change.","type":"string"},"accountBalance":{"format":"double","description":"The account balance at the time of the change.","type":"number"},"iconId":{"format":"int64","description":"The id of the icon for the life goal at the time of the change.","type":"integer"},"interceptAmount":{"format":"double","description":"The intercept amount of the life goal at the time of the change.","type":"number"},"targetAmount":{"format":"double","description":"The target amount of the life goal at the time of the change.","type":"number"},"currentAmount":{"format":"double","description":"The amount allocated to the life goal at the time of the change","type":"number"},"recurringAmount":{"format":"double","description":"The estimated recurring amount for the life goal at the time of the change.","type":"number"},"isDeleted":{"description":"True if the life goal has been deleted at the time of the change. Otherwise false.","type":"boolean"},"isAchieved":{"description":"True if the life goal is achieved at the time of the change. Otherwise false.","type":"boolean"},"isWithdrawn":{"description":"True if the life goal is withdrawn at the time of the change. Otherwise false.","type":"boolean"},"lifeGoalData":{"description":"The life goal data at the time of the cahnge.","type":"string"}}},"Meniga.Component.LifeGoals.Api.Models.GetLifeGoalsRequestModel":{"description":"A model specifying the get life goal page request","type":"object","properties":{"lifeGoalIds":{"description":"A comma-separated string containing the ids of life goals to be included. If empty then all life goals will be included.","type":"string"},"excludeAchievedGoals":{"description":"True if achieved goals should be exluded in the response","type":"boolean"},"accountIds":{"description":"A comma-separated string containing the ids of account Ids to filter by","type":"string"},"skip":{"format":"int32","description":"Number of records to skip","type":"integer"},"take":{"format":"int32","description":"Number of records to return;","type":"integer"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IEnumerable[Meniga.Component.LifeGoals.Api.Models.LifeGoalModel]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Component.LifeGoals.Api.Models.LifeGoalModel"}}}},"Meniga.Component.LifeGoals.Api.Models.CreateLifeGoalRequestModel":{"description":"A model containing information about the life goal to create","type":"object","properties":{"name":{"description":"The name of the life goal","type":"string"},"accountId":{"format":"int64","description":"The id of the account that the life goal is connected to","type":"integer"},"targetAmount":{"format":"double","description":"The target amount of the life goal. If null, the system assumes the user wants to save as much as he can","type":"number"},"recurringAmount":{"format":"double","description":"The monthly allocation of the life goal. If null, no automatic feeding of the goal will take place","type":"number"},"initialAmount":{"format":"double","description":"The initial amount for the life goal","type":"number"},"targetDate":{"format":"date-time","description":"The end date of the life goal. If null, the system assumes the user does not care when he reaches his goal","type":"string"},"categoryId":{"format":"int32","description":"The id of the category this life goal belongs to","type":"integer"},"metadata":{"description":"Additional information","type":"string"},"recurrenceIntervalType":{"description":"The recurrence interval type of the life goal","enum":["Monthly","Weekly","Daily","Yearly","Biweekly"],"type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.LifeGoals.Api.Models.LifeGoalAccountModel[],Meniga.Component.LifeGoals.Core.Models.LifeGoalAccountModelMeta]":{"description":"A document wrapper for API responses","required":["data","meta"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Component.LifeGoals.Api.Models.LifeGoalAccountModel"}},"meta":{"$ref":"#/definitions/Meniga.Component.LifeGoals.Core.Models.LifeGoalAccountModelMeta","description":"Meta object"}}},"Meniga.Component.LifeGoals.Api.Models.LifeGoalAccountModel":{"description":"The life goal account model","type":"object","properties":{"name":{"description":"The name of the life goal bank account","type":"string"},"accountId":{"format":"int64","description":"The id of the life goal bank account","type":"integer"},"balance":{"format":"double","description":"The balance of the account","type":"number"}}},"Meniga.Component.LifeGoals.Core.Models.LifeGoalAccountModelMeta":{"type":"object","properties":{"totalCommitted":{"format":"double","type":"number"},"totalAmountInGoals":{"format":"double","type":"number"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.Merchant]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.Merchant","description":"Primary data"}}},"Meniga.Core.Api.Models.Merchant":{"description":"A merchant model","type":"object","properties":{"address":{"$ref":"#/definitions/Meniga.Core.Api.Models.Address","description":"The address of the merchant"},"categoryScores":{"description":"The category scores of the merchant","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.CategoryScore"}},"childMerchants":{"description":"A list of child merchants","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.Merchant"}},"detectedCategory":{"description":"The detected category score","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.CategoryScore"}},"directoryLink":{"description":"The directory link of the merchant","type":"string"},"email":{"description":"The email of the merchant","type":"string"},"id":{"format":"int64","description":"The Id of the merchant","type":"integer"},"identifier":{"description":"The identifier of the merchant","type":"string"},"masterIdentifier":{"format":"uuid","description":"The master identifier of the merchant","type":"string"},"merchantCategoryIdentifier":{"description":"The master category identifier of the merchant","type":"string"},"name":{"description":"The name of the merchant","type":"string"},"offersLink":{"description":"The offers link of the merchant","type":"string"},"parentId":{"format":"int64","description":"The Id of the parent merchant","type":"integer"},"parentMerchant":{"$ref":"#/definitions/Meniga.Core.Api.Models.Merchant","description":"The parent merchant"},"parentName":{"description":"The parent name","type":"string"},"publicIdentifier":{"description":"The public identifier of the merchant","type":"string"},"telephone":{"description":"The telephone of the merchant","type":"string"},"webpage":{"description":"The web page of the merchant","type":"string"}}},"Meniga.Core.Api.Models.Address":{"description":"The address object","type":"object","properties":{"city":{"description":"The city","type":"string"},"country":{"description":"The name of the country","type":"string"},"countryCode":{"description":"The country code of the country","type":"string"},"latitude":{"description":"The latitude","type":"string"},"longitude":{"description":"The longitude","type":"string"},"postalCode":{"description":"The postal code","type":"string"},"streetLine1":{"description":"The first line in the name of the street","type":"string"},"streetLine2":{"description":"The second line in the name of the street","type":"string"}}},"Meniga.Core.Api.Models.CategoryScore":{"description":"A data object for a likelyhood that transaction belongs to a category.","type":"object","properties":{"categoryId":{"format":"int32","description":"The ID of the category","type":"integer"},"score":{"format":"double","description":"The likelyhood score of the category.\r\nThe score ranges from 0 (zero likelyhood) to 1 (highest likelyhood)","type":"number"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.List[Meniga.Core.Api.Models.Merchant]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.Merchant"}}}},"Meniga.Core.Api.Models.TopMerchantsRequest":{"description":"Request to fetch TopMerchantsResult","type":"object","properties":{"transactionFilter":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionFilterModel","description":"Filters the underlying transactions."},"options":{"$ref":"#/definitions/Meniga.Core.Api.Models.TopMerchantsOptions","description":"An option object for the request"}}},"Meniga.Core.Api.Models.TransactionFilterModel":{"description":"The transaction filter model","type":"object","properties":{"sort":{"description":"Decides the order of the returned transactions, defined by a comma separated list of the properties of the Transaction object.\r\nThe sort order for each sort field is ascending unless it is prefixed with a \"-\" in which case it is descending.\r\nIf this string is null or empty then 'OrderBy' is used.\r\n<para>\r\nThe supported Transaction fields are:\r\nAccountId, Accuracy, Amount, AmountInCurrency, Balance,BankId, CategoryChangedTime, CategoryId, Date, DueDate, HasUserClearedCategoryUncertainty, Id,\r\nIsFlagged,IsMerchant, IsOwnAccountTransfer, IsRead, IsSplitChild, IsUncleared, InsertTime, Mcc, MerchantId, ParentIdentifier, Text, Timestamp, CounterpartyAccountIdentifier,\r\nCurrency, HasUncertainCategorization, OriginalAmount, OriginalDate, OriginalText\r\n</para>","type":"string"},"accountIds":{"description":"A comma separate string of account Ids to filter by","type":"string"},"accountIdentifiers":{"description":"A comma separate string of account identifiers to filter by","type":"string"},"counterpartyAccountIdentifiers":{"description":"A comma separate string of counterparty account identifiers (who person is paying) to filter by","type":"string"},"categoryIds":{"description":"A comma separate string of category Ids to filter by","type":"string"},"categoryTypes":{"description":"A comma separate string of category types to filter by. An enum of the category type are defined in the \"GET /user/v1/categories/types\" endpoint.","type":"string"},"onlyUnread":{"description":"Whether or not to only get unread transactions","type":"boolean"},"onlyFlagged":{"description":"Whether or not to only get flagged transactions","type":"boolean"},"onlyUncertain":{"description":"Whether or not to only get transactions with uncertain categorization","type":"boolean"},"onlyUncategorized":{"description":"Whether or not to only get uncategorized transactions","type":"boolean"},"uncertainOrFlagged":{"description":"Whether or not to get uncertain categorization or flagged transactions","type":"boolean"},"hideExcluded":{"description":"Whether or not to hide transactions in a excluded category","type":"boolean"},"insertedBefore":{"format":"date-time","description":"If set, will only return transactions that have insert time before the supplied value","type":"string"},"periodFrom":{"format":"date-time","description":"The inclusive sub-date to search from (YYYY-MM-DD)","type":"string"},"periodTo":{"format":"date-time","description":"The inclusive sub-date to search to (YYYY-MM-DD)","type":"string"},"originalPeriodFrom":{"format":"date-time","description":"The inclusive date to search from (YYYY-MM-DD)","type":"string"},"originalPeriodTo":{"format":"date-time","description":"The inclusive date to search to (YYYY-MM-DD)","type":"string"},"amountFrom":{"format":"double","description":"The amount to search from","type":"number"},"amountTo":{"format":"double","description":"The amount to search to","type":"number"},"searchText":{"description":"A free-form text to filter by that searches through transaction description, merchant name, category name, currency, tags comments and transaction data","type":"string"},"description":{"description":"The transaction description to filter by. If it's null, it will be ignored. But it is possible to search for empty descriptions.","type":"string"},"currency":{"description":"The transaction currency to filter by. If it's null or empty, it will be ignored.","type":"string"},"comment":{"description":"The transaction comment to filter by. If it's null, it will be ignored. But it is possible to search for empty comments.","type":"string"},"tags":{"description":"A comma separate string of tags to filter by","type":"string"},"orderBy":{"description":"The order of the returned transactions.","enum":["ByDate","ByText","ByAmount","ByCategory","ByParsedData","ByOriginalDate"],"type":"string"},"parsedDataNameToOrderBy":{"description":"The parsed data parameter to order by when OrderBy == {Meniga.Core.Api.Models.TransactionFilterOrderEnum.ByParsedData}.","type":"string"},"ascendingOrder":{"description":"Whether or not to order the returned transactions in an ascending order. The order is specified by {Meniga.Core.Api.Models.TransactionFilterModel.OrderBy}\r\nIf nothing is specified, then the list will be ordered by date.","type":"boolean"},"useAbsoluteAmountSearch":{"description":"Whether or not to use absolute amount search. \r\nIf true, AmountFrom = 500 and AmountTo = 1000 searches from -1000 to -500 as well as +500 to + 1000","type":"boolean"},"useAndSearchForTags":{"description":"Whether or not tags are searched with AND or OR.\r\nIf true, tags are searched with AND so the transactions returned will have to contain all the {Meniga.Core.Api.Models.TransactionFilterModel.Tags}.","type":"boolean"},"useEqualsSearchForBankId":{"description":"Whether or not BankId is searched with EQUALS or LIKE. If true, exact matches are found, otherwise matches that contain the search string for BankId.","type":"boolean"},"useAmountInCurrencySearch":{"description":"DEPRECATED: Use {Meniga.Core.Api.Models.TransactionFilterModel.UseAmountFields} instead\r\nWhether or not to search for amount in currency instead of amount","type":"boolean"},"useExactDescription":{"description":"If true, filters by exact (equals) description as opposed to contains (which is the default)","type":"boolean"},"useExactMerchantTexts":{"description":"If true, filters by exact (equals) merchant texts as opposed to contains (which is the default)","type":"boolean"},"useAccentInsensitiveSearch":{"description":"Whether the search performed is accent insensitive or not","type":"boolean"},"merchantIds":{"description":"A comma separate string of merchant Ids to filter by","type":"string"},"excludeMerchantIds":{"description":"A comma separate string of merchant Ids to exclude","type":"string"},"merchantTexts":{"description":"A comma separate string of merchant texts to filter by","type":"string"},"parsedData":{"description":"The transaction data to filter by. The data is filtered with union semantics (OR)\r\nexample: [{\"key\":\"reference\",\"value\":\"ref123\"},{\"key\":\"reference\",\"value\":\"ref124\"}]\r\nwill find transactions with \"ref123\" OR \"ref124\" transaction data.","type":"string"},"useAndSearchForParsedData":{"description":"If true, then all the fields passed as {Meniga.Core.Api.Models.TransactionFilterModel.ParsedData} will be AND-ed\r\ntogether. If the same key appears more than once then they will be OR-ed together\r\nand AND-ed with the other keys.\r\nIf false, they will be OR-ed together.\r\nExample:\r\nGiven ParsedData: <code>(Key=X,Value=x1),(Key=X,Value=x2),(Key=Y,Value=y1)</code>\r\nWhen true: <code>(X=x1 OR X=x2) AND Y=y1</code>\r\nWhen false: <code>X=x1 OR X=x2 OR Y=y1</code>","type":"boolean"},"parsedDataExactKeys":{"description":"List of keys in parsed data that should only return a match if the value is exactly the same as supplied in ParsedData","type":"string"},"useParentMerchantIds":{"description":"If set to true, parent and the parents children will be found for each merchant id \r\nprovided in {Meniga.Core.Api.Models.TransactionFilterModel.MerchantIds} and in {Meniga.Core.Api.Models.TransactionFilterModel.ExcludeMerchantIds} and they \r\nincluded in the filter. If the merchant has no parent then its children, if any, are added","type":"boolean"},"excludeMerchantTexts":{"description":"A comma separate string of merchant texts to exclude","type":"string"},"bankIds":{"description":"A comma separate string of bank Ids to filter by","type":"string"},"ids":{"description":"A comma separate string of transaction Ids to filter by","type":"string"},"useAmountFields":{"description":"This is a comma separated string of transactionAmountField values\r\nthat specifies which amount fields to use when searching using amountFrom\r\nand amountTo. If useAmountInCurrencySearch = true then only\r\ntransactionAmountField.amountInCurrency is used. If useAmountInCurrencySearch = false\r\nthen this list is used. If the list is empty then transactionAmountField.amount is used.\r\nValid values are \"amount\" (0), \"originalAmount\" (1), \"amountInCurrency\" (2), and \"bookedAmount\" (3)","type":"string"}}},"Meniga.Core.Api.Models.TopMerchantsOptions":{"description":"The top merchants options object","type":"object","properties":{"maxMerchants":{"format":"int32","description":"The maximum number of merchants returned","type":"integer"},"measurement":{"description":"The measurement used to decide the order of the returned merchant result","enum":["NettoAmount"],"type":"string"},"includeUnMappedMerchants":{"description":"Whether or not to include in the aggregation transactions where the merchantId is null","type":"boolean"},"useParentMerchantIds":{"description":"If set to true, the result will be aggregated using transactions merchant parent instead of the merchant itself","type":"boolean"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.TopMerchant[]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.TopMerchant"}}}},"Meniga.Core.Api.Models.TopMerchant":{"description":"Top merchant model","type":"object","properties":{"merchantId":{"format":"int64","description":"The Id of the corresponding merchant","type":"integer"},"text":{"description":"The text of the corresponding merchant","type":"string"},"nettoAmount":{"format":"double","description":"The total amount for the corresponding merchant","type":"number"},"transactionCount":{"format":"int32","description":"The number of transactions for the corresponding merchant","type":"integer"}}},"Meniga.Component.NetWorth.Models.GetNetWorthRequestModel":{"description":"Request model to get net worth accounts","required":["startDate","endDate"],"type":"object","properties":{"startDate":{"format":"date-time","description":"The inclusive start date (yyyy-MM-dd)","type":"string"},"endDate":{"format":"date-time","description":"The inclusive end date (yyyy-MM-dd)","type":"string"},"useInterpolation":{"description":"A flag indicating if the result should be projected so that the history list contains only one entry per month.\r\nIf entry doesn't exist for a given month we add one with default values","type":"boolean"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Core.DataContract.AccountBalanceHistoryWrapper],Meniga.Runtime.WebApi.Models.Pagination.PaginationMetaModel]":{"description":"A document wrapper for API responses","required":["data","meta"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.DataContract.AccountBalanceHistoryWrapper"}},"meta":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Pagination.PaginationMetaModel","description":"Meta object"}}},"Meniga.Core.DataContract.AccountBalanceHistoryWrapper":{"description":"Holds to balance history per account","type":"object","properties":{"accountId":{"format":"int64","description":"The id of the account","type":"integer"},"accountTypeId":{"format":"int32","description":"The id of the account type","type":"integer"},"accountName":{"description":"The name of the account","type":"string"},"isImport":{"description":"A flag indicating if the account is an import account","type":"boolean"},"isManual":{"description":"A flag indicating if the account is manual","type":"boolean"},"isExcluded":{"description":"A flag indicating if the account is excluded","type":"boolean"},"netWorthType":{"description":"The type of net worth. It is either 'Asset' or 'Liability'.","type":"string"},"currencyCode":{"description":"The currency code of the account","type":"string"},"currentBalance":{"format":"double","description":"The current balance","type":"number"},"history":{"description":"A list of account balance history entries","type":"array","items":{"$ref":"#/definitions/Meniga.Core.DataContract.AccountBalanceHistory"}},"accountTypeCategory":{"$ref":"#/definitions/Meniga.Core.DataContract.AccountTypeCategory","description":"The account type category"},"currentBalanceInUserCurrency":{"format":"double","description":"The current balance in user currency","type":"number"}}},"Meniga.Core.DataContract.AccountBalanceHistory":{"description":"Balance history for a given account","type":"object","properties":{"id":{"format":"int64","type":"integer"},"accountId":{"format":"int64","description":"The Meniga AccountID of the account from which this balance belongs to","type":"integer"},"balance":{"format":"double","description":"Balance at the time when it was updated","type":"number"},"balanceDate":{"format":"date-time","description":"The time at which the balance was recorded","type":"string"},"isDefault":{"description":"Indicates if the entry has been generated with default values. This happens when there is missing months (in the database) \r\nbetween the start and end date ranges sent in by the client.","type":"boolean"},"balanceInUserCurrency":{"format":"double","description":"Balance in the user currency at the time when it was updated","type":"number"}}},"Meniga.Core.DataContract.AccountTypeCategory":{"description":"The account type category (current, savings, loan..)","type":"object","properties":{"id":{"format":"int32","type":"integer"},"name":{"type":"string"},"parentId":{"format":"int32","type":"integer"},"parentName":{"type":"string"}}},"Meniga.Component.NetWorth.Models.GetNetWorthIntervalGroupingRequestModel":{"description":"Request model to get net worth accounts","required":["startDate","endDate","intervalGrouping"],"type":"object","properties":{"startDate":{"format":"date-time","description":"The inclusive start date (yyyy-MM-dd)","type":"string"},"endDate":{"format":"date-time","description":"The inclusive end date (yyyy-MM-dd)","type":"string"},"intervalGrouping":{"description":"An interval enum indicating what balance history entries should be returned. Possible values are \"Daily\", \"Monthly\" and \"Yearly\".\r\nE.g. if \"Daily\" is chosen the last entry for each day for each account will be returned.","enum":["Daily","Monthly","Yearly"],"type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.NetWorth.Models.AccountBalanceHistoryEntryModel]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Component.NetWorth.Models.AccountBalanceHistoryEntryModel","description":"Primary data"}}},"Meniga.Component.NetWorth.Models.AccountBalanceHistoryEntryModel":{"description":"Account balance history entry model","type":"object","properties":{"balance":{"format":"double","description":"The balance of the history entry","type":"number"},"balanceInUserCurrency":{"format":"double","description":"Balance in the user currency at the time when it was updated (used in multi-currency setup)","type":"number"},"balanceDate":{"format":"date-time","description":"The balance date for the history entry","type":"string"},"id":{"format":"int64","description":"The id of the history entry","type":"integer"}}},"Meniga.Component.NetWorth.Models.CreateManualAccountRequestModel":{"description":"A request object containing the information needed to create a manual account for net worth","required":["balance","netWorthType"],"type":"object","properties":{"initialBalance":{"format":"double","description":"The intial balance of the account. Must be a positive number. The service changes it according to the net worth type","type":"number"},"balance":{"format":"double","description":"Current balance of the account. Must be a positive number. The service changes it according to the net worth type","type":"number"},"accountIdentifier":{"description":"Identifier for the account set by the originating bank.\r\nThis identifier is used when getting Account statements.","type":"string"},"displayName":{"description":"The display name of the account","type":"string"},"netWorthType":{"description":"The net worth type, either \"Asset\" or \"Liability\"","type":"string"},"initialBalanceDate":{"format":"date-time","description":"The initial balance date of the account","type":"string"},"currencyCode":{"description":"The currency code of the account. Defaults to the system currency.","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.DataContract.AccountBalanceHistoryWrapper]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.DataContract.AccountBalanceHistoryWrapper","description":"Primary data"}}},"Meniga.Component.NetWorth.Models.UpdateManualAccountRequestModel":{"description":"Model to update manual account","type":"object","properties":{"isExcluded":{"description":"A flag indicating if the manual account should be included or excluded from net worth. If left blank then no changes are made to this flag.","type":"boolean"},"accountName":{"description":"The name of the manual account. If left blank then no changes are made to the name.","type":"string"}}},"Meniga.Component.NetWorth.Models.CreateAccountBalanceHistoryEntryRequestModel":{"description":"Request model to create an account balance history entry","type":"object","properties":{"balance":{"format":"double","description":"The balance of the of the account balance history entry in the currency of the account","type":"number"},"balanceDate":{"format":"date-time","description":"The balance date of the account balance history entry","type":"string"}}},"Meniga.Component.NetWorth.Models.UpdateManualAccountBalanceHistoryEntryRequestModel":{"description":"Model to update manual account balance history entry","type":"object","properties":{"balance":{"format":"double","description":"The balance of the account balance entry","type":"number"},"balanceDate":{"format":"date-time","description":"The date of the account balance entry","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Component.NetWorth.Core.NetWorthTypeEnum]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","enum":["Asset","Liability"],"type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.OrganizationModel[]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.OrganizationModel"}}}},"Meniga.Core.Api.Models.OrganizationModel":{"description":"An organization","type":"object","properties":{"id":{"format":"int32","description":"The Id of the organization","type":"integer"},"name":{"description":"The name of the organization","type":"string"},"altName":{"description":"An alternative name of the organization","type":"string"},"identifier":{"description":"A code that identifies this organization globally, such as Swift code","type":"string"},"orderIndex":{"format":"int32","description":"Used to order accounts for display","type":"integer"},"iconFilename":{"description":"The file path for the icon","type":"string"},"imageDataId":{"format":"int64","description":"The Id of icon file","type":"integer"},"imageData":{"description":"The base64 encoded image data","type":"string"},"realms":{"description":"Realms belonging to this organization","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.OrganizationRealm"}}}},"Meniga.Core.Api.Models.OrganizationRealm":{"description":"A Realm within an organization","type":"object","properties":{"id":{"format":"int32","description":"Id of the realm","type":"integer"},"description":{"description":"Description of the realm","type":"string"},"identifier":{"description":"A code that identifies this realm globally","type":"string"},"authorizationType":{"description":"The authorization type of this realm","enum":["None","External","Internal","ExternalMultifactor"],"type":"string"},"contentPageId":{"format":"int32","description":"The ID of a page in the content admin system to link to as a help page for this realm","type":"integer"},"externalRegistrationUrl":{"description":"The URL where the external registered takes place","type":"string"},"showDuringSignup":{"description":"Indicates that this realm should be offered to end users as a primary bank during the signup process","type":"boolean"}}},"Meniga.Core.Api.Models.PeerComparison.PeerComparisonRequest":{"description":"Request for comparing a user's spending profile with a community of similar users.","type":"object","properties":{"excludeUser":{"description":"If true then the user's statistics are omitted.\r\nDefault value is false.","type":"boolean"},"categoryIds":{"description":"A comma separated list of category IDs that should be compared.","type":"string"},"previousMonths":{"format":"int32","description":"Number of previous months to be compared.\r\nSupported values are 1, 3, 6, and 12.","type":"integer"},"groupCategories":{"description":"If true then the result is aggregated over all given category IDs.\r\nOtherwise, the result is broken down by category.\r\nDefault value is false.","type":"boolean"},"segmentBy":{"description":"A comma separated list of user properties to be used for finding similar users in community.\r\nSupported values are \"age\", \"gender\", \"income\", \"postalcode\", \"numberofkids\", \"numberofcars\", and \"livingspace\".","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.ICollection[Meniga.Core.Api.Models.PeerComparison.PeerComparison]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.PeerComparison.PeerComparison"}}}},"Meniga.Core.Api.Models.PeerComparison.PeerComparison":{"description":"Spending summary over a given period","required":["categoryIds","months","status"],"type":"object","properties":{"categoryIds":{"description":"The IDs of compared categories","type":"array","items":{"format":"int32","type":"integer"}},"months":{"description":"Enumerates the compared months.\r\nEach entry is an ISO 8601 date string (YYYY-MM-DD) for the first day of month.","type":"array","items":{"type":"string"}},"user":{"$ref":"#/definitions/Meniga.Core.Api.Models.PeerComparison.ComparisonItem","description":"User's comparison data"},"community":{"$ref":"#/definitions/Meniga.Core.Api.Models.PeerComparison.ComparisonItem","description":"Community's comparison data"},"status":{"description":"Indicates whether the peer comparison was successful or not.","enum":["Success","UserInfoMissing","CommunityTooSmall","CommunityDataMissing","UserDataMissing","MerchantInfoMissing","CategoryInfoMissing","ExchangeRatesMissing"],"type":"string"},"statusMessage":{"description":"Description of status (optional, culture invariant).","type":"string"}}},"Meniga.Core.Api.Models.PeerComparison.ComparisonItem":{"description":"Spending summary for a single user or a defined segment","required":["transactionAmountAverage","amountSumAverage","transactionCountAverage"],"type":"object","properties":{"transactionAmountAverage":{"format":"double","description":"Average amount spent per transaction","type":"number"},"amountSumAverage":{"format":"double","description":"Average amount per months","type":"number"},"transactionCountAverage":{"format":"double","description":"Average number of transactions per month","type":"number"}}},"Meniga.Core.Api.Models.PeerComparison.TopMerchantsRequest":{"description":"A request for comparing the top merchants of user with the top merchants of a community of similar users.","type":"object","properties":{"limit":{"format":"int32","description":"Number of top merchants (per category)","type":"integer"},"rankBy":{"description":"Rank top merchants by amount or number of visits, see {Meniga.Core.Api.Models.PeerComparison.MerchantRanking}","enum":["Amount","Visits"],"type":"string"},"excludeUser":{"description":"If true then the user's top merchants are omitted.\r\nDefault value is false.","type":"boolean"},"categoryIds":{"description":"A comma separated list of category IDs that should be compared.","type":"string"},"previousMonths":{"format":"int32","description":"Number of previous months to be compared.\r\nSupported values are 1, 3, 6, and 12.","type":"integer"},"groupCategories":{"description":"If true then the result is aggregated over all given category IDs.\r\nOtherwise, the result is broken down by category.\r\nDefault value is false.","type":"boolean"},"segmentBy":{"description":"A comma separated list of user properties to be used for finding similar users in community.\r\nSupported values are \"age\", \"gender\", \"income\", \"postalcode\", \"numberofkids\", \"numberofcars\", and \"livingspace\".","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.ICollection[Meniga.Core.Api.Models.PeerComparison.TopMerchantComparison]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.PeerComparison.TopMerchantComparison"}}}},"Meniga.Core.Api.Models.PeerComparison.TopMerchantComparison":{"description":"Top merchants over a given period","required":["categoryIds","months","status"],"type":"object","properties":{"categoryIds":{"description":"The category IDs that the comparison data refers to","type":"array","items":{"format":"int32","type":"integer"}},"months":{"description":"Enumerates the compared months.\r\nEach entry is an ISO 8601 date string (YYYY-MM-DD) for the first day of month.","type":"array","items":{"type":"string"}},"userMerchants":{"description":"User's comparison data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.PeerComparison.MerchantComparisonItem"}},"communityMerchants":{"description":"Community's comparison data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.PeerComparison.MerchantComparisonItem"}},"status":{"description":"Indicates whether the peer comparison was successful or not.","enum":["Success","UserInfoMissing","CommunityTooSmall","CommunityDataMissing","UserDataMissing","MerchantInfoMissing","CategoryInfoMissing","ExchangeRatesMissing"],"type":"string"},"statusMessage":{"description":"Description of status (optional, culture invariant).","type":"string"}}},"Meniga.Core.Api.Models.PeerComparison.MerchantComparisonItem":{"description":"Top merchants summary for a single user or a defined segment","type":"object","properties":{"id":{"format":"uuid","description":"Merchant's identifier","type":"string"},"name":{"description":"Merchant's name","type":"string"},"rank":{"format":"int32","description":"Merchant's comparison rank","type":"integer"},"amount":{"format":"double","description":"Average amount per month (per user)","type":"number"},"numberOfVisits":{"format":"double","description":"Average number of transactions per month (per user)","type":"number"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.PublicSettings]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.PublicSettings","description":"Primary data"}}},"Meniga.Core.Api.Models.PublicSettings":{"description":"Container for public settings","type":"object","properties":{"defaultCultureName":{"description":"The default culture name","type":"string"},"systemCurrency":{"description":"The system currency","type":"string"},"numberFormat":{"description":"The number format","type":"string"},"currencyFormat":{"description":"The currency format","type":"string"},"currencyRoundOff":{"format":"int32","description":"The currency budget round off","type":"integer"},"currencyDecimalDigits":{"format":"int32","description":"The currency decimal digits","type":"integer"},"currencies":{"description":"The available currencies","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.Currency"}},"currencyGroupSymbol":{"description":"The currency group symbol","type":"string"},"currencyDecimalSymbol":{"description":"The currency decimal symbol","type":"string"}}},"Meniga.Core.Api.Models.Currency":{"description":"Api model for currency information","type":"object","properties":{"id":{"format":"int32","description":"The system id of the currency","type":"integer"},"code":{"description":"The currency code in ISO 4217","type":"string"},"isDefault":{"description":"True if the currency is the default currency of the system. Otherwise, false.","type":"boolean"},"name":{"description":"The name of the currency","type":"string"},"format":{"description":"The number format of the currency","type":"string"},"currencyFormat":{"description":"The display format of the currency","type":"string"},"roundOff":{"format":"int32","description":"The round off of the amount in the currency","type":"integer"},"isUserCurrency":{"description":"True if the currency is applicable as a user currency","type":"boolean"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.PostalCodesModel[]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.PostalCodesModel"}}}},"Meniga.Core.Api.Models.PostalCodesModel":{"description":"A postal codes model","type":"object","properties":{"allAreas":{"description":"A list of all areas connected to the current postal code","type":"array","items":{"type":"string"}},"id":{"format":"int32","description":"A generated Id that uniquely identifies the postal code","type":"integer"},"postalCode":{"description":"The postal code","type":"string"},"filterAreas":{"description":"A list of areas that are available for community comparison for the current postal code","type":"array","items":{"type":"string"}}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.PostalCodeModel]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.PostalCodeModel","description":"Primary data"}}},"Meniga.Core.Api.Models.PostalCodeModel":{"description":"A postal code model","type":"object","properties":{"id":{"format":"int32","description":"A generated Id that uniquely identifies the postal code","type":"integer"},"postalCode":{"description":"The postal code","type":"string"},"filterAreas":{"description":"A list of areas that are available for community comparison for the current postal code","type":"array","items":{"type":"string"}}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.SynchronizationStatusExtended]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.SynchronizationStatusExtended","description":"Primary data"}}},"Meniga.Core.Api.Models.SynchronizationStatusExtended":{"description":"Status of a synchronization session with extended information","type":"object","properties":{"synchronizationStatus":{"$ref":"#/definitions/Meniga.Core.Api.Models.SynchronizationStatus","description":"Current synchronization status"},"hasCompletedSyncSession":{"description":"True if user has a completed synchronization session","type":"boolean"},"isSynchronizationNeeded":{"description":"True if synchronization is needed for the user","type":"boolean"}}},"Meniga.Core.Api.Models.SynchronizationStatus":{"description":"Status of a synchronization session","type":"object","properties":{"syncHistoryId":{"format":"int64","description":"The Id of the synchronization history","type":"integer"},"isSyncDone":{"description":"True if the synchronization session is done","type":"boolean"},"syncSessionStartTime":{"format":"date-time","description":"The synchronization sesstion start time","type":"string"},"realmSyncResponses":{"description":"The realm sync responses","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.RealmSyncStatus"}}}},"Meniga.Core.Api.Models.RealmSyncStatus":{"description":"Synchronization status for a particular Realm","type":"object","properties":{"realmCredentialsId":{"format":"int64","description":"Gets or sets the realm credentials id.","type":"integer"},"realmCredentialsDisplayName":{"description":"The display name for a user's credentials within a realm","type":"string"},"organizationId":{"format":"int64","description":"Identifier of the organization that this Realm belongs to","type":"integer"},"organizationName":{"description":"Name of the organization that this Realm belongs to","type":"string"},"organizationBankCode":{"description":"Bank code identifier of the organization that this Realm belongs to","type":"string"},"accountSyncStatuses":{"description":"An array of sync statuses for each of the accounts the user has in this realm when using particular credentials","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.AccountSyncStatus"}},"authenticationChallenge":{"$ref":"#/definitions/Meniga.Core.Api.Models.AuthenticationChallenge","description":"A challenge to be responded to by the end user, or null if no user response is needed"},"isSyncDone":{"description":"Indicates if the synchronization session is done for this realm or is running in the background.","type":"boolean"}}},"Meniga.Core.Api.Models.AccountSyncStatus":{"description":"Synchronization status of particular account","type":"object","properties":{"accountId":{"format":"int64","description":"Identifier of the account","type":"integer"},"balance":{"format":"double","description":"Balance of the account","type":"number"},"limit":{"format":"double","description":"Limit or overdraft of the account","type":"number"},"transactionsProcessed":{"format":"int32","description":"Total number of transactions that has already been processed during this synchronization","type":"integer"},"totalTransactions":{"format":"int32","description":"Total number of transactions to process during this synchronization session, \r\nor null if the number of transactions is still unknown.","type":"integer"},"startDate":{"format":"date-time","description":"The timestamp when synchronization of this account started, or null if the synchronization of this account has not yet started","type":"string"},"endDate":{"format":"date-time","description":"The timestamp when synchronization of this account completed, or null if the synchronization is not yet completed.","type":"string"},"accountStatus":{"description":"External status of account (AccountStatusExternal in Accounts table). This is how a custom extension data connector can set a status that is returned in StartSynchronization or GetSynchronizationStatus can read.","type":"string"}}},"Meniga.Core.Api.Models.AuthenticationChallenge":{"description":"A challenge to be responded to by the end-user","type":"object","properties":{"requiredParameters":{"description":"Parameters that the end-user needs to enter","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.ParameterDescription"}},"contentType":{"description":"Content type of the challenge","enum":["NONE","TEXT","HTML","JPG","GIF"],"type":"string"},"textChallenge":{"description":"Text challenge to be displayed to the end-user","type":"string"},"binaryChallenge":{"description":"Binary challenge to be displayed to the end-user, encoded as base64","type":"string"},"errorMessage":{"description":"An error message to be displayed to the end-user","type":"string"},"errorMessageCode":{"description":"Name of error message enum value","type":"string"},"userIdentifier":{"description":"Identifier of the end user in the current realm's namespace","type":"string"},"canSave":{"description":"Indicates if parameters can be saved by the system","type":"boolean"},"loginHelp":{"description":"A help content to display to the end user","type":"string"},"realmUserPersonEmail":{"description":"Email address of person associated with realm user, returned in case realm user already exists (ErrorMessage=RealmUserExists)","type":"string"}}},"Meniga.Core.Api.Models.ParameterDescription":{"description":"Description of a parameter that the end user needs to provide","type":"object","properties":{"name":{"description":"Name of the parameter","type":"string"},"displayName":{"description":"Friendly name of the paramter to display to the user","type":"string"},"regularExpression":{"description":"Regular expression to validate the parameter value","type":"string"},"minLength":{"format":"int32","description":"Minimum length of the parameter value","type":"integer"},"maxLength":{"format":"int32","description":"Maximum length of the paramter value","type":"integer"},"isPassword":{"description":"Indicates if the parameter is a password","type":"boolean"},"isHidden":{"description":"Indicates if this parameter is hidden","type":"boolean"},"isDropDown":{"description":"Indicates if the paramter is a dropdown field","type":"boolean"},"dropDownValues":{"description":"Values that the user can select the paramter from if this is a dropdown field","type":"string"},"parentId":{"format":"int32","description":"Parent id of the parameter","type":"integer"},"canSave":{"description":"Indicates if the parameter can be saved","type":"boolean"},"isEncrypted":{"description":"Indicates if the parameter is encrytpted","type":"boolean"},"isIdentity":{"description":"Indicates if this parameter is the one and only identity parameter","type":"boolean"}}},"Meniga.Core.Api.Models.StartSynchronizationRequest":{"description":"Request object for starting synchronization","type":"object","properties":{"waitForCompleteMilliseconds":{"format":"int32","description":"The number of milliseconds to wait before completing the task in the background","type":"integer"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.SynchronizationStatus]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.SynchronizationStatus","description":"Primary data"}}},"Meniga.Core.Api.Models.SkipRealmSyncRequest":{"description":"Request object for skipping realm sync","type":"object","properties":{"realmUserId":{"format":"int64","description":"The Id of the realm user","type":"integer"},"syncHistoryId":{"format":"int64","description":"The Id of the processing entry","type":"integer"}}},"Meniga.Core.Api.Models.SynchronizeFinancialDataRealmRequest":{"description":"Request object for synchronizing financial data realm","type":"object","properties":{"synchronizationHistoryId":{"format":"int64","description":"The Id of the synchronization session history","type":"integer"},"parameters":{"description":"The parameters for the request","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.Parameter"}},"saveDetails":{"description":"True if details should be saved","type":"boolean"},"waitForCompleteMilliseconds":{"format":"int32","description":"The number of milliseconds to wait before completing the task in the background","type":"integer"},"accountIdentifiers":{"description":"Account identifiers to sync.","type":"array","items":{"type":"string"}},"sessionToken":{"description":"A session token delivered by previous calls to this endpoint","type":"string"}}},"Meniga.Core.Api.Models.Parameter":{"description":"A data object for a required parameter in account aggregation.","type":"object","properties":{"name":{"description":"The name of the parameter","type":"string"},"value":{"description":"The value of the parameter","type":"string"},"parameterDescription":{"$ref":"#/definitions/Meniga.Core.Api.Models.ParameterDescription","description":"Description of parameter type and display options"}}},"Meniga.Core.Api.Models.AuthenticateRealmRequest":{"description":"Request object for authenticate financial data realm.","type":"object","properties":{"parameters":{"description":"Parameters for the request.","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.AuthenticationParameter"}},"saveDetails":{"description":"True if details should be saved.","type":"boolean"},"realmUserIdentifier":{"description":"The user identifier for the user in the context of the realm.","type":"string"},"sessionToken":{"description":"A session token delivered by previous calls to this endpoint","type":"string"}}},"Meniga.Core.Api.Models.AuthenticationParameter":{"description":"The authentication parameter object","type":"object","properties":{"name":{"description":"Name of the authentication parameter","type":"string"},"value":{"description":"Value of the authentication parameter","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.AuthenticateRealmResponse]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.AuthenticateRealmResponse","description":"Primary data"}}},"Meniga.Core.Api.Models.AuthenticateRealmResponse":{"description":"A challenge to be responded to by the end-user","type":"object","properties":{"authenticationDone":{"description":"Authentication succeeded and the realmUserId can be used to do work with the authenticated user, such as adding accounts.\r\nIf this is false, more parameters might be required, an error might have occured or a challenge should be displayed to the end user.","type":"boolean"},"requiredParameters":{"description":"The parameters that the end-user needs to enter","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.ParameterDescription"}},"contentType":{"description":"The content type of the challenge","enum":["NONE","TEXT","HTML","JPG","GIF"],"type":"string"},"textChallenge":{"description":"The text challenge to be displayed to the end-user","type":"string"},"binaryChallenge":{"format":"byte","description":"The binary challenge to be displayed to the end-user","type":"string"},"errorMessage":{"description":"An error message to be displayed to the end-user","type":"string"},"errorMessageCode":{"description":"Name of error message enum value","type":"string"},"userIdentifier":{"description":"The identifier of the end user in the current realm's namespace","type":"string"},"realmUserId":{"format":"int64","description":"The Id of the realm user. This is needed when adding accounts.","type":"integer"},"canSave":{"description":"Indicates if parameters can be saved by the system","type":"boolean"},"loginHelp":{"description":"A help content to display to the end user","type":"string"},"sessionToken":{"description":"A session token that can be passed into operations of this endpoint in order to preserve the same backend session","type":"string"},"realmUserPersonEmail":{"description":"Email address of person associated with realm user, returned in case realm user already exists (ErrorMessage=RealmUserExists)","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.AggregationAccountInfo[]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.AggregationAccountInfo"}}}},"Meniga.Core.Api.Models.AggregationAccountInfo":{"description":"Information about the aggregated account","type":"object","properties":{"name":{"description":"The name of the account","type":"string"},"accountIdentifier":{"description":"The unique identifier for the account in this realm","type":"string"},"accountTypeId":{"format":"int32","description":"The type of the account. For details see the GET \"user/v1/accounts/accounttypes\" endpoint.","type":"integer"},"accountExists":{"description":"Indicates if this account has already been added for this user","type":"boolean"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.Tag[]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.Tag"}}}},"Meniga.Core.Api.Models.Tag":{"description":"A tag model","type":"object","properties":{"id":{"format":"int64","description":"The Id of the tag","type":"integer"},"name":{"description":"The name of the tag","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.Tag]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.Tag","description":"Primary data"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Core.Api.Models.Terms.TermsAndConditions]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.Terms.TermsAndConditions"}}}},"Meniga.Core.Api.Models.Terms.TermsAndConditions":{"description":"The non-user related properties of the Terms and conditions model","type":"object","properties":{"creationDate":{"format":"date-time","description":"The time when these terms and conditions were created","type":"string"},"content":{"description":"The content of these terms and conditions","type":"string"},"culture":{"description":"The culture in which these terms and conditions are written in","type":"string"},"termsAndConditionsType":{"$ref":"#/definitions/Meniga.Core.Api.Models.Terms.TermsAndConditionsType","description":"The terms and conditions type"},"acceptanceRequired":{"description":"A flag indicating whether these terms and conditions require user acceptance","type":"boolean"},"termsAndConditionsState":{"description":"An enum indicating which action this user has taken regarding these terms and conditions","enum":["Declined","Accepted","NoInput"],"type":"string"},"modifiedAt":{"format":"date-time","description":"The time when the state of these terms and conditions were modified by the user","type":"string"}}},"Meniga.Core.Api.Models.Terms.TermsAndConditionsType":{"description":"Terms and conditions type","type":"object","properties":{"id":{"format":"int32","description":"The id of the terms and conditions type","type":"integer"},"name":{"description":"The name of the terms and conditions type","type":"string"},"description":{"description":"The description of the terms and conditions type","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Core.Api.Models.Terms.TermsAndConditionsType]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.Terms.TermsAndConditionsType"}}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.Terms.TermsAndConditions]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.Terms.TermsAndConditions","description":"Primary data"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiCompoundDocument[Meniga.Core.Api.Models.TransactionModel[],Meniga.Core.Api.Models.TransactionModelsMetadata,Meniga.Core.Api.Models.TransactionModelsIncludedResources]":{"description":"A document wrapper for API responses which include data from other resources as 'included' along with the primary 'data' and 'meta' data of the response","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionModel"}},"meta":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionModelsMetadata","description":"Meta object"},"included":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionModelsIncludedResources","description":"Included resources of other primary data types that releate to the {!:T} primary data contained in {Meniga.Runtime.WebApi.Models.Common.JsonApiCompoundDocument`3.Data}"}}},"Meniga.Core.Api.Models.TransactionModel":{"description":"A transaction model","type":"object","properties":{"parentIdentifier":{"description":"The Id of the parent transaction","type":"string"},"id":{"format":"int64","description":"The Id of the transaction","type":"integer"},"amount":{"format":"double","description":"The amount of the transaction in user currency","type":"number"},"tags":{"description":"The tags in the transaction","type":"array","items":{"type":"string"}},"comments":{"description":"The comments in the transaction","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionCommentModel"}},"categoryId":{"format":"int32","description":"The Id of the category in the transaction","type":"integer"},"date":{"format":"date-time","description":"The date of the transaction","type":"string"},"text":{"description":"The text of the transaction","type":"string"},"originalDate":{"format":"date-time","description":"The original date if the transaction date is different","type":"string"},"data":{"description":"The raw data that comes with the transaction from the financial data realm","type":"string"},"originalText":{"description":"The original text if the transaction text is different","type":"string"},"originalAmount":{"format":"double","description":"The original amount of this transaction in user currency. Sum of split transactions result in the OriginalAmount.","type":"number"},"isRead":{"description":"Whether or not the transaction has been read","type":"boolean"},"isFlagged":{"description":"Whether or not the transaction has been flagged","type":"boolean"},"hasUncertainCategorization":{"description":"Whether or not the transaction has uncertain categorization","type":"boolean"},"accountId":{"format":"int64","description":"The id of the account of the transaction","type":"integer"},"mcc":{"format":"int32","description":"The merchant category code mapping used when detecting categories","type":"integer"},"detectedCategories":{"description":"A list of detected categories","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.CategoryScore"}},"currency":{"description":"The currency the transaction is in","type":"string"},"amountInCurrency":{"format":"double","description":"The amount in currency for the transaction","type":"number"},"dataFormat":{"format":"int32","description":"The Id of the Meniga.Core.Extensions.ITransactionDataFormatParser used for this transaction","type":"integer"},"merchantId":{"format":"int64","description":"The Id of a Merchant if this transaction was linked to a merchant","type":"integer"},"parsedData":{"description":"Extra fields for this transaction having field names as keys","type":"object"},"accuracy":{"format":"double","description":"Do not use since it will not be populated in future versions","type":"number"},"bankId":{"description":"The bank's unique identifier for the transaction (transaction identifier)","type":"string"},"insertTime":{"format":"date-time","description":"The insert time of the transaction into the Meniga system","type":"string"},"hasUserClearedCategoryUncertainty":{"description":"True if a user has clicked on the OK? button and cleared category uncertainty","type":"boolean"},"isMerchant":{"description":"True if the transaction is associated with a merchant","type":"boolean"},"isOwnAccountTransfer":{"description":"Do not use since it will not be populated in future versions","type":"boolean"},"isUncleared":{"description":"True if the transaction is uncleared","type":"boolean"},"isSplitChild":{"description":"True if this transaction is the result of a split. False if this transaction is the parent of a split. Null if this transaction has never been split.","type":"boolean"},"balance":{"format":"double","description":"Balance of the account after this transaction","type":"number"},"categoryChangedTime":{"format":"date-time","description":"The time when the category was last changed, or null if the category has never been changed by the end user.","type":"string"},"changedByRule":{"format":"int64","description":"Contains Id of a rule that changed this transaction, or null if this transaction has not been modified by a rule","type":"integer"},"changedByRuleTime":{"format":"date-time","description":"The time when the transaction was last changed by a rule, or null if the category has never been changed by a rule.","type":"string"},"counterpartyAccountIdentifier":{"description":"Identifier of a counterparty acccount in the same realm that was transferred from/to during this transaction","type":"string"},"dueDate":{"format":"date-time","description":"The due date when the user needs to pay for this transaction, e.g. when the credit card bill has to be paid for credit card transactions.","type":"string"},"lastModifiedTime":{"format":"date-time","description":"Time when this transaction was last modified","type":"string"},"timestamp":{"format":"date-time","description":"The transaction timestamp","type":"string"},"metaData":{"description":"Holds meta data for the given transaction","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionMetaData"}},"userData":{"description":"Holds extra custom data that is not parsed or read via the transaction data format parser","type":"string"},"bookedAmount":{"format":"double","description":"The original amount of this transaction in account currency","type":"number"},"splitRatio":{"format":"double","description":"The split ratio of the transaction (Amount/OriginalAmount)","type":"number"},"countryCode":{"description":"The country code of the transaction","type":"string"}}},"Meniga.Core.Api.Models.TransactionModelsMetadata":{"description":"Provides 'meta' data for a requests that return TransactionModel(s)","type":"object","properties":{"totalCount":{"format":"int32","description":"The total count of objects available from the endpoint based on the passed in filter","type":"integer"}}},"Meniga.Core.Api.Models.TransactionModelsIncludedResources":{"description":"Provides 'included' resources that link to given TransactionModel(s)","type":"object","properties":{"accounts":{"description":"The Accounts that the Transactions belong to based on Transaction.AccountId","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.AccountModel"}},"merchants":{"description":"The Merchants that the Transactions belong to based on Transaction.MerchantId","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.Merchant"}}}},"Meniga.Core.Api.Models.TransactionCommentModel":{"description":"Transaction comment","type":"object","properties":{"id":{"format":"int64","description":"The Id of the comment","type":"integer"},"personId":{"format":"int64","description":"The Id of the person who created the comment","type":"integer"},"comment":{"description":"The actual comment","type":"string"},"createdDate":{"format":"date-time","description":"The creation date of the comment","type":"string"},"modifiedDate":{"format":"date-time","description":"The modified date of the comment","type":"string"}}},"Meniga.Core.Api.Models.TransactionMetaData":{"description":"Holds meta data for a transaction","type":"object","properties":{"name":{"description":"The name of the meta data","type":"string"},"value":{"description":"The value of the meta data","type":"string"}}},"Meniga.Core.Api.Models.TransactionUpdateModel":{"description":"Transaction update model","type":"object","properties":{"amount":{"format":"double","description":"The updated amount of the transactions. If null, amount will not be updated.","type":"number"},"categoryId":{"format":"int32","description":"The updated category Id for the transactions. If null, category Id will not be updated.","type":"integer"},"hasUncertainCategorization":{"description":"Whether or not the transaction has uncertain categorization","type":"boolean"},"useSubTextInRecat":{"description":"True if automatic categorization should be matched against subtext otherwise it will by default be matched against text","type":"boolean"},"text":{"description":"The updated text of the transaction. If null or empty, text will not be updated.","type":"string"},"date":{"format":"date-time","description":"The updated date of the transactions. If null, date will not be updated.","type":"string"},"isRead":{"description":"Set whether a transaction has been read or not","type":"boolean"},"isFlagged":{"description":"Set whether a transaction should be flagged or not","type":"boolean"},"userData":{"description":"Holds extra custom data that is not parsed or read via the transaction data format parser","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.TransactionModel[]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionModel"}}}},"Meniga.Core.Api.Models.TransactionPostModel":{"description":"The transaction post model object.","required":["text","amount","categoryId"],"type":"object","properties":{"date":{"format":"date-time","description":"The date of the transaction.","type":"string"},"text":{"description":"The text of the transaction. Cannot be null.","type":"string"},"amount":{"format":"double","description":"The amount of the newly created transaction.","type":"number"},"categoryId":{"format":"int32","description":"The category ID of the transaction. Cannot be null.","type":"integer"},"setAsRead":{"description":"Set whether a transaction has been read or not.","type":"boolean"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.TransactionModel]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionModel","description":"Primary data"}}},"Meniga.Core.Api.Models.TransactionSeriesRequest":{"description":"Request to fetch Transaction series","type":"object","properties":{"transactionFilter":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionFilter","description":"A Filter used to filter out the set of transactions which the series are generated from.\r\nNote: Each {Meniga.Core.Api.Models.TransactionSeries} has its own filter which allows for selecting a subset of the transactions queried using this filter.\r\nNote : The PeriodFrom and PeriodTo properties always need to be populated."},"options":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionSeriesOptions","description":"Option object for the Transaction Series List."},"seriesSelectors":{"description":"A list of SeriesRequests each containing its own filter in order to select a subset of the \"main\" set.","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionSeriesSelector"}}}},"Meniga.Core.Api.Models.TransactionFilter":{"description":"A data object used to filter transactions","type":"object","properties":{"accountIds":{"description":"The account IDs to filter by","type":"array","items":{"format":"int64","type":"integer"}},"accountIdentifiers":{"description":"The account identifiers to filter by, {Meniga.Core.Api.Models.AccountModel.AccountIdentifier}","type":"array","items":{"type":"string"}},"counterpartyAccountIdentifiers":{"description":"The counterparty account identifers to filter by","type":"array","items":{"type":"string"}},"categoryIds":{"description":"The category IDs to filter by","type":"array","items":{"format":"int32","type":"integer"}},"categoryTypes":{"description":"The category types to filter by","type":"array","items":{"enum":["Expenses","Income","Savings","Excluded"],"type":"string"}},"onlyUnread":{"description":"Whether or not to only get unread transactions","type":"boolean"},"onlyFlagged":{"description":"Whether or not to only get flagged transactions","type":"boolean"},"onlyUncertain":{"description":"Whether or not to only get transactions with uncertain categorization","type":"boolean"},"onlyUncategorized":{"description":"Whether or not to only get uncategorized transactions","type":"boolean"},"uncertainOrFlagged":{"description":"Whether or not to get uncertain categorization or flagged transactions","type":"boolean"},"hideExcluded":{"description":"Whether or not to hide excluded transactions","type":"boolean"},"insertedBefore":{"format":"date-time","description":"If set, will only return transactions that have insert time before the supplied value","type":"string"},"periodFrom":{"format":"date-time","description":"The inclusive from date (YYYY-MM-DD)","type":"string"},"periodTo":{"format":"date-time","description":"The inclusive end date (YYYY-MM-DD)","type":"string"},"originalPeriodFrom":{"format":"date-time","description":"The inclusive date to search from (the value provided has to be contained within the date interval defined by {Meniga.Core.Api.Models.TransactionFilter.PeriodFrom} and {Meniga.Core.Api.Models.TransactionFilter.PeriodTo})","type":"string"},"originalPeriodTo":{"format":"date-time","description":"The inclusive date to search to (the value provided has to be contained within the date interval defined by {Meniga.Core.Api.Models.TransactionFilter.PeriodFrom} and {Meniga.Core.Api.Models.TransactionFilter.PeriodTo})","type":"string"},"amountFrom":{"format":"double","description":"The amount to search from","type":"number"},"amountTo":{"format":"double","description":"The amount to search to","type":"number"},"searchText":{"description":"A free-form text to filter by that searches through transaction description, merchant name, category name, currency, tags comments and transaction data","type":"string"},"description":{"description":"The transaction description to filter by. If it's null, it will be ignored. But it is possible to search for empty descriptions.","type":"string"},"bankId":{"description":"The Bank Id to filter by. If it's null, it will be ignored.","type":"string"},"currency":{"description":"The transaction currency to filter by. If it's null or empty, it will be ignored.","type":"string"},"comment":{"description":"The transaction comment to filter by. If it's null, it will be ignored. But it is possible to search for empty comments.","type":"string"},"tags":{"description":"The tags to filter by","type":"array","items":{"type":"string"}},"orderBy":{"description":"The order of the returned transactions.","enum":["ByDate","ByText","ByAmount","ByCategory","ByParsedData","ByOriginalDate"],"type":"string"},"parsedDataNameToOrderBy":{"description":"The parsed data parameter to order by when OrderBy == {Meniga.Core.Api.Models.TransactionFilterOrderEnum.ByParsedData}.","type":"string"},"ascendingOrder":{"description":"Whether or not to order the returned transactions in an ascending order","type":"boolean"},"useAbsoluteAmountSearch":{"description":"Whether or not to use absolute amount search. \r\nIf true, AmountFrom = 500 and AmountTo = 1000 searches from -1000 to -500 as well as +500 to + 1000","type":"boolean"},"useAndSearchForTags":{"description":"Whether or not tags are searched with AND or OR.\r\nIf true, tags are searched with AND so the transactions returned will have to contain all the {Meniga.Core.Api.Models.TransactionFilter.Tags}.","type":"boolean"},"useEqualsSearchForBankId":{"description":"Whether or not BankId is searched with EQUALS or LIKE. If true, exact matches are found, otherwise matches that contain the search string for BankId.","type":"boolean"},"useAmountInCurrencySearch":{"description":"DEPRECATED: Use {Meniga.Core.Api.Models.TransactionFilter.UseAmountFields} instead\r\nWhether or not to search for amount in currency instead of amount.","type":"boolean"},"useExactDescription":{"description":"If true, filters by exact (equals) description as opposed to contains (which is the default).","type":"boolean"},"useExactMerchantTexts":{"description":"If true, filters by exact (equals) merchant texts as opposed to contains (which is the default).","type":"boolean"},"useAccentInsensitiveSearch":{"description":"Whether the search performed is accent insensitive or not.","type":"boolean"},"merchantIds":{"description":"The merchant IDs to filter by","type":"array","items":{"format":"int64","type":"integer"}},"excludeMerchantIds":{"description":"The merchant IDs to exclude","type":"array","items":{"format":"int64","type":"integer"}},"merchantTexts":{"description":"The merchant texts to filter by","type":"array","items":{"type":"string"}},"parsedData":{"description":"The transaction data to filter by. The data is filtered with union semantics (OR)\r\nexample: [{\"key\":\"reference\",\"value\":\"ref123\"},{\"key\":\"reference\",\"value\":\"ref124\"}]\r\nwill find transactions with \"ref123\" OR \"ref124\" transaction data.","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.KeyValueModel"}},"useAndSearchForParsedData":{"description":"If true, then all the fields passed as {Meniga.Core.Api.Models.TransactionFilter.ParsedData} will be AND-ed\r\ntogether. If the same key appears more than once then they will be OR-ed together\r\nand AND-ed with the other keys.\r\nIf false, they will be OR-ed together.\r\nExample:\r\nGiven ParsedData: <code>(Key=X,Value=x1),(Key=X,Value=x2),(Key=Y,Value=y1)</code>\r\nWhen true: <code>(X=x1 OR X=x2) AND Y=y1</code>\r\nWhen false: <code>X=x1 OR X=x2 OR Y=y1</code>","type":"boolean"},"parsedDataExactKeys":{"description":"List of keys in parsed data that should only return a match if the value is exactly the same as supplied in ParsedData","type":"array","items":{"type":"string"}},"useParentMerchantIds":{"description":"If set to true, parent and the parents children will be found for each merchant id \r\nprovided in {Meniga.Core.Api.Models.TransactionFilter.MerchantIds} and in {Meniga.Core.Api.Models.TransactionFilter.ExcludeMerchantIds} and they \r\nincluded in the filter. If the merchant has no parent then its children, if any, are added","type":"boolean"},"excludeMerchantTexts":{"description":"The merchant texts to exclude","type":"array","items":{"type":"string"}},"bankIds":{"description":"List of Bankid's to filter by, if this is set it will be used instead of {Meniga.Core.Api.Models.TransactionFilter.BankId}. If it's null, it will be ignored.","type":"array","items":{"type":"string"}},"ids":{"description":"List of transaction id's to filter by","type":"array","items":{"format":"int64","type":"integer"}},"externalMerchantIdentifiers":{"description":"List of external merchant identifiers on transactions","type":"array","items":{"type":"string"}},"merchantConnectorIds":{"description":"List of merchant connector ids.","type":"array","items":{"format":"int64","type":"integer"}},"merchantCategoryCodes":{"description":"List of merchant category codes ( MCC ).","type":"array","items":{"type":"string"}},"descriptions":{"description":"The transaction descriptions to filter by. If it's null or empty, it will be ignored. Searching for empty descriptions is possible.\r\nIf this property is set and is not empty, then the {Meniga.Core.Api.Models.TransactionFilter.Description} property will be ignored regardless of its value.","type":"array","items":{"type":"string"}},"useOriginalDescription":{"description":"If true, filters by the original description (transaction text from bank).","type":"boolean"},"useAmountFields":{"description":"Tells which {Meniga.Core.Api.Models.TransactionModel} amount fields to use when searching using {Meniga.Core.Api.Models.TransactionFilter.AmountFrom}\r\nand {Meniga.Core.Api.Models.TransactionFilter.AmountTo}. However, if {Meniga.Core.Api.Models.TransactionFilter.UseAmountInCurrencySearch} = true then only\r\n{Meniga.Core.Api.Models.TransactionAmountField.AmountInCurrency} is used. If {Meniga.Core.Api.Models.TransactionFilter.UseAmountInCurrencySearch} = false\r\nthen this list is used but if the list is empty then {Meniga.Core.Api.Models.TransactionAmountField.Amount} is used.","type":"array","items":{"enum":["Amount","OriginalAmount","AmountInCurrency","BookedAmount"],"type":"string"}},"sort":{"description":"Decides the order of the returned transactions, defined by a comma separated list of the properties of the Transaction object.\r\nThe sort order for each sort field is ascending unless it is prefixed with a \"-\" in which case it is descending.\r\nIf this string is null or empty then 'OrderBy' is used.\r\n<para>\r\nThe supported Transaction fields are:\r\nAccountId, Accuracy, Amount, AmountInCurrency, Balance,BankId, CategoryChangedTime, CategoryId, Date, DueDate, HasUserClearedCategoryUncertainty, Id,\r\nIsFlagged,IsMerchant, IsOwnAccountTransfer, IsRead, IsSplitChild, IsUncleared, InsertTime, Mcc, MerchantId, ParentIdentifier, Text, Timestamp, CounterpartyAccountIdentifier,\r\nCurrency, HasUncertainCategorization, OriginalAmount, OriginalDate, OriginalText\r\n</para>","type":"string"}}},"Meniga.Core.Api.Models.TransactionSeriesOptions":{"description":"Options of the {Meniga.Core.Api.Models.TransactionSeriesRequest} to control aggregation level, if transaction details should be returned and other request options","type":"object","properties":{"timeResolution":{"description":"Controls the aggregation level over time.","enum":["None","Day","Week","Month","Quarter","Year"],"type":"string"},"overTime":{"description":"Whether or not the series should be over time or just a list containing a single object with the whole period aggregated","type":"boolean"},"includeTransactions":{"description":"Whether or not the tranactions used to generate the series should be returned","type":"boolean"},"includeTransactionIds":{"description":"Whether or not the transactionIds of the transactions used to create the series are returned","type":"boolean"}}},"Meniga.Core.Api.Models.TransactionSeriesSelector":{"description":"A request object used to determine which transactions to use to generate the requested series","type":"object","properties":{"filter":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionFilter","description":"A filter object used to select which set of transactions to use to generate the requested series"}}},"Meniga.Core.Api.Models.KeyValueModel":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiCompoundDocument[Meniga.Core.Api.Models.TransactionSeries[],Meniga.Core.Api.Models.TransactionSeriesIncludedResources]":{"description":"A document wrapper for API responses which include data from other resources as 'included' along with the primary 'data' of the response","required":["data","included"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionSeries"}},"included":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionSeriesIncludedResources","description":"Included resources of other primary data types that releate to the {!:T} primary data contained in {Meniga.Runtime.WebApi.Models.Common.JsonApiCompoundDocument`2.Data}"}}},"Meniga.Core.Api.Models.TransactionSeries":{"description":"Series generated from Transactions. \r\nIf the series were created over time (TimeSerie) then it will have a certain {Meniga.Core.Api.Models.AggregationLevelEnum} (None/Day/Week/Month....). If not over time then whole period is aggregated.","type":"object","properties":{"timeResolution":{"description":"The time resolution of a time serie (None/Day/Week/Month...) - if not over time then default None.","enum":["None","Day","Week","Month","Quarter","Year"],"type":"string"},"statistics":{"$ref":"#/definitions/Meniga.Core.Api.Models.TimeSerieStatistics","description":"Statistics for series over time - Only returned if {Meniga.Core.Api.Models.TransactionSeriesOptions.OverTime} in the {Meniga.Core.Api.Models.TransactionSeriesRequest} is set to true."},"values":{"description":"The values for the TransactionSeries - If {Meniga.Core.Api.Models.TransactionSeriesOptions.OverTime} in the {Meniga.Core.Api.Models.TransactionSeriesRequest} is set to false the list will only contain one object (Aggregated as whole)","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionSeriesData"}},"transactions":{"description":"The set of transactions used to create the series. Only returned if {Meniga.Core.Api.Models.TransactionSeriesOptions.IncludeTransactions} in the {Meniga.Core.Api.Models.TransactionSeriesRequest} is set to true.","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionModel"}},"transactionIds":{"description":"The ids of the set of transactions used to create the series. Only returned if {Meniga.Core.Api.Models.TransactionSeriesOptions.IncludeTransactionIds} in the {Meniga.Core.Api.Models.TransactionSeriesRequest} is set to true.","type":"array","items":{"format":"int64","type":"integer"}}}},"Meniga.Core.Api.Models.TransactionSeriesIncludedResources":{"description":"Provides meta data for endpoints that return TransactionSeries","type":"object","properties":{"accounts":{"description":"The Accounts that the Transactions belong to based on Transaction.AccountId","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.AccountModel"}},"merchants":{"description":"The Merchants that the Transactions belong to based on Transaction.MerchantId","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.Merchant"}}}},"Meniga.Core.Api.Models.TimeSerieStatistics":{"description":"Statistics for TransactionSeries over time (TimeSeries) - if not TimeSerie then default value is null.","type":"object","properties":{"currentMonthTotal":{"format":"double","description":"The total Amount for the current month.","type":"number"},"total":{"format":"double","description":"The total Amount for the whole transaction serie.","type":"number"},"average":{"format":"double","description":"The average amount of a transaction serie data object.","type":"number"}}},"Meniga.Core.Api.Models.TransactionSeriesData":{"description":"The transaction series data object","type":"object","properties":{"nettoAmount":{"format":"double","description":"The amount of the {Meniga.Core.Api.Models.TransactionSeriesData} (period depends on {Meniga.Core.Api.Models.AggregationLevelEnum} in the {Meniga.Core.Api.Models.TransactionSeriesRequest.Options})","type":"number"},"totalPositive":{"format":"double","description":"The income amount of the {Meniga.Core.Api.Models.TransactionSeriesData} (period depends on {Meniga.Core.Api.Models.AggregationLevelEnum} in the {Meniga.Core.Api.Models.TransactionSeriesRequest.Options})","type":"number"},"totalNegative":{"format":"double","description":"The expenses of the {Meniga.Core.Api.Models.TransactionSeriesData} (period depends on {Meniga.Core.Api.Models.AggregationLevelEnum} in the {Meniga.Core.Api.Models.TransactionSeriesRequest.Options})","type":"number"},"date":{"format":"date-time","description":"The objects corresponding date, always the first day of the period (None/Day/Week/Month....)","type":"string"},"transactionIds":{"description":"The Ids of the transactions used to generate the {Meniga.Core.Api.Models.TransactionSeriesData}.","type":"array","items":{"format":"int64","type":"integer"}}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.SearchSuggestion[]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.SearchSuggestion"}}}},"Meniga.Core.Api.Models.SearchSuggestion":{"description":"Data container for search suggestion that matches a particular search text.\r\nA search suggestion can either be a merchant, category or a tag.","type":"object","properties":{"text":{"description":"The text or name of the search suggestion","type":"string"},"id":{"format":"int64","description":"The Id of the search suggestion","type":"integer"},"value":{"description":"The additional value (if applicable) of the search suggestion","type":"string"},"type":{"description":"The type of the search suggestion","enum":["Category","Merchant","Tag","Comment","Currency","Description","ParsedDataField"],"type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiCompoundDocument[Meniga.Core.Api.Models.TransactionModel,Meniga.Core.Api.Models.TransactionModelIncludedResources]":{"description":"A document wrapper for API responses which include data from other resources as 'included' along with the primary 'data' of the response","required":["data","included"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionModel","description":"Primary data"},"included":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionModelIncludedResources","description":"Included resources of other primary data types that releate to the {!:T} primary data contained in {Meniga.Runtime.WebApi.Models.Common.JsonApiCompoundDocument`2.Data}"}}},"Meniga.Core.Api.Models.TransactionModelIncludedResources":{"description":"Provides 'included' resources that link to a given TransactionModel","type":"object","properties":{"account":{"$ref":"#/definitions/Meniga.Core.Api.Models.AccountModel","description":"The Account that the Transaction belongs to based on Transaction.AccountId"},"merchant":{"$ref":"#/definitions/Meniga.Core.Api.Models.Merchant","description":"The Merchant that the Transaction belongs to based on Transaction.MerchantId"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.TransactionModel,Meniga.Core.Api.Models.TransactionModel[]]":{"description":"A document wrapper for API responses","required":["data","meta"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionModel","description":"Primary data"},"meta":{"description":"Meta object","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionModel"}}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiCompoundDocument[Meniga.Core.Api.Models.TransactionModel[],Meniga.Core.Api.Models.TransactionModelIncludedResources]":{"description":"A document wrapper for API responses which include data from other resources as 'included' along with the primary 'data' of the response","required":["data","included"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionModel"}},"included":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionModelIncludedResources","description":"Included resources of other primary data types that releate to the {!:T} primary data contained in {Meniga.Runtime.WebApi.Models.Common.JsonApiCompoundDocument`2.Data}"}}},"Meniga.Core.Api.Models.TransactionSplitRequestModel":{"description":"Transaction split request model","type":"object","properties":{"amount":{"format":"double","description":"The amount for the split transaction","type":"number"},"text":{"description":"The text for the split transaction","type":"string"},"categoryId":{"format":"int32","description":"The Id of the category for the split transaction","type":"integer"},"isFlagged":{"description":"Set whether the split transaction should be flagged or not","type":"boolean"}}},"Meniga.Core.Api.Models.CommentWrapperRequest":{"description":"Comment wrapper request model","type":"object","properties":{"comment":{"description":"The comment text","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.TransactionCommentModel]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionCommentModel","description":"Primary data"}}},"Meniga.Core.Api.Models.TransactionsCommentWrapperRequest":{"description":"The transactions comment wrapper request object","type":"object","properties":{"comment":{"description":"The comment text","type":"string"},"transactionIds":{"description":"List of transaction Ids the comment applies to","type":"array","items":{"format":"int64","type":"integer"}}}},"Meniga.Core.Api.Models.TransactionRecategorizeRequest":{"description":"Transaction recategorize request model","required":["transactionTexts"],"type":"object","properties":{"transactionTexts":{"description":"A list of texts of transactions to recategorize","type":"array","items":{"type":"string"}},"recategorizeUnreadOnly":{"description":"Whether to update only unread transactions","type":"boolean"},"useSubText":{"description":"True if transactionTexts should be matched against subtext otherwise it will by default be matched against text","type":"boolean"},"markAsRead":{"description":"Whether or not to mark recategorized transactions as read","type":"boolean"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.TransactionRule[]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionRule"}}}},"Meniga.Core.Api.Models.TransactionRule":{"description":"Defines a rule to apply on transactions","type":"object","properties":{"id":{"format":"int64","description":"The Id of the transaction rule","type":"integer"},"userId":{"format":"int64","description":"The identifier of the user owning this rule","type":"integer"},"name":{"description":"The user-defined name of the rule","type":"string"},"createdDate":{"format":"date-time","description":"The creation date of this rule","type":"string"},"modifiedDate":{"format":"date-time","description":"The last modification date of this rule","type":"string"},"textCriteria":{"description":"A text criteria to match by this rule, or null if this rule has no text criteria","type":"string"},"textCriteriaOperatorType":{"format":"int32","description":"The type of operator to use when evaluating the {Meniga.Core.Api.Models.TransactionRule.TextCriteria}.\r\nThe possible values are found in {Meniga.Core.BusinessModels.TransactionRuleTextCriteriaOperatorTypeEnum}","type":"integer"},"dateMatchTypeCriteria":{"format":"int32","description":"A date match criteria for this rule (0 = First {Meniga.Core.Api.Models.TransactionRule.DaysLimitCriteria} days in a month, 1 = Last {Meniga.Core.Api.Models.TransactionRule.DaysLimitCriteria} days in a month)","type":"integer"},"daysLimitCriteria":{"format":"int32","description":"The number of days to use when using {Meniga.Core.Api.Models.TransactionRule.DateMatchTypeCriteria} criteria for this rule","type":"integer"},"amountLimitTypeCriteria":{"format":"int32","description":"Amount criteria for this rule (AmountUnder = 0, AmountOver = 1, AmountEqual = 2)","type":"integer"},"amountLimitSignCriteria":{"format":"int32","description":"Amount limit sign criteria for this rule (AmountIncomeOrExpense = 0, AmountExpense = 1, AmountIncome = 2)","type":"integer"},"amountCriteria":{"format":"double","description":"Amount criteria for this rule in user currency","type":"number"},"accountCategoryCriteria":{"description":"A comma seperated list of account category integers that should be matched before applying actions\r\nThe meaning of the integers are as follows (see AccountCategoryEnum): 1 = Current, 2 = Credit, 3 = Savings\r\nExample: AccountCategoryCriteria=\"1,2\" means that this rule should only apply to Current and Credit accounts, not Savings","type":"string"},"acceptAction":{"description":"Accept action for this rule","type":"boolean"},"monthShiftAction":{"format":"int32","description":"Month shift action for this rule","type":"integer"},"removeAction":{"description":"Remove action for this rule","type":"boolean"},"textAction":{"description":"Text action for this rule","type":"string"},"commentAction":{"description":"Comment action for this rule","type":"string"},"tagAction":{"description":"Tag to apply by this rule","type":"string"},"categoryIdAction":{"format":"int32","description":"Categorization to apply by this rule","type":"integer"},"splitActions":{"description":"Split action to perform by this rule","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionRuleSplitAction"}},"flagAction":{"description":"Flag or not flag transactions matching this rule","type":"boolean"}}},"Meniga.Core.Api.Models.TransactionRuleSplitAction":{"description":"Split action to perform on a Transaction rule. Either Ratio or Amount should be set.","type":"object","properties":{"id":{"format":"int64","description":"Id of this split action","type":"integer"},"transactionRuleId":{"format":"int64","description":"Identifier of the corresponding rule","type":"integer"},"ratio":{"format":"double","description":"Split ratio, or null if it should not be split by ratio","type":"number"},"amount":{"format":"double","description":"Split amount in user currency that should be applied by this rule","type":"number"},"categoryId":{"format":"int32","description":"The category in which to put the splitted transaction","type":"integer"}}},"Meniga.Core.Api.Models.TransactionRuleCreateUpdateModel":{"description":"Transaction rule model to create or update","type":"object","properties":{"name":{"description":"The user-defined name of the rule","type":"string"},"textCriteria":{"description":"A text criteria to match by this rule, or null if this rule has no text criteria","type":"string"},"textCriteriaOperatorType":{"format":"int32","description":"The type of operator to use when evaluating the {Meniga.Core.Api.Models.TransactionRuleCreateUpdateModel.TextCriteria}.\r\nThe possible values are found in {Meniga.Core.BusinessModels.TransactionRuleTextCriteriaOperatorTypeEnum}","type":"integer"},"dateMatchTypeCriteria":{"format":"int32","description":"A date match criteria for this rule (0 = First {Meniga.Core.Api.Models.TransactionRuleCreateUpdateModel.DaysLimitCriteria} days in a month, 1 = Last {Meniga.Core.Api.Models.TransactionRuleCreateUpdateModel.DaysLimitCriteria} days in a month)","type":"integer"},"daysLimitCriteria":{"format":"int32","description":"The number of days to use when using {Meniga.Core.Api.Models.TransactionRuleCreateUpdateModel.DateMatchTypeCriteria} criteria for this rule","type":"integer"},"amountLimitTypeCriteria":{"format":"int32","description":"Amount criteria for this rule (AmountUnder = 0, AmountOver = 1, AmountEqual = 2)","type":"integer"},"amountLimitSignCriteria":{"format":"int32","description":"Amount limit sign criteria for this rule (AmountIncomeOrExpense = 0, AmountExpense = 1, AmountIncome = 2)","type":"integer"},"amountCriteria":{"format":"double","description":"Amount criteria for this rule in user currency","type":"number"},"accountCategoryCriteria":{"description":"A comma seperated list of account category integers that should be matched before applying actions\r\nThe meaning of the integers are as follows (see AccountCategoryEnum): 1 = Current, 2 = Credit, 3 = Savings\r\nExample: AccountCategoryCriteria=\"1,2\" means that this rule should only apply to Current and Credit accounts, not Savings","type":"string"},"acceptAction":{"description":"Accept action for this rule","type":"boolean"},"monthShiftAction":{"format":"int32","description":"Month shift action for this rule","type":"integer"},"removeAction":{"description":"Remove action for this rule","type":"boolean"},"textAction":{"description":"Text action for this rule","type":"string"},"commentAction":{"description":"Comment action for this rule","type":"string"},"categoryIdAction":{"format":"int32","description":"Categorization to apply by this rule","type":"integer"},"splitActions":{"description":"Split action to perform by this rule","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionRuleSplitAction"}},"flagAction":{"description":"Flag or not flag transactions matching this rule","type":"boolean"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.TransactionRule]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.TransactionRule","description":"Primary data"}}},"Meniga.Runtime.Api.Models.TranslationsRequest":{"type":"object","properties":{"context":{"description":"The resource context","type":"string"},"culture":{"description":"WARNING: This has been deprecated. Please use Accept-Language HTTP header instead.\r\nThe resource culture","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Runtime.Api.Models.KeyValue[]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Runtime.Api.Models.KeyValue"}}}},"Meniga.Runtime.Api.Models.KeyValue":{"type":"object","properties":{"key":{"type":"string"},"value":{"type":"string"}}},"Meniga.Runtime.Api.Models.TranslationsContextRequest":{"type":"object","properties":{"key":{"description":"The resource key","type":"string"},"context":{"description":"The resource context","type":"string"},"culture":{"description":"WARNING: This has been deprecated. Please use Accept-Language HTTP header instead.\r\nThe resource culture","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Runtime.Api.Models.CultureLanguage[]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Runtime.Api.Models.CultureLanguage"}}}},"Meniga.Runtime.Api.Models.CultureLanguage":{"type":"object","properties":{"id":{"format":"int32","description":"Gets or sets the id.","type":"integer"},"name":{"description":"Gets or sets the name.","type":"string"},"culture":{"description":"Gets or sets the culture.","type":"string"}}},"Meniga.Upcoming.Api.Models.GetUpcomingsRequestModel":{"description":"Request object to get upcoming transaction","required":["dateFrom","dateTo"],"type":"object","properties":{"dateFrom":{"format":"date-time","description":"The inclusive start date of the entries to be fetched","type":"string"},"dateTo":{"format":"date-time","description":"The inclusive end date of the entries to be fetched","type":"string"},"accountIds":{"description":"A comma separate string of account Ids to filter by. If empty, includes all accounts.","type":"string"},"includeDetails":{"description":"A flag indicating if details should be fetched and assigned to the Details property in the response or not","type":"boolean"},"watchedOnly":{"description":"A flag indicating if only watched upcoming transactions should be fetched or not","type":"boolean"},"recurringPatternId":{"format":"int64","description":"Include only the upcoming transactions with this recurring pattern Id","type":"integer"},"paymentStatus":{"description":"Optional filter for PaymentStatus, can be one, or a combination of the following values: \"Open\", \"Paid\" or \"OnHold\" separated by a comma.","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Upcoming.Api.Models.UpcomingModel[],Meniga.Runtime.WebApi.Models.Pagination.PaginationMetaModel]":{"description":"A document wrapper for API responses","required":["data","meta"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.UpcomingModel"}},"meta":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Pagination.PaginationMetaModel","description":"Meta object"}}},"Meniga.Upcoming.Api.Models.UpcomingModel":{"description":"Upcoming transaction model","type":"object","properties":{"id":{"format":"int64","description":"The id of the upcoming transaction","type":"integer"},"bankReference":{"description":"An identifier that connects invoices to scheduled payments to transactions in the external system","type":"string"},"text":{"description":"A human readable text that is displayed to the end user as the title or subject of the upcoming transaction","type":"string"},"amount":{"format":"double","description":"The amount of the upcoming transaction in system/user currency","type":"number"},"amountInCurrency":{"format":"double","description":"The amount for the upcoming transaction in the currency of the \"CurrencyCode\"","type":"number"},"currencyCode":{"description":"The ISO 4217 currency code of the \"AmountInCurrency\"","type":"string"},"date":{"format":"date-time","description":"The expected booking/payment date of the upcoming transaction","type":"string"},"paymentStatus":{"description":"The payment status of the upcoming {Meniga.Upcoming.Api.Models.PaymentStatusEnumModel}","enum":["Open","Paid","OnHold"],"type":"string"},"isFlagged":{"description":"True if the upcoming transaction is flagged by the user","type":"boolean"},"isWatched":{"description":"True if the upcoming transaction added to the watched list","type":"boolean"},"accountId":{"format":"int64","description":"The id of the account that the upcoming transaction is expected to be booked from","type":"integer"},"transactionId":{"format":"int64","description":"The id of the actual transaction once booked","type":"integer"},"invoiceId":{"format":"int64","description":"The id of the invoice this upcoming transaction is based on","type":"integer"},"scheduledPaymentId":{"format":"int64","description":"The id of the scheduled payment this upcoming transaction is based on","type":"integer"},"categoryId":{"format":"int64","description":"The id of the category this upcoming transaction has been categorized as","type":"integer"},"recurringPattern":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.RecurringPatternModel","description":"The recurring pattern this upcoming transaction was created from"},"comments":{"description":"A list of comments related to the upcoming transaction","type":"array","items":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.CommentModel"}},"reconcileScores":{"description":"A list of possible reconcile matches","type":"array","items":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.UpcomingReconcileScore"}},"details":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.DetailsModel","description":"Details of the upcoming transaction. Only set when explicitly requested for"}}},"Meniga.Upcoming.Api.Models.RecurringPatternModel":{"description":"Upcoming recurring pattern model","type":"object","properties":{"id":{"format":"int64","description":"The id of the upcoming transaction recurring pattern","type":"integer"},"text":{"description":"The transaction text for the pattern","type":"string"},"amountInCurrency":{"format":"double","description":"The amount of the upcoming transaction in the currency of CurrencyCode","type":"number"},"currencyCode":{"description":"The currency of the pattern","type":"string"},"categoryId":{"format":"int32","description":"The id of the category of the recurring pattern","type":"integer"},"accountId":{"format":"int64","description":"The id of the account of the recurring pattern","type":"integer"},"pattern":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.CronExpressionModel","description":"A repeat pattern (Cron expression)"},"repeatUntil":{"format":"date-time","description":"Indicates when the pattern finishes repeating.","type":"string"},"isWatched":{"description":"Indicates whether the patterns transactions are to be watched","type":"boolean"},"isFlagged":{"description":"Indicates whether the patterns transactions are to be flagged","type":"boolean"},"type":{"description":"The recurring type","enum":["Unknown","Detected","Manual","ScheduledPayment"],"type":"string"},"status":{"description":"The recurring status","enum":["Unknown","Suggested","Accepted","Rejected"],"type":"string"}}},"Meniga.Upcoming.Api.Models.CommentModel":{"description":"Upcoming transaction comment","type":"object","properties":{"created":{"format":"date-time","description":"The created date of the upcoming transaction comment","type":"string"},"comment":{"description":"The upcoming transaction comment","type":"string"}}},"Meniga.Upcoming.Api.Models.UpcomingReconcileScore":{"type":"object","properties":{"upcomingId":{"format":"int64","description":"The id of the suggested upcoming match","type":"integer"},"transactionId":{"format":"int64","description":"The id of the suggested transaction match","type":"integer"},"confidenceScore":{"format":"double","description":"The confidence score as calculated by the machine learning algorithm","type":"number"},"isConfirmed":{"description":"A flag indicating whether the user has confirmed this match","type":"boolean"}}},"Meniga.Upcoming.Api.Models.DetailsModel":{"description":"Represents all types of upcoming details such as invoices and scheduled payments in one model","type":"object","properties":{"invoice":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.InvoiceModel","description":"The model for the invoice"},"scheduledPayment":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.ScheduledPaymentModel","description":"The model for the scheduled payment"}}},"Meniga.Upcoming.Api.Models.CronExpressionModel":{"description":"An object used for setting the different fields of a cron expression","type":"object","properties":{"dayOfMonth":{"description":"The day-of-month field of the cron expression. If null, the wildcard character * is assumed\r\nAllowed values: null, 1-31","type":"string"},"dayOfMonthInterval":{"format":"int32","description":"The interval field for the day-of-month in the cron expression. Used in conjunction with DayOfMonth.\r\nIf null, the specified DayOfMonth is assumed.\r\nAllowed values: null, 0-N","type":"integer"},"month":{"description":"The month field of the cron expression. If null, the wildcard character * is assumed\r\nAllowed values: null, 1-12","type":"string"},"monthInterval":{"format":"int32","description":"The interval field for the month in the cron expression. Used in conjunction with Month.\r\nIf null, the specified month is assumed\r\nAllowed values: null, 0-N","type":"integer"},"dayOfWeek":{"description":"The day-of-week field of the cron expression. If null, the wildcard character * is assumed.\r\nAllowed values: null, 0-6 where 0 = Sunday","enum":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"type":"string"},"dayOfWeekInterval":{"format":"int32","description":"The interval field for the day-of-week in the cron expression. Used in conjunction with DayOfWeek.\r\nIf null, the specified DayOfWeek is assumed\r\nAllowed values: null, 0-N","type":"integer"},"weekOfYear":{"format":"int32","description":"The week-of-year field of the cron expression.\r\nThe server will calculate the correct week of year from this field, according to ISO8601 specification.\r\nIf null, the wildcard character * is assumed\r\nAllowed values: null or any valid date value","type":"integer"},"weekInterval":{"format":"int32","description":"The interval field for the week-of-year in the cron expression. Used in conjunction with WeekOfYear.\r\nIf null, the specified WeekOfYear is assumed\r\nAllowed values: null, 0-N","type":"integer"}}},"Meniga.Upcoming.Api.Models.InvoiceModel":{"description":"A model for an invoice","type":"object","properties":{"id":{"format":"int64","description":"The id set by the Meniga System to identify the instance","type":"integer"},"identifier":{"description":"The identifier that uniquely identifies this entry in the external system","type":"string"},"bankReference":{"description":"An identifier that connects invoices to scheduled payments to transactions in the external system","type":"string"},"invoiceText":{"description":"A human readable text that is displayed to the end user as the title or the subject of the invoice","type":"string"},"amountInCurrency":{"format":"double","description":"The absolute amount of the invoice in the currency defined in \"CurrencyCode\", excluding fee and VAT","type":"number"},"feeAmount":{"format":"double","description":"The absolute fee of the invoice","type":"number"},"vatAmount":{"format":"double","description":"The absolute VAT of the invoice","type":"number"},"currencyCode":{"description":"The ISO 4217 currency code of the amounts (AmountInCurrency, FeeAmount, VatAmount)","type":"string"},"issuedDate":{"format":"date-time","description":"The date when the invoice was issued/created in the external system","type":"string"},"dueDate":{"format":"date-time","description":"The date when the invoice is due to be paid","type":"string"},"finalDueDate":{"format":"date-time","description":"The last date before any late fees will be applied to the invoice","type":"string"},"bookingDate":{"format":"date-time","description":"The date when this invoice was paid/booked","type":"string"},"paymentStatus":{"description":"The payment status of the upcoming {Meniga.Upcoming.Api.Models.PaymentStatusEnumModel}","enum":["Open","Paid","OnHold"],"type":"string"},"parsedData":{"description":"The custom data parsed into a dictionary of key-values","type":"object","additionalProperties":{"type":"string"}},"isReceivable":{"description":"True if invoice is account receivable, false if invoice is account payable","type":"boolean"},"issuerName":{"description":"The name of the issuer of the invoice","type":"string"},"issuerIdentifier":{"description":"The identifier that uniquely identifies the issuer of this invoice in the external system","type":"string"},"issuerAccIdentifier":{"description":"The identifier that uniquely identifies the issuer's account that this invoice should be paid from/into in the external system","type":"string"},"issuerReferenceText":{"description":"The internal reference text used by the issuer","type":"string"},"counterpartyName":{"description":"The name of the counterparty or institution entering into an financial contract","type":"string"},"counterpartyIdentifier":{"description":"The counterparty from the issuer point of view. Identifier that uniquely identifies the party that this invoice was issued to","type":"string"},"counterpartyAccIdentifier":{"description":"The identifier that uniquely identifies the counterparty's account that this invoice should be paid from/into in the external system","type":"string"},"counterpartyReferenceText":{"description":"The internal reference text used by the counterparty","type":"string"}}},"Meniga.Upcoming.Api.Models.ScheduledPaymentModel":{"description":"A model for a scheduled payment","type":"object","properties":{"id":{"format":"int64","description":"The id of the scheduled payment","type":"integer"},"identifier":{"description":"The identifier that uniquely identifies this entry in the external system","type":"string"},"bankReference":{"description":"An identifier that connects invoices to scheduled payments to transactions in the external system","type":"string"},"paymentText":{"description":"A human readable text that is displayed to the end user as the title or the subject of the scheduled payment","type":"string"},"referenceText":{"description":"A free form text from the external system","type":"string"},"amountInCurrency":{"format":"double","description":"The absolute amount of the scheduled payment in the currency defined in \"CurrencyCode\"","type":"number"},"currencyCode":{"description":"The ISO 4217 currency code of the \"AmountInCurrency\"","type":"string"},"issuedDate":{"format":"date-time","description":"The date when the scheduled payment was issued/created in the external system","type":"string"},"dueDate":{"format":"date-time","description":"The date when the scheduled payment is due to be paid","type":"string"},"bookingDate":{"format":"date-time","description":"The date when this scheduled payment was paid/booked","type":"string"},"paymentStatus":{"description":"The payment status of the upcoming {Meniga.Upcoming.Api.Models.PaymentStatusEnumModel}","enum":["Open","Paid","OnHold"],"type":"string"},"parsedData":{"description":"The custom data parsed into a dictionary of key-values","type":"object","additionalProperties":{"type":"string"}},"isReceivable":{"description":"True if scheduled payment is a collection and false is it is payment","type":"boolean"},"sourceAccIdentifier":{"description":"The account identifier that uniquely identifies the withdrawal account in the external system that this scheduled payment should be paid from","type":"string"},"destinationAccIdentifier":{"description":"The account identifier that uniquely identifies the destination account in external system that the scheduled payment should be paid to","type":"string"}}},"Meniga.Upcoming.Api.Models.CreateUpcomingRequestModel":{"description":"Request object to create upcoming transaction","required":["text","amountInCurrency","currencyCode","date"],"type":"object","properties":{"text":{"description":"The text of the upcoming transaction","type":"string"},"amountInCurrency":{"format":"double","description":"The amount of the upcoming transaction in the currency of CurrencyCode","type":"number"},"currencyCode":{"description":"The currency code for the upcoming transaction in ISO 4217","type":"string"},"date":{"format":"date-time","description":"Expected date of transaction","type":"string"},"accountId":{"format":"int64","description":"The Id of the account that is connected to the upcoming transaction","type":"integer"},"categoryId":{"format":"int32","description":"The Id of the category that is connected to the upcoming transaction","type":"integer"},"isFlagged":{"description":"True if the upcoming transaction is flagged by the user","type":"boolean"},"isWatched":{"description":"True if the upcoming transaction is added to the watched list","type":"boolean"},"recurringPattern":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.CreateRecurringPatternRequestModel","description":"The recurring pattern of the upcoming transaction"}}},"Meniga.Upcoming.Api.Models.CreateRecurringPatternRequestModel":{"description":"Upcoming recurring pattern creation","type":"object","properties":{"pattern":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.CronExpressionRequestModel","description":"An object containing fields for constructing a pattern"},"repeatUntil":{"format":"date-time","description":"Indicates when the pattern finishes repeating","type":"string"}}},"Meniga.Upcoming.Api.Models.CronExpressionRequestModel":{"description":"An object used for setting the different fields of a cron expression","type":"object","properties":{"dayOfMonth":{"description":"The day-of-month field of the cron expression. If null, the wildcard character * is assumed\r\nAllowed values: null, 1-31","type":"string"},"dayOfMonthInterval":{"format":"int32","description":"The interval field for the day-of-month in the cron expression. Used in conjunction with DayOfMonth.\r\nIf null, the specified DayOfMonth is assumed.\r\nAllowed values: null, 0-N","type":"integer"},"month":{"description":"The month field of the cron expression. If null, the wildcard character * is assumed\r\nAllowed values: null, 1-12","type":"string"},"monthInterval":{"format":"int32","description":"The interval field for the month in the cron expression. Used in conjunction with Month.\r\nIf null, the specified month is assumed\r\nAllowed values: null, 0-N","type":"integer"},"dayOfWeek":{"description":"The day-of-week field of the cron expression. If null, the wildcard character * is assumed.\r\nAllowed values: null, 0-6 where 0 = Sunday","enum":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"type":"string"},"dayOfWeekInterval":{"format":"int32","description":"The interval field for the day-of-week in the cron expression. Used in conjunction with DayOfWeek.\r\nIf null, the specified DayOfWeek is assumed\r\nAllowed values: null, 0-N","type":"integer"},"weekOfYear":{"format":"date-time","description":"The week-of-year field of the cron expression.\r\nThe server will calculate the correct week of year from this field, according to ISO8601 specification.\r\nIf null, the wildcard character * is assumed\r\nAllowed values: null or any valid date value","type":"string"},"weekInterval":{"format":"int32","description":"The interval field for the week-of-year in the cron expression. Used in conjunction with WeekOfYear.\r\nIf null, the specified WeekOfYear is assumed\r\nAllowed values: null, 0-N","type":"integer"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Upcoming.Api.Models.UpcomingModel]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.UpcomingModel"}}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Upcoming.Api.Models.UpcomingModel]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.UpcomingModel","description":"Primary data"}}},"Meniga.Upcoming.Api.Models.UpdateUpcomingRequestModel":{"description":"Request object to update upcoming transaction","required":["text","amountInCurrency","currencyCode","date","paymentStatus"],"type":"object","properties":{"text":{"description":"The text of the upcoming transaction","type":"string"},"amountInCurrency":{"format":"double","description":"The amount of the upcoming transaction in the currency of CurrencyCode","type":"number"},"currencyCode":{"description":"The currency code for the upcoming transaction in ISO 4217","type":"string"},"date":{"format":"date-time","description":"The date of the upcoming transaction","type":"string"},"paymentStatus":{"description":"The payment status of the upcoming transaction. Valid values are \"Open\", \"OnHold\" or \"Paid\"","enum":["Open","Paid","OnHold"],"type":"string"},"accountId":{"format":"int64","description":"The Id of the account that is connected to the upcoming transaction","type":"integer"},"categoryId":{"format":"int32","description":"The Id of the category that is connected to the upcoming transaction","type":"integer"},"transactionId":{"format":"int64","description":"The Id of the transaction that is connected to the upcoming. If set the payment status will be set to 'Paid'.","type":"integer"},"isFlagged":{"description":"True if the upcoming transaction is flagged by the user","type":"boolean"},"isWatched":{"description":"True if the upcoming transaction added to the watched list","type":"boolean"},"recurringPattern":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.UpdateRecurringPatternRequestModel","description":"The recurring pattern of the upcoming transaction"}}},"Meniga.Upcoming.Api.Models.UpdateRecurringPatternRequestModel":{"description":"Request object to update recurring pattern of an upcoming transaction","required":["status"],"type":"object","properties":{"pattern":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.CronExpressionRequestModel","description":"An object containing fields for constructing a pattern"},"repeatUntil":{"format":"date-time","description":"Indicates when the pattern finishes repeating","type":"string"},"status":{"description":"The recurring status - 0 = Unknown, 1 = Suggested, 2 = Accepted, 3 = Rejected, 4 = Deleted","enum":["Unknown","Suggested","Accepted","Rejected"],"type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Upcoming.Api.Models.RecurringPatternModel]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.RecurringPatternModel","description":"Primary data"}}},"Meniga.Upcoming.Api.Models.GetRecurringRequestModel":{"description":"Get recurring request model","type":"object","properties":{"statuses":{"description":"A comma separate string of recurring statuses (Unknown, Suggested, Accepted, Rejected). If empty, includes all.","type":"string"},"types":{"description":"A comma separate string of recurring types (Unknown, Detected, Manual). If empty, includes all.","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Upcoming.Api.Models.RecurringPatternModel],Meniga.Runtime.WebApi.Models.Pagination.PaginationMetaModel]":{"description":"A document wrapper for API responses","required":["data","meta"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.RecurringPatternModel"}},"meta":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Pagination.PaginationMetaModel","description":"Meta object"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Upcoming.Api.Models.CommentModel]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.CommentModel","description":"Primary data"}}},"Meniga.Upcoming.Api.Models.GetBalancesRequestModel":{"description":"Request object to get upcoming balance","required":["dateTo"],"type":"object","properties":{"dateTo":{"format":"date-time","description":"The inclusive end date of the entries to be fetched","type":"string"},"includeOverdueFromDate":{"format":"date-time","description":"When set the open upcoming transactions from this date (inclusive) are projected to today's balance","type":"string"},"accountIds":{"description":"A comma separate string of account Ids to filter by. If empty, the included accounts listed in the \"GET /user/v1/upcoming/accounts/included\" endpoint will be used.","type":"string"},"includeUnlinked":{"description":"Indicate if upcomings that are not linked to any account should be included","type":"boolean"},"useAvailableAmount":{"description":"Indicate if the amount of accounts should be the available amount or the real amount (not taking the limit into consideration)","type":"boolean"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Upcoming.Api.Models.BalanceModel]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.BalanceModel","description":"Primary data"}}},"Meniga.Upcoming.Api.Models.BalanceModel":{"description":"Upcoming balance model","type":"object","properties":{"startBalance":{"format":"double","description":"The current balance of accounts in the balance projection","type":"number"},"endBalance":{"format":"double","description":"The projected end balance for the requested period","type":"number"},"todaysTransactionsAmount":{"format":"double","description":"!!! DEPRECATED !!!","type":"number"},"currency":{"description":"The currency of the balance projection","type":"string"},"balanceDates":{"description":"A list of dates and their predicted balances","type":"array","items":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.BalanceDateModel"}}}},"Meniga.Upcoming.Api.Models.BalanceDateModel":{"description":"Upcoming transaction balance date model","type":"object","properties":{"date":{"format":"date-time","description":"The date of a specific entry","type":"string"},"endOfDayBalance":{"format":"double","description":"The start balance + income - expenses","type":"number"},"income":{"format":"double","description":"The upcoming income total for that day","type":"number"},"expenses":{"format":"double","description":"The total upcoming expenses for that day","type":"number"}}},"Meniga.Upcoming.Api.Models.ThresholdSetGetRequestModel":{"description":"Filter for getting threshold sets","type":"object","properties":{"accountIds":{"description":"A comma separate string of account ids to filter by. If empty, returns all.","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Upcoming.Api.Models.ThresholdSetModel]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.ThresholdSetModel"}}}},"Meniga.Upcoming.Api.Models.ThresholdSetModel":{"description":"The thresholds set model","type":"object","properties":{"id":{"format":"int64","description":"The id of the threshold set","type":"integer"},"lowerThresholds":{"description":"A collection of lower thresholds for the threshold set in the currency of \"CurrencyCode\"","type":"array","items":{"format":"double","type":"number"}},"upperThresholds":{"description":"A collection of upper thresholds for the threshold set in the currency of \"CurrencyCode\"","type":"array","items":{"format":"double","type":"number"}},"accountIds":{"description":"A collection of account ids for which the threshold set is valid","type":"array","items":{"format":"int64","type":"integer"}},"currencyCode":{"description":"The currency of the threshold set's threshold values. If all associated accounts are in the same currency then that currency is used. If the account currencies are different the user currency is used.","type":"string"}}},"Meniga.Upcoming.Api.Models.ThresholdSetRequestModel":{"description":"Model to create a threshold set","required":["accountIds"],"type":"object","properties":{"lowerThresholds":{"description":"A collection of lower thresholds for the threshold set in the currency of \"CurrencyCode\"","type":"array","items":{"format":"double","type":"number"}},"upperThresholds":{"description":"A collection of upper thresholds for the threshold set in the currency of \"CurrencyCode\"","type":"array","items":{"format":"double","type":"number"}},"accountIds":{"description":"A collection of account ids for which the thresholds set is valid","type":"array","items":{"format":"int64","type":"integer"}}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Upcoming.Api.Models.ThresholdSetModel]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.ThresholdSetModel","description":"Primary data"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Upcoming.Api.Models.AccountIdWrapperModel]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.AccountIdWrapperModel","description":"Primary data"}}},"Meniga.Upcoming.Api.Models.AccountIdWrapperModel":{"description":"Information about the default account","required":["accountId"],"type":"object","properties":{"accountId":{"format":"int64","description":"The id of the account","type":"integer"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.List[Meniga.Upcoming.Api.Models.AccountIdsWrapperModel]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Upcoming.Api.Models.AccountIdsWrapperModel"}}}},"Meniga.Upcoming.Api.Models.AccountIdsWrapperModel":{"description":"A wrapper class for a list of account ids","type":"object","properties":{"accountIds":{"description":"A list of account ids","type":"array","items":{"format":"int64","type":"integer"}}}},"Meniga.Core.Api.Models.UserEvents.UserEventsFilter":{"description":"The user events filter object","type":"object","properties":{"dateFrom":{"format":"date-time","description":"The inclusive from date (YYYY-MM-DD)","type":"string"},"dateTo":{"format":"date-time","description":"The inclusive to date (YYYY-MM-DD)","type":"string"},"topicName":{"description":"Filter user events by topic name","type":"string"},"typeIdentifiers":{"description":"Filter user events by type identifiers. Either a single value or a comma separated list.","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Core.Api.Models.UserEvents.UserEventsModel]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.UserEvents.UserEventsModel"}}}},"Meniga.Core.Api.Models.UserEvents.UserEventsModel":{"description":"The user events model","type":"object","properties":{"id":{"format":"int64","description":"The id of the user event","type":"integer"},"date":{"format":"date-time","description":"The creation date of the user event","type":"string"},"topicId":{"description":"A list of topic ids that are connected to the user events. The value is based on the type i.e. for transactions topic id would contain a transaction id","type":"array","items":{"format":"int64","type":"integer"}},"userEventTypeId":{"format":"int64","description":"The type of user event","type":"integer"},"eventTypeIdentifier":{"description":"The identifier for the user event type","type":"string"},"dataItem":{"description":"Contains a key/value collection of user event data","type":"object","additionalProperties":{"type":"object"}},"segmentId":{"format":"int64","description":"Holds the segment id if the user events was created for a group of users","type":"integer"},"topicName":{"description":"Name of the topic i.e. Transactions, Accounts etc","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.UserEvents.Core.Models.UserEventModel]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.UserEvents.Core.Models.UserEventModel","description":"Primary data"}}},"Meniga.Core.UserEvents.Core.Models.UserEventModel":{"type":"object","properties":{"id":{"format":"int64","type":"integer"},"date":{"format":"date-time","type":"string"},"userEventDataSerialized":{"type":"string"},"userEventData":{"$ref":"#/definitions/Meniga.Core.UserEvents.Core.Models.UserEventDataModel"},"conditionalUserContentDataSerialized":{"description":"Serialized user content data linked to this user event. Most likely it is null since it only contains value if we are using other resource strings than the default ones","type":"string"},"userEventContentData":{"$ref":"#/definitions/Meniga.Core.UserEvents.BusinessModels.UserEventContentData","description":"Deserialized user event content containing either the conditional data or the default data"},"eventTypeIdentifier":{"type":"string"},"body":{"type":"string"},"actionText":{"type":"string"},"title":{"type":"string"},"displayColor":{"type":"string"},"displayIconIdentifier":{"type":"string"},"userEventTypeId":{"format":"int32","type":"integer"},"topicId":{"type":"array","items":{"format":"int64","type":"integer"}},"topicName":{"type":"string"},"channelId":{"format":"int64","type":"integer"},"isDynamic":{"type":"boolean"},"userId":{"format":"int64","type":"integer"},"exclude":{"description":"True if the event should be excluded","type":"boolean"},"segmentId":{"format":"int64","type":"integer"},"dataItem":{"type":"object","additionalProperties":{"type":"object"}},"templateId":{"format":"int32","description":"The user event template id","type":"integer"},"isGrouped":{"type":"boolean"}}},"Meniga.Core.UserEvents.Core.Models.UserEventDataModel":{"description":"Container for all the properties all user events can have","type":"object","properties":{"displayIconIdentifier":{"type":"string"},"availableAmount":{"format":"double","type":"number"},"accountId":{"format":"int64","type":"integer"},"accountName":{"type":"string"},"startDate":{"format":"date-time","type":"string"},"endDate":{"format":"date-time","type":"string"}}},"Meniga.Core.UserEvents.BusinessModels.UserEventContentData":{"description":"The content data for the user event.","type":"object","properties":{"actionTextResourceKey":{"description":"The resource key for the action text.","type":"string"},"bodyResourceKey":{"description":"The resource key for the body text.","type":"string"},"titleResourceKey":{"description":"The resource key for the title text.","type":"string"},"resourceIdentifier":{"description":"The resource identifier used to populate resource keys for the user event content","type":"string"}}},"Meniga.Core.Api.Models.UserEvents.SubscriptionRequest":{"description":"The subscribe request model","required":["isSubscribed","channelName","userEventTypeIdentifiers"],"type":"object","properties":{"isSubscribed":{"description":"True if user should be subscribed, otherwise false.","type":"boolean"},"channelName":{"description":"The name of the channel","type":"string"},"userEventTypeIdentifiers":{"description":"A list of user event type identfiers","type":"array","items":{"type":"string"}},"unsubscriptionReason":{"description":"The reason for unsubscription. Only considered when the flag IsSubscribed is false.","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[System.Collections.Generic.IList[Meniga.Core.Api.Models.UserEvents.UserEventTypeSubscriptionModel]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.UserEvents.UserEventTypeSubscriptionModel"}}}},"Meniga.Core.Api.Models.UserEvents.UserEventTypeSubscriptionModel":{"description":"User event subscription details","type":"object","properties":{"userEventTypeIdentifier":{"description":"The user event type identifier","type":"string"},"subscriptions":{"description":"List of subscriptions for the user event type","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.UserEvents.UserEventTypeSubscriptionDetailModel"}},"settings":{"description":"List of user event type settings for the user event type","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.UserEvents.UserEventTypeSubscriptionSettingModel"}},"children":{"description":"Children of the user event type with their subscription information","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.UserEvents.UserEventTypeSubscriptionModel"}}}},"Meniga.Core.Api.Models.UserEvents.UserEventTypeSubscriptionDetailModel":{"description":"User event type subscription detail","type":"object","properties":{"channelName":{"description":"The name of the channel","type":"string"},"isSubscribed":{"description":"True if user is currently subscribed to the user event","type":"boolean"},"canUpdateSubscription":{"description":"True if user can (un)subscribe to the user event","type":"boolean"}}},"Meniga.Core.Api.Models.UserEvents.UserEventTypeSubscriptionSettingModel":{"description":"User event type subscription settings","type":"object","properties":{"identifier":{"description":"The identifier for the user event type setting","type":"string"},"value":{"description":"The value of the user event type settings","type":"string"}}},"Meniga.Core.Api.Models.UserEvents.UpdateSubscriptionSettingsRequest":{"description":"Update subscription settings request object","required":["subscriptionSettings"],"type":"object","properties":{"subscriptionSettings":{"description":"The subscription settings to update","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.UserEvents.UpdateUserEventTypeSubscriptionSettingModel"}}}},"Meniga.Core.Api.Models.UserEvents.UpdateUserEventTypeSubscriptionSettingModel":{"description":"User event type subscription setting to update","type":"object","properties":{"identifier":{"description":"The identifier for the user event type setting","type":"string"},"value":{"description":"The value of the user event type settings in the format of the underlying data type","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.PersonInfo[],Meniga.Runtime.WebApi.Models.Pagination.PaginationMetaModel]":{"description":"A document wrapper for API responses","required":["data","meta"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.PersonInfo"}},"meta":{"$ref":"#/definitions/Meniga.Runtime.WebApi.Models.Pagination.PaginationMetaModel","description":"Meta object"}}},"Meniga.Core.Api.Models.PersonInfo":{"description":"Information about a person in the system","type":"object","properties":{"userId":{"format":"int64","description":"The Id of the user, i.e. the household profile","type":"integer"},"personId":{"format":"int64","description":"The Id of the person, i.e. the end user corresponding to this PersonInfo","type":"integer"},"firstName":{"description":"The optional display name for the current person - First name","type":"string"},"lastName":{"description":"The Optional display name for the current person - Surname","type":"string"},"lastLoginDate":{"format":"date-time","description":"The date when this person logged in the last time","type":"string"},"isInitialSetupDone":{"description":"Indicates if initial initialization has been completed for this user","type":"boolean"},"email":{"description":"The email for this person","type":"string"},"culture":{"description":"The preferred culture set for this person","type":"string"},"lastLoginRemoteHost":{"description":"The host from where this person logged in the last time","type":"string"},"createDate":{"format":"date-time","description":"The date when this person was created","type":"string"},"termsAndConditionsId":{"format":"int32","description":"The Id of the Terms and Conditions that this Person accepted","type":"integer"},"termsAndConditionsAcceptDate":{"format":"date-time","description":"The date and time when this user accepted the terms and conditions","type":"string"},"optOutDate":{"format":"date-time","description":"The date and time when this user opted out of the system","type":"string"},"profile":{"$ref":"#/definitions/Meniga.Core.Api.Models.UserProfile","description":"The household profile"},"phoneNumber":{"description":"The phone number for this person","type":"string"},"passwordExpiryDate":{"format":"date-time","description":"The date the user's password is set to expire","type":"string"},"hide":{"description":"True if the user should be hidden from search results in admin","type":"boolean"}}},"Meniga.Core.Api.Models.UserProfile":{"description":"Profile information for a household and a person","type":"object","properties":{"personId":{"format":"int64","description":"The Id of the person to which the profile applies","type":"integer"},"gender":{"format":"int32","description":"The gender of a person, or null if no gender is set","type":"integer"},"birthYear":{"format":"date-time","description":"The birth year of a person, or null if the birth year is not set","type":"string"},"postalCode":{"description":"The postal code, or null if the postal code is not set","type":"string"},"numberInFamily":{"format":"int32","description":"The number of members in the household, including current user, or null if not set","type":"integer"},"numberOfKids":{"format":"int32","description":"The number of kids in the household, or null if not set","type":"integer"},"numberOfCars":{"format":"int32","description":"The number of cars, or null if not set","type":"integer"},"incomeId":{"format":"int32","description":"The income identifier (1 for very low income and 5 for very high income), or null if not set","type":"integer"},"apartmentType":{"format":"int32","description":"The type of an apartment  (1 = Apartment, 2 = House, 3 = Duplex) or null if not set","type":"integer"},"apartmentSize":{"format":"int32","description":"The size of the appartment (in square meters), or null if not set","type":"integer"},"apartmentRooms":{"format":"int32","description":"The number of rooms in the appartment, or null if not set","type":"integer"},"apartmentSizeKey":{"format":"int32","description":"The size of the apartment (1 for very small and 7 for very large), or null if not set","type":"integer"},"hasSavedProfile":{"description":"If not null then it specifies whether or not the user has saved his or her profile at least once.\r\nIf it is null then that check has not been performed.","type":"boolean"},"created":{"format":"date-time","description":"The date when the user was created","type":"string"},"currencyCode":{"description":"The display currency of the user","type":"string"}}},"Meniga.Core.Api.Models.UpdatePersonRequest":{"description":"Update person request model","type":"object","properties":{"firstName":{"description":"The first name of the person to update. If empty then this property will not change.","type":"string"},"lastName":{"description":"The last name of the person to update. If empty then this property will not change.","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.PersonInfo]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.PersonInfo","description":"Primary data"}}},"Meniga.Core.Api.Models.User.RegisterUserRequest":{"description":"Email and password of a user to authenticate","required":["email","password"],"type":"object","properties":{"email":{"description":"The email to validate","type":"string"},"password":{"description":"The password to validate","type":"string"},"culture":{"description":"Preferred culture for this user","type":"string"}}},"Meniga.Core.Api.Models.User.ChangeEmailRequest":{"description":"The change email request object","required":["newEmail","password"],"type":"object","properties":{"newEmail":{"description":"User's new email","type":"string"},"password":{"description":"User's password","type":"string"}}},"Meniga.Core.Api.Models.User.ChangePasswordRequest":{"description":"The change password request object","required":["currentPassword","newPassword"],"type":"object","properties":{"currentPassword":{"description":"User's old password","type":"string"},"newPassword":{"description":"The new password","type":"string"}}},"Meniga.Core.Api.Models.User.ResetPasswordRequest":{"description":"The reset password request object","required":["resetPasswordToken","email","password"],"type":"object","properties":{"resetPasswordToken":{"description":"The reset password token of the person","type":"string"},"email":{"description":"The email of the person","type":"string"},"password":{"description":"The new password","type":"string"}}},"Meniga.Core.Api.Models.User.ForgotPasswordRequest":{"description":"The forgot password request object","required":["email"],"type":"object","properties":{"email":{"description":"The email of the person","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.KeyValueModel[]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.KeyValueModel"}}}},"Meniga.Core.Api.Models.UserMetadataUpdateRequest":{"description":"Model for user metadata","required":["name","value"],"type":"object","properties":{"name":{"description":"Name of the metadata","type":"string"},"value":{"description":"Value of the metadata","type":"string"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.KeyValueModel]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.KeyValueModel","description":"Primary data"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.UserProfile]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"$ref":"#/definitions/Meniga.Core.Api.Models.UserProfile","description":"Primary data"}}},"Meniga.Core.Api.Models.UserProfileUpdateRequest":{"description":"Profile information for a household and a person","type":"object","properties":{"gender":{"format":"int32","description":"The gender of a person, or null if no gender is set","type":"integer"},"birthYear":{"format":"date-time","description":"The birth year of a person, or null if the birth year is not set","type":"string"},"postalCode":{"description":"The postal code, or null if the postal code is not set","type":"string"},"numberInFamily":{"format":"int32","description":"The number of members in the household, including current user, or null if not set","type":"integer"},"numberOfKids":{"format":"int32","description":"The number of kids in the household, or null if not set","type":"integer"},"apartmentSize":{"format":"int32","description":"The size of the appartment (in square meters), or null if not set","type":"integer"},"apartmentType":{"format":"int32","description":"The type of an apartment  (1 = Apartment, 2 = House, 3 = Duplex) or null if not set","type":"integer"},"numberOfCars":{"format":"int32","description":"The number of cars, or null if not set","type":"integer"},"apartmentRooms":{"format":"int32","description":"The number of rooms in the appartment, or null if not set","type":"integer"},"incomeId":{"format":"int32","description":"The income identifier (1 for very low income and 5 for very high income), or null if not set","type":"integer"}}},"Meniga.Runtime.WebApi.Models.Common.JsonApiDocument[Meniga.Core.Api.Models.RealmUser[]]":{"description":"A document wrapper for API responses","required":["data"],"type":"object","properties":{"data":{"description":"Primary data","type":"array","items":{"$ref":"#/definitions/Meniga.Core.Api.Models.RealmUser"}}}},"Meniga.Core.Api.Models.RealmUser":{"description":"Information about the realm user","type":"object","properties":{"id":{"format":"int64","description":"The Id of the realm user","type":"integer"},"userIdentifier":{"description":"The user identifier for the realm user","type":"string"},"realmId":{"format":"int32","description":"The Id of the realm","type":"integer"},"personId":{"format":"int64","description":"The Id of the person","type":"integer"},"userId":{"format":"int64","description":"The Id of the user","type":"integer"}}}}}