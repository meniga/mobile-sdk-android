apply plugin: "jacoco"

jacoco {
    toolVersion = "0.8.2"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

afterEvaluate {
    task jacocoTestReport {
        group = "Reporting"
    }

    android.libraryVariants.all { variant ->
        def variantName = variant.name
        def testTaskName = "test${variantName.capitalize()}UnitTest"
        def jacocoTaskName = "jacoco${variantName.capitalize()}UnitTestReport"

        tasks.create(name: jacocoTaskName, type: JacocoReport, dependsOn: "$testTaskName") {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."

            reports {
                html.enabled = false
                xml.enabled = true
            }

            def excludes = [
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    'android/**/*.*'
            ]
            def javaClasses = fileTree(dir: variant.javaCompiler.destinationDir, excludes: excludes)
            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: excludes)
            classDirectories = files([javaClasses, kotlinClasses])

            sourceDirectories = files([
                    "$project.projectDir/src/main/java",
                    "$project.projectDir/src/${variantName}/java",
                    "$project.projectDir/src/main/kotlin",
                    "$project.projectDir/src/${variantName}/kotlin"
            ])

            executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
        }
        jacocoTestReport.dependsOn jacocoTaskName
    }
}
